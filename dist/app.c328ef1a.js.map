{"version":3,"sources":["../../src/config/theme.ts","../../src/shapes/Circle.ts","../../src/utils/getRandomColor.ts","../../src/tree/BinaryTreeNode.ts","../../src/tree/BinarySearchTreeNode.ts","../../src/tree/index.ts","../../src/utils/getRGBString.ts","../../src/helpers/ColorGenerator.ts","../../src/canvas/Canvas.ts","../../src/enumns/VisualizationType.ts","../../src/utils/tree.ts","../../src/strokes/BezierCurve.ts","../../src/utils/connectPointsWithBezierCurve.ts","../../src/canvas/drawPrettyBinaryTree.ts","../../src/canvas/drawExpandableBinaryTree.ts","../../src/canvas/drawSimpleBinaryTree.ts","../../src/canvas/drawBinaryTree.ts","../../src/canvas/index.ts","../../src/enumns/index.ts","../../src/config/index.ts","../src/index.ts","app.js"],"names":["resultBtn","document","getElementById","nodesValues","output","querySelector","result","error","addEventListener","inputToList","e","preventDefault","value","style","display","data","split","console","log","list","forEach","values","push","parseInt","buildATree","root","BinarySearchTreeNode","i","length","insert"],"mappings":";;AqBAA;;;;AFAA,AVAA,ASAA,AEAA,ACEA,IZFY,AYENA,SAAS,GAAGC,KZFlB,GYE0B,CAACC,cAAT,CAAwB,KAAxB,CAAlB;AbFA,AQCA,AFDA,ADAA,AEAA,AfEA,AOFA,ANCA,AUCA,APFA,ADAA,ASCA,ANDA,AJCA,AmBEA,IAAMC,ErBDA,KAAK,GAAU,CqBCJ,GAAGF,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAApB;AFHA,AnBGE,AkBHF,AEAA,ACIA,ErBDE,EqBCIE,IrBDE,EAAE,AqBCE,ErBFS,CqBENH,QAAQ,CAACI,aAAT,CAAuB,gBAAvB,CAAf;AbHA,AQCA,AFDA,ADAA,AECA,AIFA,AnBIE,ASJF,ASAA,AfCA,ASCA,AQFA,ACKA,CZLA,CTIE,EqBCIC,MAAM,CZLA,EYKGL,QAAQ,CrBDD,AqBCEI,ErBDA,IAFH,ASFrB,EAA6B,KYKd,CAAuB,SAAvB,CAAf;AFLA,AnBKE,ASJA,ASDF,APKA,ASLA,ACMA,ErBDE,ASJA,EYKIE,EVDA,GUCK,GAAGN,GrBDC,EAAE,AWAjB,CAAiB,CXHI,ASDnB,CAAA,AYKoB,CAACI,aAAT,CAAuB,EZLnC,CAAA,KYKY,CAAd,EZLE,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AOEF,AFCA,ADAA,AEDA,AIHA,AnBME,ASJA,ASFF,AXEA,ANGA,AUsBE,APzBF,ADAA,ADCA,AQHA,AUAA,ACQAL,ErBFE,ASJA,OYMO,CAACQ,ErBFE,EAAE,EAJO,GSAnB,CAAA,MYMF,CAA2B,OAA3B,EAAoCC,CZNlC,CAAA,QAAA,CAAA,AYMF,GZNE,CAAA,CAAA,GAAA,QAAA;AUFF,AnBOE,ASJA,ASHF,AEAA,EpBOE,ASJA,QTIQ,EAAE,OSJV,CAAA,CTDmB,gBSCnB,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA;ADCF,AQAA,AFMA,ADDA,AEGA,AIZA,AnBQE,ASJA,ASJF,ANQA,AQRA,ACSA,ErBDE,ASJA,OYKOA,IrBDI,EAAE,ISJb,CAAA,AYKF,CAAqBC,CAArB,ErBPqB,AqBOG,aZLtB,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA;AUJF,AnBSE,ASJD,ASLD,AXKA,ANGA,AGHA,AgBLA,ACUEA,CZVF,CTSE,AqBCAA,CZVU,AYUT,CAACC,EdLE,ANGA,AGHA,GGAG,GPIG,AOJA,EPIE,AOJd,CPKI,CCFY,EoBEd,CpBFiB,CQRU,ERQ7B,IGHA,SACU,kBKNE,KLKZ,CAC2B,WKNE,GAAA,EAAA,CAA7B;AUAA,AnBUK,AkBVL,AXOA,ANGA,AGOI,ADbJ,AGIA,AINA,AUFA,IpBUK,KMFI,ENEG,EAAE,QMFd,CNEI,AMFkB,GAAtB,EAAmC,KAAnC,EAAkD,IAAlD,EAA8D;AED9D,AWPA,AnBUyB,AkBVzB,AZSE,AJDF,AkBRA,ACWE,IrBDuB,EQHnB,AaIAR,GfFG,AJDA,MFE2B,CMDpB,CNCsB,AqBCrB,CAACS,CfFC,EEFnB,CAAqB,CNCrB,AmBGM,CfFkB,EJDD,CmBGI,EfFE,AeE3B,EAA6B,GfFG,IAAI,GAApC;AE2BA,AQ5BF,AFKA,ADGA,AEDA,AIfA,AnBUI,AkBVJ,AZUC,AJDC,AkBTF,ACYIL,GrBHU,CqBGVA,InBHI,CmBGC,CAACM,KAAN,CAAYC,OAAZ,GAAsB,OAAtB;AJZJ,AjBEqB,AGKrB,AEPA,AHSS,AmBIL,CrBXJ,GEOS,ECFH,cAAN,CAAoB;AHOpB,AOJA,ANGA,AEeE,ADnBM,AkBRR,ACaG,GAHD,GdDI,ANGA,ACJiB,GmBKd,GpBDT,CAAY,EKDG,KCFf,ALDE,CKCkB;AOMpB,ADGA,AIlBA,AVSA,ANkCE,AURA,APdE,ACrBJ,AOcA,AVLE,AmBKER,EdLJ,AI0BE,APdE,EUNA,ADGA,AQJAA,KjBOO,AQPF,AVLA,CEYG,AiBPF,CAACO,EdLX,AI0BE,CACI,CPfK,CGZX,AcKI,CjBOsC,AiBPzBC,EVqBf,AT1BiB,CYMnB,ADGA,AXToB,CS4Bd,GT5BkB,AmBKpB,CnBLqB,CS0BvB,CUrByB,CVwBrB,ET7Bc,CS0BlB,AT1B6B,ES8BzB,CUzBF,CnBL+B,CS0BjC,AT1BkC,CUKpC,CD0BM,ACzBF,GDoBF,CT1B6B,CS+Bf,IT/B+B,MUK/C,EAEI,EVPqD,CAAC,MAAtC,CAAD,CAAjB,KUKF,EAGI,cAHJ,EAG4C;AEA5C,ADGA,ANVE,AIgCE,APpBE,AQHN,AVTC,AQHK,AUPN,ACeIP,IAAAA,KXRY,AWQP,CV2BC,APpBE,AiBPFM,KAAN,CAAYC,CjBOV,CAAc,KAAd,AiBPF,GAAsB,MAAtB,EXRE,CAAoC,UAApC,EAAsD;AFiC1D,AGES,APnBN,AQHH,AFZA,AURF,ACgBI,EbwBF,IGES,CAAC,CCtBJ,ASJEC,CV0BI,ADlCL,GWQK,CbwBZ,AEhCO,CFgCK,AEhCL,CCkCC,AU1BOZ,EbwBf,AEhCO,CAAA,CFgC2B,AEhC3B,EAAM,KWQa,CAACS,IXRJ,CWQR,CAAkBI,CXRT,CAAjB,CAAP,EWQe,CAAwB,GAAxB,CAAb;AbcF,AGYoB,APjBlB,AQLK,AFXR,AUTD,ACiBIC,ITGK,ASHLA,EVyBkB,CAAC,EAAE,CCtBjB,CSHG,CAACC,GnBLG,AmBKX,SAAmBH,IAAnB;ALHJ,ATDU,AI6BA,ARVR,ASZe,AFTjB,AUXA,ACkBI,ElBcF,ESZe,IDsBkB,AUxBzBI,CLJD,ATDC,GAAA,AcKI,CVwBV,ARVF,CAAY,CInBE,AcKC,CdLP,CcKN,ElBcF,EAAoB,EalBtB,CACI,IADJ,EAEI,aAFJ,EAGI,OAAA,GAAqC,EAHzC,EAG2C;AAEzC,AFCF,ADGA,AEDA,AfJM,AOHJ,AI4BE,ARVA,ASbI,AQpBR,ACmBIJ,IPCA,ADGA,AQJAA,ETCqB,EIDjB,AKAA,CNGC,AfJO,AGeP,AkBdAK,CVwBC,IRVN,EkBdA,CrBDE,AGeW,AkBdA,CRIjB,AbLyB,CcEzB,GXaI,ASbF,KSDgBC,ENGlB,CACI,GMJa,CNGjB,AfJM,CqBCuB,CNKzB,AfNqD,eeIzD,EAGI,WAHJ,EAII,gBAJJ,EAIgD;APOtC,AQbN,AFEJ,ADGA,AEGE,AfTA,AWwBS,ARTP,ASbF,AQrBF,ACoBMF,ILAF,ELuBO,AUvBLA,CVuBM,CKvBJ,AhBDA,AYEA,CJYE,AGUI,ARTL,CkBdC,CLAC,AKAAG,EVuBD,EUvBJ,CAAUC,GlBcZ,GAAkB,EkBdE,CAACF,ClBcC,GKDhB,Eabc,CbaiB,AabnC,EbaI,OLCY,CACd,GAAG,GafkB,Ebeb,EADM,Eafd,AbiBA,eAAM,MAFQ,EAGd,8BAHc,CAAlB;AKOA,AQpBA,ADQF,AfTE,AC8BF,AUPkB,ARJjB,ASlBM,AQrBT,ACqBK,EpB6BH,Ee7BE,AhBDA,AYCK,CSFL,CVwBgB,CAAC,CIdb,CJce,CHFb,ARrBA,AYCF,GIAK,AhBDA,AC8BX,CACI,EOVU,AQpBA,EhBDE,CQqBC,ARrBA,AC8BjB,EAEI,Ce/BgB,CAAC,EhBFf,EQsBmB,APSzB,COT0B,CPYtB,KelCE,ORsBW,CAAuB,APSxC,EAGsC,MOZrB,CAAf;AAEA,AQrBA,ADOK,AfRL,ACHF,AUyBQ,ARFR,ASpBe,AQrBjB,ACuBIG,ILDA,ADOK,AfRL,AYAa,ASEbA,IVoB2B,CHAtB,COdD,CJcJ,CHAA,AQrBQ,EKCE,CboBC,AQrBA,AKCAL,GboBX,CapBU,CAAV,CLDiB,CAAC,EhBDE,GAAG,KAAK,CAAC,oBAFzB;AQyBJ,AQzBI,ADUS,AfPb,AOJM,AI0BN,ACvBI,AQrBR,ACwBG,INKc,AfPb,EgBCE,AJFmB,GJuBhB,AD1BC,CI0BA,GKzBR,CTDQ,CC0BN,ERtBa,AOJC,CC0BA,AD1BR,EPIU,AYDlB,IJuBE,CRtBqB,CAAC,aAHlB;AQ0BJ,AMpBJ,ADGA,AECQ,AfNJ,AOHF,AIwBS,APdP,AQRF,AQtBF,ACyBC,EjBKG,EULA,ADGA,AbLA,EeMqB,AJed,CAAC,CCtBJ,CJuBC,AGDK,CPdF,CAAC,EOcH,ACtBG,CCMb,AbLc,EIOF,AQRI,CZCC,AYDA,CEGjB,AVK2C,IWDzC,AfNoB,CQsBlB,ARtBmB,AYDA,GJuBG,AIvBA,IJuBI,AIvBd,GZHR,CYG0B,CAAhC,kBJuBwB,EAAtB;AACD,AQrBD,AFEF,ADGA,AEAE,AfNE,ACHM,AUuBU,APbd,AQRJ,IZCE,EWoBgB,CAAC,CIdb,AHPA,CXFE,AUuBa,CKnBb,AZME,GQRC,CIEX,AhBDY,ECHJ,AWEM,CGOC,AfNA,AYDA,CRQX,CHVsB,AGUP,CWDD,CAAC,AdTX,CDGY,CAAC,AYDA,CRQjB,EQRoB,CGOC,GAAG,AHPd,GZJR,CeWY,AHPc,CAAhC,CAN0C,CAQ1C,CGKoC,CAApC,CAJ8C,CAM9C;APgBA,AQtBE,AhBDA,ACQF,AUWQ,APZL,AMfC,AUhBN,ACyBA,IrBDI,IWmB2B,CKlBtB,ANTO,AWSPK,EVkBL,CXnBQ,GAAG,IqBCf,CrBDoB,AqBCAL,CrBDC,GqBCrB,EAA0B,GrBPlB,YUFF,CAA2C,IMStB,INTrB,EMSF,ANT6D;AMU3D,ADMJ,AfPE,AWmBA,APXA,AQRF,AFRA,AWSA,IrBDE,EqBCIM,ENMA,AHPA,CFRC,CC2BC,AD3BA,AWSE,GAAG,ErBDA,EeOE,AMNEC,CrBDD,AURA,EKeE,AHPA,CFRC,CAAZ,CVQc,AYAA,CZAC,EURE,CEQC,IGOI,GAAG,OCNP,ANTK,IMS1B,EAA2B,AJDV,CACjB,CGMkC,KLftC,KKeA,AMNa,CLAT,ADD0C,AMCRP,CNQtC,CCR8C,CJApC,CSAgC,CAAC,CAAD,CAA7B,CAAb,MTDqB,EAEjB;AIAE,AhBTA,AOIE,AIsBC,ACjBJ,AFTN,AUlBD,IR2BO,CAAC,CZDF,AWkBK,CAAC,ACjBF,CIAF,CTLE,AIsBI,IJtBJ,AIsBA,ACjBJ,GLLW,CSI+B,ATJtC,KPJR;AgBUM,AFCR,ACME,AfPA,AO2BD,AIXmB,ARClB,ASlBgB,AFPlB,AUpBA,AC2BE,ENQA,AfPA,AGiBA,EWhBE,AFFc,CAAC,CGQb,AJSc,CITb,AfPA,AWgBc,ACjBA,ASAd,CLCC,AhBAA,CWgBe,ARCd,CAAC,CkBlBCQ,CAAC,ErBCV,CGiBO,AkBlBM,CAAb,CNQA,AfPe,AGiBiB,CYVhB,AMRAA,CAAC,CPEC,EOFER,CPEyB,AdD7C,GqBDwB,CPEyB,AOFxBS,GPEoB,EAA/C,ACME,CAA+B,AMR/B,EAAiCD,CAAC,EAAlC,EAAsC,ENQtC,EAA0C,SAA1C;ACT8C,AFKhD,ACKE,AfPA,AOLA,ANWQ,AUSA,AREN,ASnBE,AQ3BN,AC4BIF,ENQF,AfPA,CYJqB,CSGnBA,CTAE,CGQA,CCVA,ADUC,AfPA,CAAC,AWeuB,AUhBvB,CpBOE,AEWD,AkBlBAI,CpBOC,CUSN,EVTkB,AEWlB,CFXmB,CAAb,AoBPN,ClBkBY,AkBlBAV,CNQd,CAAgB,EMRE,ClBkBhB,AkBlBiBQ,CNQnB,AMRkB,CNQG,AMRnB,KrBCF,GAA6B,OeO7B,EAX8C,CAc9C,UfVA;AQqBA,AQpBI,ADUJ,AfVA,ACOA,AUSE,ARCD,ASnBI,AQ5BP,AC6BG,EbqBD,ARpBA,EYFK,CAAC,EZED,AYFG,CZEF,CWgBC,GClBH,CJsBO,CGJT,EHIS,CGJI,IXhBf,CWgBE,EXhBoB,aAAtB;AQqBE,ARpBF,AWgBE,AREF,ASrBe,AQ5BjB,EpB+BE,EYHe,CAAC,EZGX,AYHa,CZGZ,CWgBC,CHIC,KGJN,GXhBF,AWgBgB,GXhBG,GWgBjB,OXhBF;AQoBS,AQnBP,ADSF,AfTA,AWgBE,ACpBE,AQ5BN,AC8BE,ErBEA,CYPqB,EAIjB,CJsBK,AOVL,CfTC,CAAC,CgBAC,ALgBA,CIPC,CAAC,CPUD,GOVR,AJOE,EIPa,CfTf,AWgBgB,GXhBG,GWgBjB,OXhBF,aqBFeF,ELEU,EKFzB,EAAqBrB,MLEnB,AKFF;AbqBiB,AQlBb,AHIN,AEKI,AfTF,AWgBE,ACpBG,AQ7BP,AC+BC,ErBEC,EeSE,AHbG,CAAC,CJsBW,CRlBZ,AYJG,CZIF,CaIC,AFYA,ECpBH,EDoBF,GXhBF,AWgBc,GXhBG,CWgBf,IIPoB,CAAC,EfTvB,EeS2B,CFL7B,AEK8B,CFJ1B,GEIoB,CFLxB,CEKoC,CFHhC,QGN2B,IAAzB,EAA+B,ADSb,CFLxB,CEKqD,CFFjD,QAHJ,EGJM,AHQF,AEC4D,ECTZ,CDSa,CAAzC,EAA4C,OFLpE,EAI0B;ALUhB,AQjBF,AHSN,AEAI,AfTJ,ACMQ,AUUN,APXA,AQVY,AQ7BhB,EpBkCE,AIKE,EQVY,CAAC,CGcX,CfTC,AYLY,CJsBS,AQjBpB,AhBAA,AIKE,CHCA,AUUD,APXE,CHCD,EcE0D,CPSnC,APXX,AUUlB,CVVmB,AGDb,CHCA,COWN,AGDY,APXG,CYNiC,EhBClD,CWgBE,EXhBkB,WAApB;AQkBE,AQjBI,AHSN,AEAI,AfTL,ACmBG,AUHA,APXE,AQXA,AQ7BN,GRyBuB,EAKjB,CCcA,AEAA,ECTE,CRiBC,APEA,AUHA,CIPC,EAAE,CJOR,CVGA,EUHY,CVGC,EOFb,CGDA,EHCkB,AKRpB,AZUE,EYVoB,OLQpB,CAA4B,CAA5B,EAA+B,CAA/B,EAAkC,KAAlC,EAAyC,MAAzC;AACD,AQpBiD,AHYhD,AEHgE,ARblE,AN0BE,AUHA,APXE,AQXC,AFJD,AU1BN,Eb6BE,EMgBE,ADfG,CGYiB,AHZhB,CGYJ,CCTE,AJHI,CRWA,CHcD,AUHA,AD1BO,EEIV,EDsBF,APXW,GGZC,AIuBA,CJvBC,CHYG,EOWhB,EJvBY,AN0BZ,CGdqB,CSID,ANhBwB,CMgBvB,AZUA,GGdnB,EAA0B,QHc5B,GYVoB,CAApB,UHnBE,CAAsD,KAAtD,EAAmE;AF6BvE,AQlBI,AFCN,ADQG,AEAC,ARhBA,AN0BA,AUHA,APXI,AQZQ,AFHd,GGcwB,CAOxB,ADlBc,CAAC,EAAE,EEQV,APRA,AN0BA,AUHA,AD1BC,IC0BN,CJvBA,AGHK,CVUM,CWgBC,CD1BG,CHGD,CAAC,CIuBf,GVGA,CM1BoB,EN0BE,GM1BP,COQnB,CACI,CJZqB,CHGQ,EOQjC,CPRkB,COUd,GPVoC,COQxC,EAGI,APXA,EGHF,EKmB+B,GDRjC,EAGmC,UCK/B,EAA8C;ADHhD,ACII,ARhBH,AN0BG,AUHF,APXG,ADWL,ASxBI,AFFL,AU3BD,EjBqDE,CS7BqB,CAArB,CRciB,CWQb,AdUA,AGZA,GOSG,CRAC,CAAC,CYPC,CJOR,CIPU,EJOE,ARAN,EAAyB,CFGhB,CUHf,CVGiB,EcX6B,IdUxB;AejBtB,AFKF,ACII,ARfJ,ANyBI,AUHH,ARAC,ASvBF,AFFF,EEEE,IEYI,ACIA,AdUA,GenBG,AbgBA,CYPC,EAAE,CAAC,CZOT,ASvBU,CAAC,ETuBE,EYPE,AHhBjB,CX0BkB,AW1BA,EEYlB,ACIoB,AdUA,AEHlB,EWXoB,IbYE,GcRd,IAAuB,AHhBA,CAAC,UIOT,AJPP,EAAlB,OIOE;AACE,AFKF,ADIF,AEHgD,Ada5C,AUFJ,ARDC,ASvBF,AQhCD,EPgDE,ECJE,CCCA,CdaE,CcVC,QdUQ,EAAE,CYVC,GAAG,EZUE,CadC,CAAC,CbcC,CYVC,CAAC,aGTD,AFKH,AbcQ,Cad5B,GELE,EAA2B,EHSZ,CAA6B,MAAK,IGTjD,CfgBoB,CehBsB;AACxC,AFKL,ADIC,AEAE,AdUA,AGdA,ADYJ,AiBzDF,GNwCmC,CAOjC,ADEE,EEAE,AdUA,EenBE,AZKE,IWIE,CXJG,CWID,CdUC,CGdG,CYN8B,AfoB/B,EYVE,CAAC,CTJG,EWIA,AdUA,GcVG,AdUA,AGdpB,EAAwB,GSI1B,UEA4B,AdUA,McXzB;ACPC,AHSJ,AEAE,AdKoB,AGTlB,AgB9CR,KnBuDI,CcLE,ECTE,EHSE,AEAA,AXJE,EWIA,GXJK,AQZF,CIKiC,GZOxC,EAAe,GSIC,GAAG,oBAAoB,CACvC,IADuC,CEAL,CFC5B,UEDuC,GAAG,CAA5C,CFAmC,EAChB,CED8B,OFAd,EACN,MED0B,OFApB,CAA3C;AGRI,ADMD,AdaJ,AGdO,AgB/CV,KL6CI,GCHI,KZKO,IAAL,CAAU,GYLC,EAAE,CZKb,CAAiB,KAAjB;AYRsC,AFS9C,ADIE,AEAD,AdWD,AGfQ,AgBhDV,ENgDE,KETI,CHaE,UCJU,GAAG,CDIjB,EAAoB,GCJG,CAAC,qBAAP,CACf,MAAM,gBAAgB,CAAC,IAAD,EAAO,IAAP,EAAa,OAAb,CADP,CAAnB;ANYA,AQhBI,AFOL,ADEK,ATJG,AgBjDT,EZ4DE,IKPI,gBLOgB,CAAC,IKPI,CAAC,CLON,EAAiB,CKPZ,EAAO,ELOZ,EAA8B,WKPzB,EAAwB,QAAxB,EAAkC,aAAlC,CAArB;ALQF,AMPJ,ADAK,AEAH,AKtDF,MLsDM,GPOG,COPC,CAAC,IPOP,CAAY,AOPd,EAAgB,IPOd,GAAqB,KAAK,GAAL,CAAS,MAAT,GAAkB,MAAvC;AACA,AQhBA,AHSD,AEAC,ARjBF,AIuBA,APXM,AMfF,AUnCN,EbsCE,AIuBA,CEbmB,CAAnB,AEOE,EJME,CAAC,EHCE,AE3BO,CC0BV,CPXO,COWuB,EJvBtB,CCwBV,CAAY,CDxBF,CHYN,CAAa,EIYjB,EJZqB,CIYD,AOPA,CAAC,IPOI,AOPA,CAAC,EPON,CAAS,EOPT,EAAa,CPOb,AE3BlB,CAAwC,EF2BL,EJZpB,CAAyB,EIY1C,GJZiB,AMff,CNeE,CMfwD,CKoBxC,EAA8B,WAAW,GAAC,CAA1C,EAA6C;APQlE,AQhBG,AHSL,AEAK,ARjBF,AIuBA,APXI,AMfN,AUpCF,IT8DI,EINE,CJMC,CAAC,CD1BE,GKoBE,EAAE,GJMV,ED1BK,GAAe,CKmB6C,cLnBvC,IMWH,IAArB,EAA2B,ANX/B,aMWI,EAA0C;ARkB9C,AQjBM,AHUR,AEDM,ARjBF,AIuBA,APXG,ADWL,AO1BD,AUrCD,EjB+DE,EQAE,CPzBe,CWmBb,AXHA,COSC,CKfC,ALeA,EJvBE,CJuBC,GQAP,ARAO,CIvBI,AIuBA,EKhBiC,CTP9B,EIuBE,MAAhB,EAAwB,KAAK,MAA7B,MJvB2B,KAAK,GAAlB,EAAuB,KAAK,KAA5B,EAAmC,KAAK,IAAxC,CAAd,CAFU,CAIV;ASOI,ADM6D,AJSjE,ADzBJ,ICyBI,CIToB,CAApB,CJSG,CKfC,ALeA,WAAJ,GAAkB,KAAK,KAAvB;AKjB4C,ADY5C,ARhBA,AIsBA,IAAA,GKlBE,ALkBC,CAAC,CJtBC,YIsBL,CACI,CJvBJ,CAAoB,GIuBX,GJvBT,CIsBA,EAEI,KAAK,IAFT,EAGI,GITyB,EJSpB,IAHT,EAII,KAAK,EIVT,EAA8C,AJM9C,EAKI,KAAK,IALT,EAMI,KAAK,IANT;AKdE,ADSA,AJaF,APlBE,ADSF,IQSA,EIbE,CJaC,CAAC,APlBE,EDSA,EYJE,CXLG,CWKD,AJaV,IPlBE,EAAgB,ADSF,GYL8B,AZK3B,CAAA,CAAA,EAAA,GAAA,KAAK,IAAL,MAAS,IAAT,IAAS,EAAA,KAAA,KAAA,CAAT,GAAS,KAAA,CAAT,GAAS,EAAA,CAAE,SAAF,EAAT,KAA0B,CAA7C;AazCF,AFoCF,ACEM,ARjBF,AN0BM,AUIP,APlBK,ADSJ,EFKM,IcTJ,ERjBE,COeC,CCEC,AZIA,CCTG,CWKD,AdSQ,CcTP,ARjBA,AN2BP,GADc,AGdZ,CGZA,AHYW,CHgBb,EM5Bc,CJqBC,CYJC,CRjBlB,AHYI,CHcY,AGdM,ADSF,CYJC,ARjBA,AJqBD,CFQlB,AERkB,EAAA,CYJZ,AXLJ,EHcY,AELI,EYJS,AdYd,GERU,KWN7B,AXMwB,GWNiB,GXMP,IAAV,IAAU,EAAA,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAU,EAAA,CAAE,SAAF,EAAV,KAA2B,CAA/C;AaZH,AFOC,ACDgD,ARd5C,AN8BF,AGlBI,ADSJ,KYPA,EAGG,EDFE,CbeC,CM9BC,AJqBA,IAAI,CAAC,GAAL,CAAS,IWNI,CAAC,APfnB,CAAoB,IJqBf,CWNF,CXMuB,CIrB1B,COe4B,CAAhC,QXMS,IAAoC,CAA3C;AWLH,ACEK,AdYK,AUzEM,APwDV,ADSJ,MYJG,AdYK,CAAD,KcZE,EAAE,SAAS,GAAG,eAAM,MADzB;APQL,AMNF,ACAM,ARlBA,AN6BQ,EOLZ,IONI,AdWQ,IcXJ,ARlBA,EQkBE,GPMG,AQfA,ATTA,GCwBA,EDxBL,GAAa,GAAjB,EAAsB,yBQkBc,WAAW,GAAG,CAA5C,IAAiD,eAAM;APO/D,AOTG,ARfC,AN4BE,AGhBJ,ADvDc,KYuDhB,GdgBe,CGhBR,CIYD,EPIN,COJS,ADxBA,EI+BE,CHPC,CJZV,CAAc,GIYC,CJZG,KIYR,ADxBR,CCwBoB,ADxBA,KAApB,KCwBQ,CAAuB,GJZnB,CIYJ,AJZ6B,CIYzC,IJZgB,CAAd;AWOH,ARlBI,AN6BH,AGjBC,IHiBD,GAAG,CAAC,SAAJ;AOLA,AOLH,ARlBI,AN6BD,AGhBA,IHgBA,CMxCU,CAaV,CN2BG,CONC,APMA,CONC,GAAL,EAAU,CLFC,EFQX,GAAgB,KAAhB;AOLE,AKNN,AEEA,AdUI,IAAA,GAAG,CAAC,CYZC,EZYL,CONQ,APMA,CAAR,EAAW,CONC,APMZ,EAAc,GONN,CAAU,CKNtB,CACI,AZWA,EAAsB,CAAtB,CYZJ,CZY6B,CYVzB,GZU6B,CYZjC,AZYkC,EYT9B,AZSyB,GAAU,CAAnC,EAAsC,EYZ1C,CLMY,CAAN,AKFF,CZQA,YYZJ,EAI0B;ALGrB,AKDH,AZOE,IAAA,GAAG,CYPC,AZOA,IAAJ;AYPK,ANrBL,AN6BD,IYRM,CAAD,MNrBG,KAAP;ACwBA,AKHQ,ANpBT,AN8BD,IYVU,OLGD,GAAP;AACD,AKJK,MAAS,QAAf;ALMA,AKLA,ANnEkB,EMmElB,IAAI,CAAC,UAAL,CAAgB,cAAhB,CAA+B,CAA/B,EAAkC,CAAlC,EAHwB,CAKxB;ACJF,AJnBM,SImBG,AJnBO,+BImBhB,GAAwC,AJnBlC,CACF,cADE,EAEF,YAFE,EAGF,QAHE,EAIF,SAJE,EAIe;AIgBnB,ADIA,ATTE,AMTF,ENSE,IUKE,EDIE,AHlBA,EIcE,GAAG,AVLE,CUKb,CDIa,ANrBA,CHYA,ESSG,IAAI,CAAC,OHlBO,GGkBZ,AHlBe,CGkBC,IAAhB,CAAqB,IAArB,CAAhB,qBHlB+D,CAC3D,cAD2D,CAA/D;AIeA,AVLI,AMPJ,MIYI,EVLI,AMPF,GIYG,EVLI,CUKD,CAAZ,EVLI,EAAe,YMPU,GAAG,6BAA6B,CAAC,YAAY,GAAC,CAAd,CAA7D;AIaA,ADGA,AEFF,AXNQ,AMPN,MIYI,ADGA,EHfE,CKaC,IDDI,ADGA,ATRE,GUKC,CAAd,CDGgB,ATRE,IAAL,AMPO,CNOG,EMPA,IKazB,CACI,EFCE,EEFN,AXNe,ESQqB,AEAhC,AXRI,WMPuC,EGe7C,AEFF,CLbkD,CGeC,AEC/C,OAHJ,ALbyB,EKgBU,CLf/B,sBADqB,GACI,QAD3B;AGgBE,AEEF,AdOQ,AGjBH,AMNL,ETuBQ,McPF,ALhBA,GGcG,CZSS,CAAC,EYTN,CAAC,AZSI,EAA8B,EcP9B,GAAG,ALhBA,GGcZ,AHde,CGcC,AEEA,CAAC,GFFjB,EAAP,IEEmB,EAArB,ULhB+C,GAAG,SAA1B,GACtB,uBADsB,GACI,SAD5B;AIYA,ADGC,AEED,AdOE,ASrBF,GGUA,ICDK,CCKC,CFFC,AHZA,CTqBC,GaZG,cAAX,CCK0B,GDLG,ACKA,eDL7B,EAA8C,oBCKS,YAA1B,CAA7B;APEA,AMNE,ADGA,AEEF,AdMS,AGjBL,AMHF,EFeF,EEfE,EToBO,CAAD,CaXF,ACKA,GFFG,ATTE,CIYD,GAAA,AKHG,ATTT,CSSU,MCHM,IDGX,CCHgB,ADGA,AHblB,MIUL,EAA+B,KDGxB,EAAP;ALIA,AMNE,ADGH,AECM,AdMK,AGhBT,AMHD,IKaK,ALbL,EISE,AbUQ,CAAJ,GOJA,GAAG,AMNA,ACIL,GPEQ,CMNC,CAAX,GNMe,GAAL,CAAS,CEjBhB,SFiBO,CAAoB,IAApB,CAAZ;AMLC,ADGJ,AEAmB,AdMH,AGdb,AMJA,IKYgB,ALZhB,CIOA,CbWa,KaTN,QbSD,ASrBD;AFkBL,AMLE,ADIN,AEFQ,AdMwB,ASjB5B,IAAA,EISE,ACE0B,AdMA,EOHxB,CAAC,GAAL,CMLS,ACEX,CPGY,AOPqB,CAMjC,EDJe,CAAX,EbQwC,EAAE;AOF1C,AMLD,AbO4C,ASrBxC,GAAP,KTqB+C,IOFrC,IAAI,KAAJ,APEkD,COFxC,CPE0C,sBOFpD,CAAN;AACD,AOFH,AdG8C,ASf/C,QKYO;ADHJ,ACIA,AdEM,IcFN,IDJI,AbMmE,IAAvE,GaNW,GAAG,CAAd,EAAiB,KCGb;APIJ,AMNE,ACIF,AdEA,IcFA,EDJE,IAAI,AbMA,COAC,EMNE,CNMT,GMNa,CAAC,CCEV,EDFK,CAAS,IAAI,CAAC,GAAL,CAAS,OAAT,CAAT,EAA4B,IAA5B,CAAP;ANOH,AMNE,ACID,AdCO,IcDP,CDNA,CbOO,KaLA;ANQT,AMPI,ACAE,AdIE,MaJJ,ACIA,EdAoB,GaJf,GAAG,IAAI,CAAC,EbIf,CaJU,CAAS,OAAT,EAAkB,KAAlB,CAAR,cCKA,oBADA,EAEA,YAFA,EAGA,QAHA,EAIA,SAJA,CAJJ,CAPiC,CAkBjC;ADVG,AbKD,IAAA,GAAG,CAAC,GAAJ,CAAQ,CAAR,EAAW,CAAX,EAAc,MAAd,EAAsB,CAAtB,EAAyB,IAAI,CAAC,EAAL,GAAU,CAAnC,EAAsC,KAAtC;AaJD,ACUD,AdLE,IAAA,GAAG,CcKC,AdLA,WAAJ,GAAkB,EcKE,GAAG,MdLvB,QcKqC,GAAG,CAA1C;AACA,AdLE,IAAA,GAAG,CcKC,AdLA,McKM,AdLV,GcKc,gBAAgB,GAAG,sBAAsB,GAAG,CAA7C,GACf,eAAM,aADN;ADTA,ACWA,AdNC,AGXC,EAAA,MWiBI,CDXC,GCWG,GAAI,CXjBE,CACV,MADU,EACsB,MWgBR,GAAG,sBAAsB,GAAG,CAA7C,GACb,eAAM,aADN,CAtBiC,CAyBjC;ADbE,ADGJ,AZGE,AGVI,IUIF,IADK,CDIA,oBAAT,CACI,IADJ,EAEI,eAFJ,EAGI,QAHJ,EAII,aAJJ,EAI0B;ACPhB,ADSR,AEKA,AXjBI,IUGI,IDSF,AEKA,EXjBI,aWiBW,CXjBG,EWiBA,CXjBG,CAAA,EWiBC,IXjBK,KAAA,IAAN,EWiBH,CAAoB,CXjBjB,MAAM,KAAA,CWiBT,CAAxB,GXjBiC,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,IAAR,MAAiB,IAAjB,GAAwB,MAAxB,GAAiC,OAAxD,CAHkC,CAKlC;AIQJ,AMRO,ADUA,AEMP,EPRA,AOQA,CDhBA,CDUO,CAAC,EAAE,OLFE,EKEN,CLFM,AOQG,CAAC,oBAAhB,CAAqC,eAArC,EAAsD,cAAtD,EA3BiC,CA6BjC;APTE,AMNH,ADOsB,ATTjB,ISSiB,CAAC,EAAE,CTThB,CAAC,EIQA,GJRK,EIQA,EJRN,IAAc,CAAC,KAAK,EIQnB,CAAoB,EJRzB,EAA+B,QIQ1B,EAAP;AACD,AMLH,ADKQ,AESN,AXjBM,EWiBN,IFTqC,ITR3B,ISQV,CAFwB,CAIxB,ATVM,EAAY,IWiBE,CAAC,IAAD,EAAO,eAAP,EAAwB,GAAxB,EAA6B;APPjD,AOOkD,AXhB1C,IWgB0C,MAAD,KXhBlC,MAAM,CAAC,cAAD,CAAb;ASUR,AEM0D,AXfnD,IWemD,EFNtD,cAAc,GAAG,cAAc,CAC/B,IAD+B,EAE/B,eAF+B,EAG/B;AAAC,AEG4C,AdPzC,EAAA,CcOY,CFHf,AEGL,CFHM,EAAE,IZJS,CAAC,GAAD,CYIb,CZJ2C;AYI5B,AEIpB,AdPG,AGRI,ISWa,CAAC,EAAE,GZHd,GGRK,CAAC,IAAD,CAAP;ASWF,AZHK,AGPJ,GSO8B,EAI/B,ATtBkC,CHkB7B,AGLL,CHKI,WYA2B,CAAnC;AAMA,AZNY,EYMZ,IAAI,AZNQ,CYMP,AZNG,QcSK,EFHb,CAAgB,cAAhB,CAA+B,SAA/B,EAA0C,SAA1C;AACA,AZPe,EYOf,IAAI,AZPW,CYOV,IZPG,MYOR,CAAgB,IAAhB,CAAqB,eAArB,EAZwB,CAcxB;ALLA,APJsB,AGJlB,EIQJ,IPJsB,EGJd,CIQD,CAAC,EAAD,CJRM,CIQe,GJRpB,IAAa,CAAC,KAAK,KAAvB,EAA8B;AIShC,AKKF,AZVQ,AGHF,QSaA,AZViC,COKhC,CJRG,EIQR,APLA,COKS,GJRL,EAAY,WIQhB,CAA0B,WAA1B,EAAwC,KAAD,IAAU;AAC/C,AKIG,AZTL,AGHM,ISYD,IAAD,ATZE,EHGA,EOKE,EJRI,CAAC,cAAD,CAAN,GAAyB,KAAK,IAA9B;AIQG,AMLb,ADSe,AZTJ,AGFF,ISWM,EZTJ,EOKE,CMLJ,INKG,UMLZ,CACI,IADJ,EAEI,IAFJ,EAGI,SAHJ,EAII,QAJJ,EAImB;ANCC,AMClB,ADGM,AZTE,MYSc,ELJJ,AMCZ,AbNkB,QYSQ,CAAC,GAAX,CAAe,AZTnC,CAF6C,CAI7C,EYOoB,CAAtB,CAfwB,CAiBxB;ALNU,AMCH,AbHL,AGJI,IUOC,CAAD,KNDqB,GJNd,CAAC,CIMV,GJNS,EAAO,KAAK,IAAZ,CAAP;AIOF,AMAM,ADMV,ATZK,IUMK,CVXN,CSiBA,IAAI,CAAC,ATZE,CIMD,GKMV,ATZe,ESYA,GTZK,KAAL,IAAc,CAAC,KAAK,IAAxB,EAA8B;AIM9B,AMAL,ADOJ,AZTA,AGHI,MUKS,ENAJ,APFL,EYSE,ATZE,EIKK,EAAE,AMAjB,EbFc,AGHR,EAAY,CHGD,CYSC,GAAG,EZTnB,QYS6B,CAAC,GAAX,CAAe,IAAI,CAAC,IAApB,EAA2B,IAA9C;ALPQ,AMCV,ADOE,AZTA,AGHM,QUKF,AbFA,AGHE,EIIkB,AKQlB,ITZM,CIIiB,AJJhB,CHGD,GAAG,CAAf,IYSoB,GAAG,CLRC,AMCA,CVLZ,CAAN,CIIuC,AMClB,EVLI,GSYC,ECPE,AVLE,CUKD,ADOA,ILRX,AMCe,AVLjC,CIKA,AMAkC,IAAL,CNAxB,GAAG,AMAkC,EDOP,ECPW,CNAjC,AMAkC,GNAvC,CAAS,CMAW,CAApC,CDOE,OLRwB,EAElB,KAAK,GAAG,KAAK,GAAL,CAAS,SAFC,EAGlB,CAHkB,EAGf,CAHe,CAAtB,CAF+C,CAQ/C;AMJJ,ADOE,ATZK,EUKP,IAAI,CAAC,GDOG,OCPR,CAAgB,IDOI,GAAG,OCPvB,CAA+B,CAA/B,EAAkC,CAAlC,EAJiB,CAMjB;ANGI,AKGA,AZVF,MYUE,CAAC,CZVC,CYUC,GLHG,CPPC,CAAC,GOOG,CKGC,ELHE,APPZ,CYUa,EZVE,CAAnB,EAAsB,qBOOO,KAAK,CAAC,CAAD,CAAlB,EAAuB,KAAK,CAAC,CAAD,CAA5B,EAAiC,KAAK,CAAC,CAAD,CAAtC,CAAd,AKII,IAAI,GAAG,UADI,CADI;ACJvB,ADQI,AZZA,AGHE,MSeF,AZZA,CYYC,CCRC,CDQC,ITfM,CHGD,AGHE,CUOD,EbJE,CaIC,AVPH,EAAO,EUOA,AbJhB,CaIiB,EVPI,KAAZ,CAAP,EUOU,CAAgB,IAAhB,CAAqB,IAArB,CAAhB;ANGI,AMFJ,ADGuB,AZPnB,AGHC,EUOL,GDGE,ATlCoC,CH2BlC,AGDA,IIOI,IPNI,COMC,EPNE,CaIC,AbJZ,CaIa,GAAjB,CAAqB,OAArB,EAA8B,GNEtB,KAA8B,CMFtC,INEI,EAAyC;AACvC,AKOJ,AZbC,AGAC,ISaF,SLPS,KKOK,GAAG,YLPb,GAA4B,KAA5B,AKOiC,CACjC,IAAI,CAAC,IAD4B,EAEjC,eAFiC,EAGjC,YAHiC,EAIjC,aAJiC,CAApB,IAKZ,cALL;ALNI,AMHN,ADeE,MCfE,ENGE,EAAE,CAAC,EMHE,GNGH,CAAF,CMHU,cAAZ,IAA8B,WDeH,SCf/B,EAAwD,IDetD,EAA8C;ALX3C,AMHH,ADeE,AZlBF,IAAA,EYkBE,CZlBC,CAAC,GaGG,CDeC,EAAE,CCfC,CAAC,CbHZ,GAAgB,GYiB8B,GCdvC,CAAgB,IAAhB,AbHP,EaGA;ANIC,AMHF,ADeG,AZlBF,AGFE,GUGJ,CbDE,CORA,CK0BE,CZlBC,CAAC,CaGC,CDeC,ATpBE,CAAC,CSoBD,AZlBR,GAAW,GAAG,IGFN,ESoBY,CAAC,CZlBC,AGFE,IHEE,CGFG,KAAL,CAAY,MAAZ,CACpB,CHC4B,IGDvB,IHC+B,CGDpC,CHCJ,AGDgB,WAAZ,GAA0B,KADN,EACa,IADb,CAAtB,CA7BkC,CAiClC;AIKH,AMHC,ADY8C,AZf9C,AGEE,IHFF,CYeA,EAGG,AZlBA,CAAC,GaGG,IAAI,CAAC,CbHZ,GAAgB,MaGT,CAAgB,CbHvB,YaGO,EAAP;ANKF,AMJC,ADeG,AZlBF,IAAA,EYkBE,CZlBC,CAAC,IYkBI,EAAE,EZlBV,CAAa,KAAb,CYkBmB,CZlBC,CAApB,CYkBsB,CZlBC,CAAC,EYkBE,CAAC,AZlBA,QAA3B,EYkBsB,CAAgB,SAAhB,EADnB;ACbN,ADeK,AZlBH,AGCG,IAAA,ESiBA,IAAI,EAAE,GTjBM,CAAC,IAAb,GAAoB,GSiBA,ETjBK,CSiBF,GTjBvB,CSiB2B,CAAC,IAAL,CAAU,UAAV,CAAqB,SAArB;ACb7B,ADWO,AZdL,AGAI,IAAA,CSWF,UTXc,CAAC,KAAb,GAAqB,KAAK,KAA1B;ASkBH,GAzCuB,CA2CxB;ATnBI,QAAI,MAAJ,EAAY;AACV,MAAA,MAAM,CAAC,cAAD,CAAN,GAAyB,WAAzB;ASmBN,ATlBK,MSkBD,IAAI,CAAC,KAAT,EAAgB;ALZhB,AKaE,ELbF,OAAO,CAAC,AKaA,ELbD,EAAqB,QKaR,GAAG,UAAU,CAAC,GAAX,CAAe,IAAI,CAAC,KAApB,EAA4B,KAAjD;ALZA,AKaA,ATlBE,SIKG,CKaC,CTlBG,CIKT,AJLU,CIKD,GJLA,EAAO,MSkBI,GAAG,ELbvB,AJLS,CIKiB,AJLxB,MSkB8B,CLbhC,EAAoC,AKaD,KLbA,IAAU,MKaJ,UAAzC;ALZE,AKaF,AZnBF,AGCG,EHDH,QYmBQ,CZnBC,COMC,EPND,SYmBY,GAAG;ALbb,AKcP,AZnBF,AGEA,MSiBE,CAAC,CLdM,CKcJ,CZnBC,GOKE,KKcM,GAAG,uDACX,KAAK,GAAG,YADG,CADK;ALbN,AKiBd,AZrBA,MYqBA,AZrBA,CYqBC,CLjBa,CKiBX,WZrBW,EAAE;AOIV,AKac,AZjBH,KYiBnB,GZjBmB,EOIM,KAAvB,MPJ8B,EAAE;AOKhC,AKmBF,AZxBkB,IYwBlB,ELnBE,OAAO,CAAC,GAAR,CAAY,AKmBA,GAAG,ELnBf,EAAmB,KAAnB,WKmBmC,CACjC,IAAI,CAAC,KAD4B,EAEjC,eAFiC,EAGjC,aAHiC,EAIjC,aAJiC,CAApB,IAKZ,cALL;ALlBE,AMAN,ADwBI,AZ/BM,QAEF,CaKC,GNAG,APPR,SaOJ,CACI,IADJ,EAEI,IAFJ,EAGI,SAHJ,EAII,EDoB6B,QCxBjC,EAKI,KDmBA,EAA8C,ECxBlD,EAKwB;ANLX,AMOX,ADkBI,AZ7BF,MY6BE,ELzBO,AMOL,GbXG,COIM,AKyBL,ELzBO,AKyBL,GZ7BV,IaWiB,EDiB6B,CCjB1B,yCAA8B,UAA9B,CAAtB;ANPU,AMQV,ADkBI,AZ7BH,MY6BG,EClBE,ENRoB,AK0BlB,EAAE,GL1BqB,IMQd,GAAG,GDkBG,CAAC,EL1BE,GAAqB,YAArB,CAClB,KAAK,GAAG,KAAK,GAAL,CAAS,EMOyB,QNRxB,EAElB,AMMoD,GAAG,CAA3C,CNNP,AMMb,GNNgB,KAAK,GAAL,CAAS,SAFC,EAGlB,CAHkB,EAGf,CAHe,CAAtB;AAKA,AMIJ,ADegD,AZzBhD,KYyBE,CLnBE,AMIA,CDkBC,CLtBC,CAAC,WMIW,GAAG,KAArB,CAJsB,CAMtB,MNNoB,KAAK,CAAC,CAAD,CAAlB,EAAuB,KAAK,CAAC,CAAD,CAA5B,EAAiC,KAAK,CAAC,CAAD,CAAtC,CAAD,CAAF;AACD,AKsBC,KL/BF,CK+BE,MAAM,EAAE,SAAS,GAAG,IAAI,CAAC,UAAL,CAAgB,SAAhB,EADnB;ALpBJ,AMKD,ADiBI,MCjBA,ADiBA,ICjBI,ADiBA,CCjBC,CDiBC,GCjBV,EAAe,SDiBS,GAAG,IAAI,CAAC,KAAL,CAAW,UAAX,CAAsB,SAAtB;AChBzB,ADcG,KAHH,KCXM,gBAAgB,GAAe,IAAI,CAAC,IAAL,CAAU,IAAV,IAAkB,IAAI,CAAC,IAAL,CAAU,KAA5B,GACnC,CAAC,GAAG,SAAJ,EAAe,MAAf,CADmC,GACV,CAAC,GAAG,SAAJ,CAD3B;AN/IiB,AMiJjB,ADgBD,UChBO,KAAK,GAAG,SAAS,GAAI,MAAM,eAAM,aAAvC;AAEA,IAAA,cAAc,GAAG,cAAc,CAC3B,IAAI,CAAC,IADsB,EAE3B,IAF2B,EAG3B,gBAH2B,EAGT;AAChB,ADYR,AT3BE,EAAA,IUeM,CAAC,CVfD,CUeG,ADYJ,AT1BD,KUakB,AVdhB,CIIK,CJFP,MAFE,CS2BR,CTzBsC;AUc9B,ADYT,AZ9BC,AGMI,EHNJ,IakBQ,AblBJ,CakBK,AblBJ,EakBM,OblBG,GAAG,KAAK,cAAL,CAAoB,SAAjC,EAA0C;AagBtB,ADgB1B,AZ/BI,AGME,KUM6B,CAAd,EVNX,EUaD,AbnBC,GGMK,GAAG,KAAK,GUMnB,EVNM,IAAsB,KAAK,IAA/B,EAAqC;AUcvC,AbnBE,AGME,MHNF,MGMQ,CAAC,OHNK,EAAE,EGMR,IAAgB,KAAK,IAAL,CAAU,MAAV,CAAiB,EUad,GVbH,CUa1B,CVbkD,CUaf,GVbT,CAAtB;AUcF,AbnBE,AGMA,MUaF,EbnBE,IamBI,CVbG,CUaD,AVbE,SUYuB,EVZxB,EAAc,IAAd,CAAP;AUcF,AbrBgB,AGQf,KANiC,CUmBlC,AVXA,IUWI,EAAE;AAF2B,AbpB7B,KaoBN,EAGG,CbnBC,IAJJ;AawBE,MAAA,MAAM,EAAE,aAAa,GAAG,IAAI,CAAC,UAAL,CAAgB,SAAhB,EADvB;AAED,AbnBF,AGME,MUaA,EbnBE,AGME,EUaA,EAAE,CVbG,GAAG,KHNG,AGME,EUaA,CbnBC,EamBE,AVbhB,IUaoB,AVbE,CUaD,EbnB3B,EamBsB,AbnBS,AGME,CUaD,IVb9B,EAAsC,IUalB,CAAqB,SAArB;AAFnB,AbhBD,AGME,KUOJ,ObbQ,AGME,CAAC,WAAD,IAAgB,KAAK,EHNA,GAAG,AGMR,CAAW,MAAX,CAAkB,KHNG,AGMrB,EAAyB,CHND,GGMxB,CAAtB,MHNF;AaoBH,ADUH,AZ7BM,AGME,GUdgB,CA6BtB,KDQO,EZ7BE,EGMI,CAAC,WHNV,AGMS,CHNW,CGMG,IAAd,CAAP,OSuBR,AZ7BM,CY8BF,EZ9BsC,EY6B1C,EACyC,mBZ9BwB,GAAG,SAA1B,GACpC,SADoC,GACxB,uBADZ;AYgCJ,AZ9BI,AGKC,KAZiC,CAclC,ESuBE,IAAI,CZ9BC,EY8BE,EZ9BT,EY8Ba,CAAC,IAAL,GAAY,8BAA8B,CACnD,IAAI,CAAC,IAD8C,CAA9B,GAErB,GAFS,GAEJ,CAFT;AAGA,AZhCG,QYgCG,KAAK,GAAG,IAAI,CAAC,KAAL,GAAa,8BAA8B,CACrD,IAAI,CAAC,KADgD,CAA9B,GAEvB,GAFU,GAEL,CAFT;ACbA,ADgBA,EAAA,IChBI,IAAI,CAAC,CDgBC,CAAC,GChBX,ADgBA,CAAe,CChBC,GDgBhB,EAAqB;ACfnB,ADgBA,AZlCA,AGKE,IS6BF,IADmB,AT5Bb,EUaA,CblBC,EGKI,GHLX,EGKM,KAAe,GUaC,EVbpB,CUamC,CVbT,GUaa,CAAC,KAAL,CAAW,IAAX,IAAmB,IAAI,CAAC,KAAL,CAAW,KAA9B,GACnC,CAAC,GAAG,SAAJ,EAAe,OAAf,CADmC,GACT,CAAC,GAAG,SAAJ,CAD5B;AAEA,ADeA,AZlCD,AGKK,IS6BJ,MCfM,EVdI,GAAG,CUcD,EVdI,CUcD,IVdM,KUcG,GAAI,MAAM,AVdlB,CAAoB,MAApB,CAAZ,OUcoC,aAAxC;AAEA,ADWmB,AZ9BrB,AGIM,GS0BN,CCXE,SVfW,KUeG,AVfE,GUeC,CVfb,aUe2B,CAC3B,IAAI,CAAC,KADsB,EAE3B,IAF2B,EAG3B,gBAH2B,EAGT;AAChB,ADYR,AT9BM,MUkBE,CAAC,EAAE,ADYJ,IAAI,AT9BE,EUiBW,CDaV,ET9BI,GS8BlB,ET9BM;AUmBE,ADYT,AT9BO,MUkBE,CAAC,EAAE,IVlBE,GAAP;AUgBkB,ADgB1B,AT/BO,KUY4B,CAAd,IAOZ,cAPL;AAQA,+CAA6B,IAA7B,EAAmC;AACjC,AVnBA,MUmBA,KVnBO,CUmBD,EAAE,AVnBE,IAAH,CAAP,IUkBiC;AAEjC,AVnBD,MUmBC,IAAI,EAAE;AAF2B,AbtBrC,EAAA,GasBE,EAGG,CbzBC,CAAC,SAAS,GAAG,KAAK,cAAL,CAAoB,SAAjC,EAA0C;Aa0B5C,AbzBF,AG9JuB,MUuLrB,IbzBI,EayBE,EAAE,aAAa,GAAG,IAAI,CAAC,UAAL,CAAgB,SAAhB,EADvB;AAED,AbzBA,MayBA,AbzBA,IayBI,EAAE,QbzBQ,EAAE,CayBC,GAAG,IAAI,CAAC,KAAL,CAAW,UAAX,CAAsB,SAAtB;AAFnB,AbtBC,KamBJ,GbnBI,OGKO;AUqBZ,Ab3BmB;AYsCtB,AZvCU,QAIF,CYmCC,GZvCL,iBYuCJ,CACI,IADJ,EAEI,aAFJ,EAGI,OAHJ,EAGmC;ACZjC,ADcA,EAAA,OCdO,GDcG,GAAG,IAAI,GAAJ,CCdb,CDcA;ACbD,ADcC,AZvCE,QYuCI,AZvCA,aAAa,CYuCC,EZvCE,CYuCC,QZvCrB,EAA+B,oBYuCoB,CAAC,IAAD,CAArD;ACXF,ADYE,AZvCI,QYuCE,IZvCI,QYuCQ,GAAG,IAAI,CAAC,OZvCO,EYuCZ,CZvCe,CYuCpC,YZvCiD,GAAG,UAAhD;AYwCJ,AZvCI,QYuCE,GZvCG,cAAL,CAAoB,aAApB,GAAoC,uBAAuB,GAAG,SAA1B,GACpC,SADoC,GACxB,uBADZ;AYuCG,AZrCH,IYqCG,SAAD,AZrCK,IAAP;AYqCc,AZpCf,IYoCe,QAAZ;AAAsB,IAAA;AAAtB,AZlCJ,MYkC2C,KZlCpC,EYkCT,CALiC,CAOjC,CZpCE;AACD;AYoCD,AZlCA,QYkCM;AACJ,IAAA,sBADI;AAEJ,IAAA,eAFI;ACRR,ADWI,IAAA,KCXK,YAAT,CACI,IADJ,EAEI,IAFJ,EAGI,aAHJ,EAGyB;AACvB,ADIM,MAIF,8CACA,cADA,EAEA,YAFA,EAGA,QAHA,EAIA,SAJA,CAJJ,CARiC,CAmBjC;ACdA,MAAI,WAAW,GAAG,IAAlB;AACA,ADcA,AZ1CA,EAAA,Ia4BI,EDcE,IAAI,GCdG,ADcA,AZ1CA,Ga4BG,Ab5BH,OY0CU,CAAC,GAAX,CAAe,CCd5B,GDca,EAAsB,IAAnC;ACbA,ADcA,AZ1CE,Ma4BE,EDcE,EZ1CE,aa4Ba,CDcC,ECdE,CDcC,ECdzB,YDcuC,GAAG,CAA1C;ACbA,ADcA,AZ1CI,MAAA,Ea4BE,ADcA,MAAM,GAAI,GZ1CE,EAAE,Ea4BE,GAA4B,EAAlD,IDcgC,GAAG,sBAAsB,GAAG,CAA5D,CAtBiC,CAwBjC;ACfA,Ab5BM,Ma4BF,Eb5BE,Ya4BY,Cb7BE,Ea6BC,cAAc,CAAC,IAAD,EAAO,IAAP,EAAa,CAAC,GAAG,gBAAJ,CAAb,EAAoC;AACrE,ADeF,AZ3CM,Ia4BJ,CAAC,EAAE,CDeC,AZ3CA,Qa2BiE,ODgBlD,GAAG,IAAI,iBAAJ,CAAoB,aAApB,CAAxB;ACdE,ADeF,AZ9CoB,EY8CpB,ECfE,CAAC,EAAE,UDeU,CAAC,oBAAhB,CAAqC,SCfF,MDenC,EAAsD,SCfjD,KDeL;ACjBuE,ADmBvE,AZjDQ,Ga8B2B,CAAnC,CANuB,CAWvB,Eb9BM,IALJ;;AaoCF,Ab7BE,Oa6BG,Cb7BC,Ka6BK,Qb7BQ,Ga6BnB,Ab7BsB,Ia6BI,Ub7BxB,EAAoC,Ga6BtC,EAA2C;AACzC,Ab7BE,Ia6BF,Sb7BS,Ka6BK,Ab7BA,Ga6BG,Gb7BR,CAAY,Qa6BQ,CACzB,Kb9BK,CAAP,Ka6B2B,EAEzB,IAFyB,EAGzB,SAHyB,EAIzB,iBAJyB,EAKzB,gBALyB,CAAZ,IAMZ,cANL;ADeF,AZ3CG,EY2CH,eAAe,CAAC,OAAhB,CAAyB,KAAD,IAAU;ACPhC,ADQA,IAAA,ICRI,UDQU,CCRC,EDQE,GCRG,EDQpB,ICRA,EAA4B;AAC1B,ADQF,AZ3CA,IY2CA,ECRE,EbnCE,SamCS,GAAG,CbnCC,GAAG,CY2CC,CAAC,IAAD,CCRM,CAAC,ADQA,ICR1B,EbnCF,EAAoC,OY2Cf,EAAwB;ACP3C,ADQA,AZ3CA,MamCA,ADQA,CAAC,EAAE,IZ3CI,EamCE,ADQA,GCRG,ADQA,AZ3CA,IAAL,CAAU,IamCI,GAAI,MAAM,CbnCxB,CAAP,aamCqC,aAArC,SDQwD,IAAI,GAAC,CAAjD,CAD+B;ACN3C,ADQA,AZ3CD,MamCC,ADQA,CAAC,EAAE,aCRa,CAAC,IAAjB,CAAsB,MAAtB,gBDQiC,GAA9B;ACPJ,ADK4C,KCT7C,ADSqB,EAGlB,ICRI,GDQG,CAAC,aAAD,CAHW,CAArB;ACJE,ADQH,AZ3CC,GYqCF,EA/BiC,CC6B7B,ADUJ,KZ7CS,KAAP,CamCa,GAAG,WAAW,CAAC,KAA1B;AACA,AbnCH,MamCG,SAAS,GAAG,SAAS,GAAI,MAAM,eAAM,aAArC;AACA,ADSJ,AZ3CA,EY2CA,ICTI,gBAAgB,CAAC,ADSA,CAAC,GCTlB,CAAsB,ADSL,EAAO,KCTxB,UDSiB,EAAwB;ACR1C,ADSD,IAAA,CAAC,EAAE,MAAM,GAAG,uDAA4C,IAAI,GAAC,CAAjD,CAD+B;AAE3C,IAAA,CAAC,EAAE,yCAA8B,GAA9B;ACTH,ADO2C,GAAxB,CCPnB,CDUC,OAAO,CAAC,QCVQ,IAAI,CAArB,ADUQ,CAHW,CAArB;ACNC,ADUF,GCzCwB,CAiCvB;;eDUa;ACTb,AbnCA,EamCA,AbnCA,UAAU,CAAC,GamCG,GAAG,CbnCP,EAAgB,SamCG,CACzB,WADyB,EAEzB,IAFyB,EAGzB,SAHyB,EAIzB,iBAJyB,EAKzB,gBALyB,CAAZ,IAMZ,cANL,CAlCuB,CA0CvB;Ab1CE,SAAK,OAAL,GAAe,OAAf;Aa2CF,Ab1CC,Sa0CM,cAAP;AACD,AbzCC;Aa2CF;;;;;;;AbrCE,EAAA,cAAc,CAAC,CAAD,EAAY,CAAZ,EAAqB;AACjC,SAAK,CAAL,GAAS,CAAT;AACA,SAAK,CAAL,GAAS,CAAT;Aa2CJ,Ab1CG,Sa0CM,gBAAT,CACI,IADJ,EAEI,IAFJ,EAGI,OAHJ,EAGmC;AAEjC,Ab7CA;Aa8CA,QAAM,UAAU,GAAG,gCAAgC,EAAnD;AACA,QAAM;AACJ,IAAA,IAAI,EAAE,aADF;AAEJ,IAAA,KAAK,EAAE;AAFH,MAGF,+BAA+B,EAHnC;AAIA,QAAM,cAAc,GAAG,yCAA8B,UAAU,GAAG,CAA3C,CAAvB;AACA,QAAM,aAAa,GAAG,4CAClB,aAAa,GAAC,cADI,CAAtB;AAGA,QAAM,YAAY,GAAG,IAAI,CAAC,GAAL,CAAS,cAAT,EAAyB,OAAO,CAAC,SAAjC,CAArB;AACA,QAAM,WAAW,GAAG,IAAI,CAAC,GAAL,CAAS,aAAT,EAAwB,OAAO,CAAC,QAAhC,CAApB;AACA,AbjDA,EAAA,IAAI,CAAC,CaiDC,GbjDF,EAAsB,CaiDd,GAAI,WAAW,GAAC,CAAb,GAAmB,aAAa,GAAC,CAAhD,CAdiC,CAgBjC;AACA,AbnDE,UAAM;AACJ,MAAA,cAAc,EAAE;AamDpB,AbnDqB,EamDrB,IAAI,CAAC,CbnDgB,aAAa,EAAE,IamDpC,CAA0B,YAA1B,EAAwC,WAAxC,EAlBiC,CAoBjC;AbrDoB,OADZ;AauDR,AbrDI,EaqDJ,IbrDI,YaqDY,CbrDC,EaqDE,AbrDA,IaqDI,GAAJ,EAAnB,CArBiC,CAuBjC;AbvDoB,QAAA;AawDpB,AbxDmB,QawDb,cAAc,GAAG,YAAY,CAC/B,IAD+B,EAE/B,IAF+B,EAG/B,MAAM,GAAG,uDAA4C,aAAa,GAAG,CAA5D,CAHsB,CAAnC;Ab1DQ,QAGF,IAHJ,CADwB,CAMxB;Aa0DF,MAAI,cAAJ,EAAoB;AAClB,Ab1DA,Ia0DA,Kb1DK,OAAL,GAAe,KAAK,Ca0DC,CAAC,IAAD,Cb1DN,Ca0Da,Eb1DE,Ea0DT,EAAa,Cb1DC,Ma0Dd,CAArB,Ab1De,GAA8B,IAAI,CAAC,YAAL,EAA7C;Aa2DD,Ab1DC,SAAK,UAAL,CACI,IAAI,CAAC,UAAL,EADJ,EAEI,MAFJ,EAGI,OAHJ;Aa2DH,AbtDG,SAAK,UAAL,CACI,IAAI,CAAC,aAAL,EADJ,EAEI,MAFJ,EAGI,KAAK,OAHT,EAbwB,CAmBxB;AakDJ;AbjDI,SAAK,UAAL,CAAgB,IAAI,CAAC,UAAL,EAAhB,EApBwB,CAsBxB;;AACA,SAAK,SAAL,CAAe,IAAI,CAAC,UAAL,EAAf,EAvBwB,CAyBxB;;AACA,WAAO,KAAK,OAAZ;AACD;;AArPS;AasSZ,SAAS,wBAAT,CACI,IADJ,EAEI,aAFJ,EAGI,OAHJ,EAGmC;AAEjC,ebnDa;AaoDb,QAAM,IAAI,GAAG,IAAI,iBAAJ,CAAoB,aAApB,CAAb;AACA,EAAA,eAAe,GAAG,EAAlB;AAEA;;;;AAGA,EAAA,IAAI,CAAC,OAAL,CAAc,KAAD,IAAU;AACrB,IAAA,eAAe,GAAG,gBAAgB,CAAC,GAAjB,CAAqB,KAArB,KAA+B,eAAjD;AACA,IAAA,qBAAqB,CAAC,IAAD,EAAO,IAAP,EAAa,OAAb,CAArB;AACD,GAHD;AAKA;;;;AAGA,EAAA,IAAI,CAAC,OAAL,CAAc,KAAD,IAAU;AACrB,IAAA,cAAc,GAAG,KAAjB;AACA,IAAA,qBAAqB,CAAC,IAAD,EAAO,IAAP,EAAa,OAAb,CAArB;AACD,GAHD,EAjBiC,CAsBjC;;AACA,EAAA,qBAAqB,CAAC,IAAD,EAAO,IAAP,EAAa,OAAb,CAArB;AACD;;eAEc","file":"app.c328ef1a.js","sourceRoot":"..","sourcesContent":["import {Theme} from './types';\n\nconst theme: Theme = {\n  radius: 20,\n  growthAndShrinkTimes: 1.25,\n  leafNodeSpace: 75,\n  lineHeight: 90,\n  textFont: 'Poppins',\n  strokeColor: '#f56042',\n  colorArray: [\n    {bgColor: '#fff2e0', borderColor: '#f56042'},\n  ],\n};\n\n/**\n * Set the user defined theme if required\n *\n * @param {Theme} userDefinedTheme\n */\nexport function setTheme(userDefinedTheme: Partial<Theme>) {\n  const {\n    radius = theme.radius,\n    growthAndShrinkTimes = theme.growthAndShrinkTimes,\n    leafNodeSpace = theme.leafNodeSpace,\n    lineHeight = theme.lineHeight,\n    colorArray = theme.colorArray,\n    textFont = theme.textFont,\n    strokeColor = theme.strokeColor,\n  } = userDefinedTheme;\n\n  theme.radius = radius;\n  theme.growthAndShrinkTimes = growthAndShrinkTimes;\n  theme.leafNodeSpace = leafNodeSpace;\n  theme.lineHeight = lineHeight;\n  theme.colorArray = colorArray;\n  theme.textFont = textFont;\n  theme.strokeColor = strokeColor;\n}\n\nexport default theme;\n\n","import {CanvasComponent} from '..';\nimport theme from '../config/theme';\nimport {CircleColorSettings} from '../config/types';\nimport {RadiusSettings} from './types';\n\n/**\n * Rate at which circle will grow or shrink\n */\nconst growthRate = 0.3;\n\n/**\n * Describes a circle in the canvas\n */\nclass Circle {\n  /**\n   * Radius of the circle\n   */\n  private radiusSettings: RadiusSettings\n\n  /**\n   * The colorId of the circle\n   */\n  private colorId: string = ''\n\n  /**\n   * Color of the circle\n   */\n  private colorSettings: CircleColorSettings\n\n  /**\n   * Value to be displayed inside the circle\n   */\n  private value: string\n\n  /**\n   * X Position of the circle\n   */\n  private x: number = -1\n\n  /**\n   * Y Position of the circle\n   */\n  private y: number = -1\n\n  /**\n   * For constructing a new circle\n   *\n   * @param {string} value\n   * @param {number} radius\n   * @param {CircleColorSettings} colorSettings\n   */\n  constructor(\n      value: string,\n      radius: number,\n      colorSettings: CircleColorSettings,\n  ) {\n    this.value = value;\n    this.colorSettings = colorSettings;\n    this.radiusSettings = {\n      currentRadius: radius,\n      originalRadius: radius,\n      maxRadius: radius * theme.growthAndShrinkTimes,\n      minRadius: radius / theme.growthAndShrinkTimes,\n    };\n  }\n\n  /**\n   * Draw the circle\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {number} radius\n   * @param {string} color\n   */\n  private drawCircle(\n      ctx: CanvasRenderingContext2D,\n      radius: number,\n      color: string,\n  ) {\n    const {x, y} = this;\n\n    ctx.beginPath();\n    ctx.fillStyle = color;\n    ctx.arc(x, y, radius, 0, Math.PI * 2, false);\n    ctx.fill();\n  }\n\n  /**\n   * Draw the border\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  private drawBorder(ctx: CanvasRenderingContext2D) {\n    const {x, y, colorSettings, radiusSettings: {currentRadius: radius}} = this;\n    const {borderColor} = colorSettings;\n\n    ctx.arc(x, y, radius, 0, Math.PI * 2, false);\n    ctx.strokeStyle = borderColor;\n    ctx.stroke();\n  }\n\n  /**\n   * Write the text\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  private writeText(ctx: CanvasRenderingContext2D) {\n    const {x, y, value, colorSettings} = this;\n    const {borderColor} = colorSettings;\n\n    // @todo: Make this configurable\n    // Decide font size\n    let fontSize = '10pt';\n    let ySpacing = 5;\n    if (value.length > 3) {\n      fontSize = '8pt';\n      ySpacing = 3;\n    }\n\n    ctx.fillStyle = borderColor;\n    ctx.font = `${fontSize} ${theme.textFont}`;\n    ctx.textAlign = 'center';\n    ctx.fillText(value, x, y + ySpacing);\n  }\n\n  /**\n   * Get the current radius\n   *\n   * @return {number}\n   */\n  getRadius() {\n    const {\n      radiusSettings: {currentRadius: radius},\n    } = this;\n    return radius;\n  }\n\n  /**\n   * Increase radius of the circle\n   * @param {number} maxRadius\n   * @return {boolean} - Weather size was changed\n   */\n  grow(maxRadius = this.radiusSettings.maxRadius) {\n    const {\n      radiusSettings: {\n        currentRadius,\n      },\n    } = this;\n\n    if (currentRadius < maxRadius) {\n      const originalIncreasedRadius = currentRadius + growthRate;\n      this.radiusSettings.currentRadius = originalIncreasedRadius > maxRadius ?\n      maxRadius : originalIncreasedRadius;\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Decrease the radius of the circle\n   * @param {number} minRadius\n   * @return {boolean} - Weather size was changed\n   */\n  shrink(minRadius = this.radiusSettings.minRadius) {\n    const {\n      radiusSettings: {\n        currentRadius,\n      },\n    } = this;\n\n    if (currentRadius > minRadius) {\n      const originalDecreasedRadius = currentRadius - growthRate;\n      this.radiusSettings.currentRadius = originalDecreasedRadius < minRadius ?\n      minRadius : originalDecreasedRadius;\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Bring the circle back to its original radius\n   * @return {boolean} - Weather size was changed\n   */\n  restoreCircle() {\n    const {\n      radiusSettings: {\n        currentRadius,\n        originalRadius,\n      },\n    } = this;\n\n    if (currentRadius > originalRadius) {\n      return this.shrink(originalRadius);\n    }\n\n    if (currentRadius < originalRadius) {\n      return this.grow(originalRadius);\n    }\n\n    return false;\n  }\n\n  /**\n   * Set the color id of the circle\n   *\n   * @param {string} colorId\n   */\n  setColorId(colorId: string) {\n    this.colorId = colorId;\n  }\n\n  /**\n   * Set the x and y coordinates of the circle\n   *\n   * @param {number} x\n   * @param {number} y\n   */\n  setCoordinates(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Draw the circle on the screen\n   * Draw the border\n   * Add the text\n   *\n   * @param {CanvasComponent} comp\n   * @return {string} - The color id represented by the unique color\n   */\n  draw(comp: CanvasComponent) {\n    const {\n      radiusSettings: {currentRadius: radius},\n      colorSettings: {bgColor},\n    } = this;\n\n    // Draw circle\n    this.colorId = this.colorId ? this.colorId : comp.getNextColor();\n    this.drawCircle(\n        comp.getContext(),\n        radius,\n        bgColor,\n    );\n    this.drawCircle(\n        comp.getHitContext(),\n        radius,\n        this.colorId,\n    );\n\n    // Draw border\n    this.drawBorder(comp.getContext());\n\n    // Write text\n    this.writeText(comp.getContext());\n\n    // Return the colorId\n    return this.colorId;\n  }\n}\n\nexport default Circle;\n","import {CircleColorSettings} from '../config/types';\nimport theme from '../config/theme';\n\n/**\n * Get a random color settings\n *\n * @return {CircleColorSettings}\n */\nfunction getRandomColor():CircleColorSettings {\n  const {colorArray} = theme;\n  return colorArray[Math.floor(Math.random() * colorArray.length)];\n}\n\nexport default getRandomColor;\n","import Circle from '../shapes/Circle';\nimport theme from '../config/theme';\nimport getRandomColor from '../utils/getRandomColor';\n\n/**\n * Describes a node of a binary tree\n */\nclass BinaryTreeNode<T extends string | number> {\n  /**\n   * The value of the node\n   */\n  value: T\n\n  /**\n   * The canvas circle\n   */\n  nodeCircle: Circle\n\n  /**\n   * The left child of the node\n   */\n  left?: BinaryTreeNode<T>\n\n  /**\n   * The right child of the node\n   */\n  right?: BinaryTreeNode<T>\n\n  /**\n   * For constructing a new binary tree node\n   *\n   * @param {T} value\n   */\n  constructor(value: T) {\n    this.value = value;\n    this.nodeCircle = new Circle(\n        `${value}`,\n        theme.radius,\n        getRandomColor(),\n    );\n  }\n\n  /**\n   * Set the left child\n   *\n   * @param {BinaryTreeNode} value\n   */\n  setLeft(value: BinaryTreeNode<T>) {\n    this.left = value;\n  }\n\n  /**\n   * Set the right child\n   *\n   * @param {BinaryTreeNode} value\n   */\n  setRight(value: BinaryTreeNode<T>) {\n    this.right = value;\n  }\n\n  /**\n   * Get the height of the binry tree from the node\n   * Height of root is 1\n   *\n   * @return {number}\n   */\n  getHeight():number {\n    const leftHeight = this.left?.getHeight() || 0;\n    const rightHeight = this.right?.getHeight() || 0;\n    return Math.max(leftHeight, rightHeight) + 1;\n  }\n}\n\nexport default BinaryTreeNode;\n","import BinaryTreeNode from './BinaryTreeNode';\n\n/**\n * A Binary search tree node\n */\nclass BinarySearchTreeNode<T extends string | number>\n  extends BinaryTreeNode<T> {\n    /**\n     * Left child of the node\n     */\n    left?: BinarySearchTreeNode<T>\n\n    /**\n     * Right child of the node\n     */\n    right?: BinarySearchTreeNode<T>\n\n    /**\n     * Set the left child of the node\n     *\n     * @param {BinarySearchTreeNode<T>} value\n     */\n    setLeft(value: BinarySearchTreeNode<T>) {\n      super.setLeft(value);\n    }\n\n    /**\n     * Set the right child of the node\n     *\n     * @param {BinarySearchTreeNode<T>} value\n     */\n    setRight(value: BinarySearchTreeNode<T>) {\n      super.setRight(value);\n    }\n\n    /**\n     * Insert a value into the node\n     * (Using Recursion)\n     *\n     * @param {T} value\n     */\n    insert(value: T) {\n      // Skip equal value\n      if (value === this.value) {\n        return;\n      }\n\n      // When value is lesser\n      if (value < this.value) {\n        if (this.left) {\n          this.left.insert(value);\n          return;\n        }\n        this.setLeft(new BinarySearchTreeNode(value));\n        return;\n      }\n\n      // When value is greater\n      if (this.right) {\n        this.right.insert(value);\n        return;\n      }\n      this.setRight(new BinarySearchTreeNode(value));\n    }\n\n    /**\n     * Find the minimum value from the given node\n     *\n     * @param {BinarySearchTreeNode<T>} node\n     * @return {BinarySearchTreeNode<T>}\n     */\n    findMinimum():BinarySearchTreeNode<T> {\n      if (this.left) {\n        return this.left.findMinimum();\n      }\n      return this;\n    }\n\n    /**\n     * Delete this node\n     *\n     * @param {BinarySearchTreeNode<T>} parent\n     * @return {[\n     *  BinarySearchTreeNode<T>,\n     *  BinarySearchTreeNode<T>\n     * ]} [deletedNode, currentRoot]\n     */\n    deleteThisNode(\n        parent?: BinarySearchTreeNode<T>,\n    ): [BinarySearchTreeNode<T>?, BinarySearchTreeNode<T>?] {\n      // Which direction is this node from the parent\n      const childDirection = parent?.left === this ? 'left' : 'right';\n\n      // Case 1: Delete leaf node\n      if (!this.left && !this.right) {\n        if (parent) {\n          delete parent[childDirection];\n        }\n        return [this];\n      }\n\n      // Case 2: Delete when there is only one child\n      if (this.left && !this.right) {\n        if (parent) {\n          parent[childDirection] = this.left;\n        }\n        return [this, this.left];\n      } else if (this.right && !this.left) {\n        if (parent) {\n          parent[childDirection] = this.right;\n        }\n        return [this, this.right];\n      }\n\n      // Case 3: There are 2 children\n\n      // Step 1: Delete the in order successor\n      const [deletedNode] = this.right!.delete(\n        this.right!.findMinimum().value, this,\n      );\n\n      // Step 2: Set the in order successor as the current node\n      // Deleted node will always be found\n      deletedNode!.left = this.left;\n      deletedNode!.right = this.right;\n      if (parent) {\n        parent[childDirection] = deletedNode;\n      }\n\n      return [this, deletedNode];\n    }\n\n    /**\n     * Delete a node\n     * (Using recursion)\n     *\n     * @param {T} value\n     * @param {BinarySearchTreeNode<T>} parent\n     * @return {[\n     *  BinarySearchTreeNode<T>,\n     *  BinarySearchTreeNode<T>\n     * ]} [deletedNode, currentRoot]\n     */\n    delete(\n        value: T,\n        parent?: BinarySearchTreeNode<T>,\n    ): [BinarySearchTreeNode<T>?, BinarySearchTreeNode<T>?] {\n      // Delete from left node\n      if (value < this.value && this.left) {\n        const [deletedNode] = this.left.delete(value, this);\n        return [deletedNode, this];\n      }\n\n      // Delete from right node\n      if (value > this.value && this.right) {\n        const [deletedNode] = this.right.delete(value, this);\n        return [deletedNode, this];\n      }\n\n      // Delete the current node\n      if (this.value === value) {\n        const res = this.deleteThisNode(parent);\n        delete this.left;\n        delete this.right;\n        return res;\n      }\n\n      return [, this];\n    }\n}\n\nexport default BinarySearchTreeNode;\n","import BinaryTreeNode from './BinaryTreeNode';\nimport BinarySearchTreeNode from './BinarySearchTreeNode';\n\nexport {\n  BinaryTreeNode,\n  BinarySearchTreeNode,\n};\n","/**\n * Get RGB string from red green and blue values\n *\n * @param {number} red\n * @param {number} green\n * @param {number} blue\n * @return {string}\n */\nfunction getRGBString(red: number, green: number, blue: number) {\n  return `rgb(${red}, ${green}, ${blue})`;\n}\n\nexport default getRGBString;\n","import getRGBString from '../utils/getRGBString';\n\n/**\n * The gap between 2 ids\n */\nconst gap = 10;\n\n/**\n * For generating color\n */\nclass ColorGenerator {\n  /**\n   * The red color value\n   */\n  private red = 0\n\n  /**\n   * The green color value\n   */\n  private green = 0\n\n  /**\n   * The blue color value\n   */\n  private blue = 1\n\n  /**\n   * Increment a color\n   *\n   * @param {'red' | 'green' | 'blue'} color\n   */\n  incrementColor(color: 'red' | 'green' | 'blue') {\n    this[color] = (this[color] + gap) % 256;\n  }\n\n  /**\n   * Get the next color\n   * Starts from rgb(0, 0, 0)\n   *\n   * @return {string}\n   */\n  getNextColor() {\n    // Generate the rgb value\n    const color = getRGBString(this.red, this.green, this.blue);\n\n    // Increment the color\n    this.incrementColor('blue');\n    if (this.blue < gap) {\n      this.incrementColor('green');\n      if (this.green < gap) {\n        this.incrementColor('red');\n      }\n    }\n\n    // Return the color\n    return color;\n  }\n}\n\nexport default ColorGenerator;\n","import ColorGenerator from '../helpers/ColorGenerator';\nimport getRGBString from '../utils/getRGBString';\nimport {GetColorCallBack} from './types';\n\n/**\n * Defines one canvas\n */\nclass CanvasComponent {\n  /**\n   * The canvas element\n   */\n  private $el: HTMLCanvasElement\n\n  /**\n   * This is a hidden canvas element\n   * which is used to redraw all the elements from the canvas\n   * in unique colors.\n   *\n   * This way an element can be easily identified from this hit canvas\n   * just by using the color in O(1)\n   *\n   * Otherwise to identify an element in the canvas it will take O(n)\n   *\n   */\n  private $hitEl: HTMLCanvasElement\n\n  /**\n   * The color generator for generating new color\n   */\n  private colorGenerator: ColorGenerator\n\n  /**\n   * The current hovering color\n   */\n  private currentHoveringColor: string = ''\n\n  /**\n   * For constructing a new canvas component\n   *\n   * @param {HTMLCanvasElement} $el\n   */\n  constructor($el: HTMLCanvasElement) {\n    const $hitEl = document.createElement('canvas');\n\n    this.$el = $el;\n    this.$hitEl = $hitEl;\n    this.colorGenerator = new ColorGenerator();\n  }\n\n  /**\n   * Clears the canvas\n   */\n  clearCanvas() {\n    const {height, width} = this.$el;\n    this.getContext().clearRect(0, 0, width, height);\n  }\n\n  /**\n   * Set the maximum width and height\n   *\n   * @param {number} height\n   * @param {number} width\n   */\n  setMaxWidthAndHeight(height: number, width: number) {\n    this.$hitEl.height = this.$el.height = height;\n    this.$hitEl.width = this.$el.width = width;\n  }\n\n  /**\n   * Get the hit 2d context\n   *\n   * @return {CanvasComponent}\n   */\n  getHitContext(): CanvasRenderingContext2D {\n    const ctx = this.$hitEl.getContext('2d');\n    if (!ctx) {\n      throw new Error('Cannot get 2d context');\n    }\n\n    return ctx;\n  }\n\n  /**\n   * Get the 2d context\n   *\n   * @return {CanvasRenderingContext2D}\n   */\n  getContext(): CanvasRenderingContext2D {\n    const ctx = this.$el.getContext('2d');\n    if (!ctx) {\n      throw new Error('Cannot get 2d context');\n    }\n\n    return ctx;\n  }\n\n  /**\n   * Get the next color from the color generator\n   *\n   * @return {string}\n   */\n  getNextColor() {\n    return this.colorGenerator.getNextColor();\n  }\n\n  /**\n   * On hover get the canvas hit color\n   *\n   * @param {GetColorCallBack} cb\n   */\n  onHover(cb: GetColorCallBack) {\n    this.$el.addEventListener('mousemove', (event) => {\n      const {pageX, pageY} = event;\n      const {data: pixel} = this.getHitContext().getImageData(\n          pageX - this.$el.offsetLeft,\n          pageY - this.$el.offsetTop,\n          1, 1,\n      );\n\n      // Callback should only be called on color change\n      const color = getRGBString(pixel[0], pixel[1], pixel[2]);\n      if (this.currentHoveringColor !== color) {\n        this.currentHoveringColor = color;\n        cb(color);\n      }\n    });\n  }\n\n  /**\n   * On click of canvas get the hit color\n   *\n   * @param {GetColorCallBack} cb\n   */\n  onClick(cb: GetColorCallBack) {\n    this.$el.addEventListener('click', (event) => {\n      const {pageX, pageY} = event;\n      console.log(pageX, pageY);\n      const {data: pixel} = this.getHitContext().getImageData(\n          pageX - this.$el.offsetLeft,\n          pageY - this.$el.offsetTop,\n          1, 1,\n      );\n      cb(getRGBString(pixel[0], pixel[1], pixel[2]));\n    });\n  }\n}\n\nexport default CanvasComponent;\n\n\n","export enum VisualizationType {\n  SIMPLE,\n  PRETTY,\n  EXPANDABLE,\n  HIGHLIGHT\n}\n","import theme from '../config/theme';\n\n/**\n * Get the max number of leaf nodes from height of the binary tree\n *\n * @param {number} treeHeight - Height of the tree (number of nodes from)\n * @return {number} - Maximum number of leaf nodes\n */\nexport function getMaxLeafNodesFromHeight(treeHeight: number) {\n  return 2 ** (treeHeight-1);\n}\n\n/**\n * Maximum canvas width required from number of tree nodes\n *\n * @param {number} maxNodes - Maximum number of nodes\n * @return {number} - The max width required\n */\nexport function getCanvasWidthFromMaxNodeSpacing(maxNodes: number) {\n  return (maxNodes + 2) * theme.leafNodeSpace;\n}\n\n/**\n * Get the x position from given horizontal node position\n *\n * @param {number} nodes - The number of nodes from the left\n * @return {number} - The x position\n */\nexport function getXPositionFromGivenHorizontalNodePosition(nodes: number) {\n  return (nodes) * theme.leafNodeSpace;\n}\n\n/**\n * Get canvas height from the tree height\n *\n * @param {number} treeHeight - Height of the tree (number of nodes from)\n * @return {number} - The canvas height in px\n */\nexport function getCanvasHeightFromTreeHeight(treeHeight: number) {\n  return (treeHeight) * theme.lineHeight;\n}\n\n/**\n * Get required and actual height and width\n *\n * @param {number} maxNodeSpacing\n * @param {number} heightOfTree\n * @param {number} maxWidth\n * @param {number} maxHeight\n * @return {{\n *  maxCanvasHeightRequired: number,\n *  maxCanvasWidthRequired:number,\n *  actualMaxHeight: number,\n *  actualMaxWidth: number\n * }}\n */\nexport function getRequiredAndActualHeightAndWidth(\n    maxNodeSpacing: number,\n    heightOfTree: number,\n    maxWidth: number,\n    maxHeight: number,\n) {\n  const maxCanvasWidthRequired = getCanvasWidthFromMaxNodeSpacing(\n      maxNodeSpacing,\n  );\n  const maxCanvasHeightRequired = getCanvasHeightFromTreeHeight(heightOfTree+1);\n  const actualMaxWidth = maxCanvasWidthRequired > maxWidth ?\n    maxCanvasWidthRequired : maxWidth;\n  const actualMaxHeight = maxCanvasHeightRequired > maxHeight ?\n    maxCanvasHeightRequired : maxHeight;\n\n  return {\n    maxCanvasHeightRequired,\n    maxCanvasWidthRequired,\n    actualMaxHeight,\n    actualMaxWidth,\n  };\n}\n","import {Point} from '../types/Point';\n\n/**\n * Describes a bezier curve\n */\nclass BezierCurve {\n  /**\n   * X Configurations\n   */\n  xStart: number\n  cp1x: number\n  cp2x: number\n  xEnd: number\n\n  /**\n   * Y Configurations\n   */\n  yStart: number\n  cp1y: number\n  cp2y: number\n  yEnd: number\n\n  /**\n   * Color of the curve\n   */\n  color: string\n\n  /**\n   * Construct a new bezier curve\n   *\n   * @param {string} color\n   * @param {Point} start\n   * @param {Point} cp1\n   * @param {Point} cp2\n   * @param {Point} end\n   */\n  constructor(\n      color: string,\n      start: Point,\n      cp1: Point,\n      cp2: Point,\n      end: Point,\n  ) {\n    const {x: xStart, y: yStart} = start;\n    const {x: cp1x, y: cp1y} = cp1;\n    const {x: cp2x, y: cp2y} = cp2;\n    const {x: xEnd, y: yEnd} = end;\n\n    this.color = color;\n    this.xStart = xStart;\n    this.yStart = yStart;\n    this.cp1x = cp1x;\n    this.cp1y = cp1y;\n    this.cp2x = cp2x;\n    this.cp2y = cp2y;\n    this.xEnd = xEnd;\n    this.yEnd = yEnd;\n  }\n\n  /**\n   * Draw the bezier curve\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  draw(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    ctx.moveTo(this.xStart, this.yStart);\n    ctx.strokeStyle = this.color;\n    ctx.bezierCurveTo(\n        this.cp1x,\n        this.cp1y,\n        this.cp2x,\n        this.cp2y,\n        this.xEnd,\n        this.yEnd,\n    );\n    ctx.stroke();\n  }\n}\n\n\nexport default BezierCurve;\n","import CanvasComponent from '../canvas/Canvas';\nimport theme from '../config/theme';\nimport BezierCurve from '../strokes/BezierCurve';\nimport {\n  HorizontalStartAndEndInput,\n  VerticalStartAndEndInput,\n} from '../canvas/types';\n\n/**\n * Connect two points with a bezier curve\n *\n * @param {CanvasComponent} canvasComponent\n * @param {HorizontalStartAndEndInput} horizontalConfig\n * @param {VerticalStartAndEndInput} verticalConfig\n */\nfunction connectPointsWithBezierCurve(\n    canvasComponent: CanvasComponent,\n    horizontalConfig: HorizontalStartAndEndInput,\n    verticalConfig: VerticalStartAndEndInput,\n) {\n// X, Y Calculation\n  const {xStart, xEnd} = horizontalConfig;\n  const {yStart, yEnd} = verticalConfig;\n  const halfY = (yStart + yEnd) / 2;\n  const halfX = (xStart + xEnd) / 2;\n\n  // Draw the bezier curve\n  const berzierCurve = new BezierCurve(\n      theme.strokeColor,\n      {x: xStart, y: yStart},\n      {x: halfX, y: halfY},\n      {x: xEnd, y: halfY},\n      {x: xEnd, y: yEnd},\n  );\n  berzierCurve.draw(canvasComponent.getContext());\n}\n\nexport default connectPointsWithBezierCurve;\n","import {CanvasComponent} from '.';\nimport theme from '../config/theme';\nimport BinaryTreeNode from '../tree/BinaryTreeNode';\nimport {Point} from '../types/Point';\nimport {\n  getCanvasHeightFromTreeHeight,\n  getRequiredAndActualHeightAndWidth,\n  getXPositionFromGivenHorizontalNodePosition,\n} from '../utils/tree';\nimport connectPointsWithBezierCurve\n  from '../utils/connectPointsWithBezierCurve';\nimport {\n  IndividualInputOptions,\n  LeftAndRightSpacing,\n} from './types';\n\n/**\n * The current animation frame that is going on\n */\nlet animationFrameId: number;\n\n/**\n * Current color that is being hovered on\n */\nlet hoveredColorId: string;\n\n/**\n * Spacing map for storing space requirements\n */\nlet spacingMap: Map<BinaryTreeNode<string | number>, LeftAndRightSpacing>;\n\n/**\n * Clear the existing animation frame if any and request an animation frame\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} canvasComponent\n * @param {Point} position\n * @param {boolean} highlightMode\n */\nfunction requestAnimationFrame(\n    root: BinaryTreeNode<string | number>,\n    canvasComponent: CanvasComponent,\n    position: Point,\n    highlightMode: boolean,\n) {\n  // Clear existing animation frame\n  if (animationFrameId) {\n    cancelAnimationFrame(animationFrameId);\n  }\n\n  // Request a new one\n  animationFrameId = window.requestAnimationFrame(() => {\n    canvasComponent.clearCanvas();\n    const requiredRedraw = recursivelyDrawNodes(\n        root, canvasComponent, position, highlightMode);\n    if (requiredRedraw) {\n      requestAnimationFrame(root, canvasComponent, position, highlightMode);\n    }\n  });\n}\n\n/**\n * Draw single node\n *\n * @param {BinaryTreeNode} node\n * @param {CanvasComponent} comp\n * @param {Point} position\n * @param {boolean} highlightMode\n * @return {boolean} Weather redraw is required\n */\nfunction drawSingleNode(\n    node: BinaryTreeNode<string | number>,\n    comp: CanvasComponent,\n    position: Point,\n    highlightMode: boolean,\n) {\n  const {x, y} = position;\n  node.nodeCircle.setCoordinates(x, y);\n\n  // Grow or shrink while hover\n  const colorId = node.nodeCircle.draw(comp);\n  if (colorId === hoveredColorId && highlightMode) {\n    return node.nodeCircle.grow();\n  } else {\n    return node.nodeCircle.restoreCircle();\n  }\n}\n\n/**\n * Recursively draw all the nodes for a pretty tree\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} canvasComponent\n * @param {Point} position\n * @param {boolean} highlightMode\n * @return {boolean}\n */\nfunction recursivelyDrawNodes(\n    root: BinaryTreeNode<string | number>,\n    canvasComponent: CanvasComponent,\n    position: Point,\n    highlightMode: boolean,\n): boolean {\n  const {x: xPosition, y: yPosition} = position;\n\n  // Draw the node\n  let requiredRedraw = drawSingleNode(\n      root,\n      canvasComponent,\n      {x: xPosition, y: yPosition},\n      highlightMode,\n  );\n  root.nodeCircle.setCoordinates(xPosition, yPosition);\n  root.nodeCircle.draw(canvasComponent);\n\n  // Root spacings\n  const {left, right} = spacingMap.get(root)!;\n\n  // Draw the left child\n  if (root.left) {\n    const leftOfLeft = spacingMap.get(root.left)!.left;\n    const childYPosition = yPosition + theme.lineHeight;\n    const leftPosition = {\n      x: xPosition - getXPositionFromGivenHorizontalNodePosition(\n          left - leftOfLeft,\n      ),\n      y: childYPosition,\n    };\n\n    requiredRedraw = recursivelyDrawNodes(\n        root.left,\n        canvasComponent,\n        leftPosition,\n        highlightMode,\n    ) || requiredRedraw;\n    connectPointsWithBezierCurve(canvasComponent, {\n      xStart: xPosition,\n      xEnd: leftPosition.x,\n    }, {\n      yStart: yPosition + root.nodeCircle.getRadius(),\n      yEnd: childYPosition - root.left.nodeCircle.getRadius(),\n    });\n  }\n\n  // Draw the right child\n  if (root.right) {\n    const rightOfRight = spacingMap.get(root.right)!.right;\n    const childYPosition = yPosition + theme.lineHeight;\n    const rightPosition = {\n      x: xPosition + getXPositionFromGivenHorizontalNodePosition(\n          right - rightOfRight,\n      ),\n      y: childYPosition,\n    };\n\n    requiredRedraw = recursivelyDrawNodes(\n        root.right,\n        canvasComponent,\n        rightPosition,\n        highlightMode,\n    ) || requiredRedraw;\n    connectPointsWithBezierCurve(canvasComponent, {\n      xStart: xPosition,\n      xEnd: rightPosition.x,\n    }, {\n      yStart: yPosition + root.nodeCircle.getRadius(),\n      yEnd: childYPosition - root.right.nodeCircle.getRadius(),\n    });\n  }\n\n  return requiredRedraw;\n}\n\n/**\n * Calculates the spacing required recursively\n *\n * @param {BinaryTreeNode<string | number>} root\n * @return {number} - The spacing requirement of that node\n */\nfunction calculateSpacingMapRecursively(\n    root: BinaryTreeNode<string | number>,\n): number {\n  const left = root.left ? calculateSpacingMapRecursively(\n      root.left,\n  ) + 0.5: 0;\n  const right = root.right ? calculateSpacingMapRecursively(\n      root.right,\n  ) + 0.5: 0;\n  spacingMap.set(root, {\n    left,\n    right,\n  });\n\n  return left + right;\n}\n\n/**\n * Draw a pretty binary tree\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {HTMLCanvasElement} canvasElement\n * @param {IndividualInputOptions} options\n */\nfunction drawPrettyBinaryTree(\n    root: BinaryTreeNode<string | number>,\n    canvasElement: HTMLCanvasElement,\n    options: IndividualInputOptions,\n) {\n  spacingMap = new Map();\n  const maxNodeSpacing = calculateSpacingMapRecursively(root);\n  const heightOfTree = root.getHeight();\n  const {maxHeight, maxWidth, highlightMode} = options;\n\n  // Calculate canvas spacing requirements\n  const {\n    maxCanvasWidthRequired,\n    actualMaxHeight,\n    actualMaxWidth,\n  } = getRequiredAndActualHeightAndWidth(\n      maxNodeSpacing,\n      heightOfTree,\n      maxWidth,\n      maxHeight,\n  );\n\n  // Init calculation\n  const left = spacingMap.get(root)!.left;\n  const midPointInCanvas = actualMaxWidth / 2;\n  const xStart = (midPointInCanvas - maxCanvasWidthRequired / 2);\n\n  // Initialize the canvas\n  const canvasComponent = new CanvasComponent(canvasElement);\n  canvasComponent.setMaxWidthAndHeight(actualMaxHeight, actualMaxWidth);\n\n  /**\n   * Hover event handler\n   */\n  canvasComponent.onHover((color) => {\n    hoveredColorId = color;\n    requestAnimationFrame(root, canvasComponent, {\n      x: xStart + getXPositionFromGivenHorizontalNodePosition(left+1),\n      y: getCanvasHeightFromTreeHeight(0.5),\n    }, Boolean(highlightMode));\n  });\n\n  // Recursively draw all nodes\n  requestAnimationFrame(root, canvasComponent, {\n    x: xStart + getXPositionFromGivenHorizontalNodePosition(left+1),\n    y: getCanvasHeightFromTreeHeight(0.5),\n  }, Boolean(highlightMode));\n}\n\nexport default drawPrettyBinaryTree;\n","import {CanvasComponent} from '.';\nimport theme from '../config/theme';\nimport BinaryTreeNode from '../tree/BinaryTreeNode';\nimport {Point} from '../types/Point';\nimport {\n  getCanvasHeightFromTreeHeight,\n  getCanvasWidthFromMaxNodeSpacing,\n  getXPositionFromGivenHorizontalNodePosition,\n} from '../utils/tree';\nimport {IndividualInputOptions, PathArray} from './types';\nimport connectPointsWithBezierCurve\n  from '../utils/connectPointsWithBezierCurve';\n\n/**\n * The current animation frame that is going on\n */\nlet animationFrameId: number;\n\n/**\n * Array of all children that needs printing\n */\nlet globalPathArray: PathArray;\n\n/**\n * Current color that is being hovered on\n */\nlet hoveredColorId: string;\n\n/**\n * Map storing the colorId to the path array\n */\nlet colorIdToPathMap: Map<string, PathArray> = new Map();\n\n/**\n * Clear the existing animation frame if any and request an animation frame\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} comp\n * @param {IndividualInputOptions} options\n */\nfunction requestAnimationFrame(\n    root: BinaryTreeNode<string | number>,\n    comp: CanvasComponent,\n    options: IndividualInputOptions,\n) {\n  // Clear existing animation frame\n  if (animationFrameId) {\n    cancelAnimationFrame(animationFrameId);\n  }\n\n  // Request a new one\n  animationFrameId = window.requestAnimationFrame(\n      () => animationFrameCB(root, comp, options),\n  );\n}\n\n\n/**\n * Get the node height from print array\n *\n * @return {number}\n */\nfunction getNodeHeightFromGlobalPathArray() {\n  return globalPathArray.length + 1;\n}\n\n\n/**\n * Get the node width from the print array\n *\n * @return {{\n *  left: number,\n *  right: number\n * }}\n */\nfunction getNodeWidthFromGlobalPathArray() {\n  let left = 0;\n  let right = 0;\n  let current = 0;\n\n  for (const childDirection of globalPathArray) {\n    if (childDirection === 'left') {\n      current -= 1;\n    } else {\n      current += 1;\n    }\n    if (current < 0) {\n      left = Math.max(Math.abs(current), left);\n    } else {\n      right = Math.max(current, right);\n    }\n  }\n\n  return {\n    left, right,\n  };\n}\n\n/**\n * Draw single node\n *\n * @param {BinaryTreeNode} node\n * @param {CanvasComponent} comp\n * @param {PathArray} pathArray\n * @param {Point} position\n * @return {boolean} Weather redraw is required\n */\nfunction drawSingleNode(\n    node: BinaryTreeNode<string | number>,\n    comp: CanvasComponent,\n    pathArray: PathArray,\n    position: Point,\n) {\n  const {x, y} = position;\n  const doesNodeHaveChildren = Boolean(node.left || node.right);\n  node.nodeCircle.setCoordinates(x, y);\n\n  // Grow or shrink while hover\n  const colorId = node.nodeCircle.draw(comp);\n  colorIdToPathMap.set(colorId, pathArray);\n  if (colorId === hoveredColorId && doesNodeHaveChildren) {\n    return node.nodeCircle.grow();\n  } else {\n    return node.nodeCircle.restoreCircle();\n  }\n}\n\n/**\n * Draw both the children if required\n *\n * @param {BinaryTreeNode} node\n * @param {CanvasComponent} comp\n * @param {number} xPosition\n * @param {number} nodeHeight\n * @param {PathArray} pathArray\n * @return {boolean}\n */\nfunction drawChildren(\n    node: BinaryTreeNode<string | number>,\n    comp: CanvasComponent,\n    xPosition: number,\n    nodeHeight: number,\n    pathArray: PathArray,\n) {\n  const currentHeight = getCanvasHeightFromTreeHeight(nodeHeight);\n  const childHeight = getCanvasHeightFromTreeHeight(nodeHeight + 1);\n  let requiredRedraw = false;\n\n  // Draw the left child\n  if (node.left) {\n    const currentPathArray : PathArray = node.left.left || node.left.right ?\n      [...pathArray, 'left'] : [...pathArray];\n    const xLeft = xPosition - (0.5 * theme.leafNodeSpace);\n\n    requiredRedraw = drawSingleNode(\n        node.left,\n        comp,\n        currentPathArray, {\n          x: xLeft,\n          y: childHeight,\n        },\n    ) || requiredRedraw;\n    connectPointsWithBezierCurve(comp, {\n      xStart: xPosition,\n      xEnd: xLeft,\n    }, {\n      yStart: currentHeight + node.nodeCircle.getRadius(),\n      yEnd: childHeight - node.left.nodeCircle.getRadius(),\n    });\n  }\n\n  // Draw the right child\n  if (node.right) {\n    const currentPathArray : PathArray = node.right.left || node.right.right ?\n      [...pathArray, 'right'] : [...pathArray];\n    const xRight = xPosition + (0.5 * theme.leafNodeSpace);\n\n    requiredRedraw = drawSingleNode(\n        node.right,\n        comp,\n        currentPathArray, {\n          x: xRight,\n          y: childHeight,\n        },\n    ) || requiredRedraw;\n    connectPointsWithBezierCurve(comp, {\n      xStart: xPosition,\n      xEnd: xRight,\n    }, {\n      yStart: currentHeight + node.nodeCircle.getRadius(),\n      yEnd: childHeight - node.right.nodeCircle.getRadius(),\n    });\n  }\n\n  return requiredRedraw;\n}\n\n\n/**\n * Draw all the nodes by following print array\n *\n * @param {BinaryTreeNode} root\n * @param {CanvasComponent} comp\n * @param {number} xRootPosition\n * @return {boolean} - Weather animated redraw is required\n */\nfunction drawAllNodes(\n    root:BinaryTreeNode<string | number>,\n    comp: CanvasComponent,\n    xRootPosition: number): boolean {\n  // Draw root\n  let currentNode = root;\n  let xPosition = xRootPosition;\n  let currentNodeHeight = 0.5;\n  const currentPathArray: Array<'left' | 'right'> = [];\n  let requiredRedraw = drawSingleNode(root, comp, [...currentPathArray], {\n    x: xPosition,\n    y: getCanvasHeightFromTreeHeight(currentNodeHeight),\n  });\n\n  // Draw all the children according to the path\n  for (const currentPath of globalPathArray) {\n    requiredRedraw = drawChildren(\n        currentNode,\n        comp,\n        xPosition,\n        currentNodeHeight,\n        currentPathArray,\n    ) || requiredRedraw;\n\n    if (currentPath === 'left') {\n      currentNode = currentNode.left!;\n      xPosition = xPosition - (0.5 * theme.leafNodeSpace);\n      currentPathArray.push('left');\n    } else {\n      currentNode = currentNode.right!;\n      xPosition = xPosition + (0.5 * theme.leafNodeSpace);\n      currentPathArray.push('right');\n    }\n    currentNodeHeight += 1;\n  }\n\n  // Draw the children of the last element in the path\n  requiredRedraw = drawChildren(\n      currentNode,\n      comp,\n      xPosition,\n      currentNodeHeight,\n      currentPathArray,\n  ) || requiredRedraw;\n\n  // Return if redraw is required\n  return requiredRedraw;\n}\n\n/**\n * Animation frame call back function that will recursively be called.\n * In case animation is required\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} comp\n * @param {IndividualInputOptions} options\n */\nfunction animationFrameCB(\n    root: BinaryTreeNode<string | number>,\n    comp: CanvasComponent,\n    options: IndividualInputOptions,\n) {\n  // Height and width calculations\n  const nodeHeight = getNodeHeightFromGlobalPathArray();\n  const {\n    left: leftNodeWidth,\n    right: rightNodeWidth,\n  } = getNodeWidthFromGlobalPathArray();\n  const requiredHeight = getCanvasHeightFromTreeHeight(nodeHeight + 1);\n  const requiredWidth = getCanvasWidthFromMaxNodeSpacing(\n      leftNodeWidth+rightNodeWidth,\n  );\n  const actualHeight = Math.max(requiredHeight, options.maxHeight);\n  const actualWidth = Math.max(requiredWidth, options.maxWidth);\n  const xStart = (actualWidth/2) - (requiredWidth/2);\n\n  // Set the height and width\n  // This also clears the canvas. So no need to clear it manually.\n  comp.setMaxWidthAndHeight(actualHeight, actualWidth);\n\n  // Initialize color id to path map\n  colorIdToPathMap = new Map();\n\n  // Draw and check if redraw is required\n  const requiredRedraw = drawAllNodes(\n      root,\n      comp,\n      xStart + getXPositionFromGivenHorizontalNodePosition(leftNodeWidth + 1),\n  );\n  if (requiredRedraw) {\n    requestAnimationFrame(root, comp, options);\n  }\n}\n\n/**\n * Draw an expandable binary tree\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {HTMLCanvasElement} canvasElement\n * @param {IndividualInputOptions} options\n */\nfunction drawExpandableBinaryTree(\n    root: BinaryTreeNode<string | number>,\n    canvasElement: HTMLCanvasElement,\n    options: IndividualInputOptions,\n) {\n  // Initialization\n  const comp = new CanvasComponent(canvasElement);\n  globalPathArray = [];\n\n  /**\n   * Click event handler\n   */\n  comp.onClick((color) => {\n    globalPathArray = colorIdToPathMap.get(color) || globalPathArray;\n    requestAnimationFrame(root, comp, options);\n  });\n\n  /**\n   * Hover event handler\n   */\n  comp.onHover((color) => {\n    hoveredColorId = color;\n    requestAnimationFrame(root, comp, options);\n  });\n\n  // Draw frame\n  requestAnimationFrame(root, comp, options);\n}\n\nexport default drawExpandableBinaryTree;\n","import CanvasComponent from './Canvas';\nimport BinaryTreeNode from '../tree/BinaryTreeNode';\nimport theme from '../config/theme';\nimport {\n  getCanvasHeightFromTreeHeight,\n  getMaxLeafNodesFromHeight,\n  getRequiredAndActualHeightAndWidth,\n} from '../utils/tree';\nimport {\n  HorizontalStartAndEndInput,\n  IndividualInputOptions,\n} from './types';\nimport connectPointsWithBezierCurve\n  from '../utils/connectPointsWithBezierCurve';\n\n/**\n * Recursively draw all the nodes\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} canvasComponent\n * @param {number} currentLine\n * @param {HorizontalStartAndEndInput} horizontalConfig\n */\nfunction recursivelyDrawNodes(\n    root: BinaryTreeNode<string | number>,\n    canvasComponent: CanvasComponent,\n    currentLine: number,\n    horizontalConfig: HorizontalStartAndEndInput,\n) {\n  // X Calculation\n  const {xStart, xEnd} = horizontalConfig;\n  const xPosition = (xStart + xEnd) / 2;\n\n  // Y Calculation\n  const yPosition = currentLine * theme.lineHeight;\n\n  // Draw the node\n  root.nodeCircle.setCoordinates(xPosition, yPosition);\n  root.nodeCircle.draw(canvasComponent);\n\n\n  // Draw the left child nodes\n  // Radius is added and subtracted from y to move the line outside the circle\n  if (root.left) {\n    recursivelyDrawNodes(root.left, canvasComponent, currentLine+1, {\n      xStart,\n      xEnd: xPosition,\n    });\n    connectPointsWithBezierCurve(canvasComponent, {\n      xStart: xPosition,\n      xEnd: (xStart + xPosition) / 2,\n    }, {\n      yStart: yPosition + theme.radius,\n      yEnd: getCanvasHeightFromTreeHeight(currentLine + 1) - theme.radius,\n    });\n  }\n\n  if (root.right) {\n    recursivelyDrawNodes(root.right, canvasComponent, currentLine+1, {\n      xStart: xPosition,\n      xEnd,\n    });\n    connectPointsWithBezierCurve(canvasComponent, {\n      xStart: xPosition,\n      xEnd: (xPosition + xEnd) / 2,\n    }, {\n      yStart: yPosition + theme.radius,\n      yEnd: getCanvasHeightFromTreeHeight(currentLine + 1) - theme.radius,\n    });\n  }\n}\n\n/**\n * Draw an explandable binary tree\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {HTMLCanvasElement} canvasElement\n * @param {IndividualInputOptions} options\n */\nfunction drawSimpleBinaryTree(\n    root: BinaryTreeNode<string | number>,\n    canvasElement: HTMLCanvasElement,\n    options: IndividualInputOptions,\n) {\n  const heightOfTree = root.getHeight();\n  const maxNumberOfLeafNodes = getMaxLeafNodesFromHeight(heightOfTree);\n  const {maxHeight, maxWidth} = options;\n\n  // Max height and width requirements\n  const {\n    maxCanvasWidthRequired,\n    actualMaxHeight,\n    actualMaxWidth,\n  } = getRequiredAndActualHeightAndWidth(\n      maxNumberOfLeafNodes,\n      heightOfTree,\n      maxWidth,\n      maxHeight,\n  );\n\n  // Init calculation\n  const midPointInCanvas = actualMaxWidth / 2;\n  const xStart = (midPointInCanvas - maxCanvasWidthRequired / 2) +\n  theme.leafNodeSpace;\n  const xEnd = (midPointInCanvas + maxCanvasWidthRequired / 2) -\n  theme.leafNodeSpace;\n\n  // Initialize the canvas\n  const canvasComponent = new CanvasComponent(canvasElement);\n  canvasComponent.setMaxWidthAndHeight(actualMaxHeight, actualMaxWidth);\n\n  // Recursively draw the tree\n  recursivelyDrawNodes(root, canvasComponent, 0.5, {xStart, xEnd});\n}\n\nexport default drawSimpleBinaryTree;\n","import BinaryTreeNode from '../tree/BinaryTreeNode';\nimport {VisualizationType} from '../enumns/VisualizationType';\nimport drawPrettyBinaryTree from './drawPrettyBinaryTree';\nimport drawExpandableBinaryTree from './drawExpandableBinaryTree';\nimport drawSimpleBinaryTree from './drawSimpleBinaryTree';\nimport {MainInputOptions} from './types';\n\n\n/**\n * Draw a binary tree in one of the given types\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {HTMLCanvasElement} canvasElement\n * @param {Partial<MainInputOptions>} options\n */\nfunction drawBinaryTree(\n    root: BinaryTreeNode<string | number>,\n    canvasElement: HTMLCanvasElement,\n    options: Partial<MainInputOptions> = {},\n) {\n  const {\n    type = VisualizationType.SIMPLE,\n    maxHeight = window.innerHeight,\n    maxWidth = window.innerWidth,\n  } = options;\n\n  switch (type) {\n    case VisualizationType.PRETTY:\n      drawPrettyBinaryTree(root, canvasElement, {\n        maxHeight,\n        maxWidth,\n      });\n      break;\n\n    case VisualizationType.EXPANDABLE:\n      drawExpandableBinaryTree(root, canvasElement, {\n        maxHeight,\n        maxWidth,\n      });\n      break;\n\n    case VisualizationType.HIGHLIGHT:\n      drawPrettyBinaryTree(root, canvasElement, {\n        maxHeight,\n        maxWidth,\n        highlightMode: true,\n      });\n      break;\n\n    default:\n      drawSimpleBinaryTree(root, canvasElement, {\n        maxHeight,\n        maxWidth,\n      });\n      break;\n  }\n}\n\nexport default drawBinaryTree;\n","import CanvasComponent from './Canvas';\nimport drawBinaryTree from './drawBinaryTree';\n\nexport {\n  CanvasComponent,\n  drawBinaryTree,\n};\n","export * from './VisualizationType';\n","export * from './theme';\n","export * from './tree';\nexport * from './canvas';\nexport * from './enumns';\nexport * from './config';\n","import { BinarySearchTreeNode, drawBinaryTree } from \"binary-tree-visualizer\";\r\n\r\nconst resultBtn = document.getElementById(\"btn\");\r\nconst nodesValues = document.getElementById(\"nodeData\");\r\nconst output = document.querySelector(\".result canvas\");\r\nconst result = document.querySelector(\".result\");\r\nconst error = document.querySelector(\".error\");\r\n\r\nresultBtn.addEventListener(\"click\", inputToList);\r\nfunction inputToList(e) {\r\n  e.preventDefault();\r\n  if (nodesValues.value == \"\") {\r\n    error.style.display = \"block\";\r\n    return;\r\n  } else {\r\n    result.style.display = \"block\";\r\n    error.style.display = \"none\";\r\n    const data = nodesValues.value.split(\" \");\r\n    console.log(typeof data);\r\n    const list = [];\r\n    data.forEach((values) => {\r\n      list.push(parseInt(values));\r\n    });\r\n\r\n    buildATree(list);\r\n  }\r\n}\r\nfunction buildATree(list) {\r\n  const root = new BinarySearchTreeNode(list[0]);\r\n  for (let i = 1; i < list.length; i++) {\r\n    root.insert(list[i]);\r\n  }\r\n  drawBinaryTree(root, output);\r\n}\r\n"]}