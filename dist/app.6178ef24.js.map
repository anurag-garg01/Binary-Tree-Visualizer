{"version":3,"sources":["../../src/config/theme.ts","../../src/shapes/Circle.ts","../../src/utils/getRandomColor.ts","../../src/tree/BinaryTreeNode.ts","../../src/tree/BinarySearchTreeNode.ts","../../src/tree/index.ts","../../src/utils/getRGBString.ts","../../src/helpers/ColorGenerator.ts","../../src/canvas/Canvas.ts","../../src/enumns/VisualizationType.ts","../../src/utils/tree.ts","../../src/strokes/BezierCurve.ts","../../src/utils/connectPointsWithBezierCurve.ts","../../src/canvas/drawPrettyBinaryTree.ts","../../src/canvas/drawExpandableBinaryTree.ts","../../src/canvas/drawSimpleBinaryTree.ts","../../src/canvas/drawBinaryTree.ts","../../src/canvas/index.ts","../../src/enumns/index.ts","../../src/config/index.ts","../src/index.ts","app.mjs","node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["resultBtn","document","getElementById","nodesValues","output","querySelector","result","error","addEventListener","inputToList","e","preventDefault","value","style","display","data","split","console","log","list","forEach","values","push","parseInt","buildATree","root","BinarySearchTreeNode","i","length","insert","OVERLAY_ID","OldModule","module","bundle","Module","moduleName","call","hot","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","dispose","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","location","protocol","ws","onmessage","event","JSON","parse","type","handled","assets","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","id","every","generated","js","clear","hmrApply","v","hmrAcceptRun","reload","close","onclose","removeErrorOverlay","message","stack","overlay","createErrorOverlay","body","appendChild","remove","createElement","stackTrace","innerText","innerHTML","getParents","modules","parents","k","d","dep","Array","isArray","concat","Function","deps","cached","cache","some","cb"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAM,KAAK,GAAU;AACnB,EAAA,MAAM,EAAE,EADW;AAEnB,EAAA,oBAAoB,EAAE,IAFH;AAGnB,EAAA,aAAa,EAAE,EAHI;AAInB,EAAA,UAAU,EAAE,EAJO;AAKnB,EAAA,QAAQ,EAAE,SALS;AAMnB,EAAA,WAAW,EAAE,SANM;AAOnB,EAAA,UAAU,EAAE,CACV;AAAC,IAAA,OAAO,EAAE,SAAV;AAAqB,IAAA,WAAW,EAAE;AAAlC,GADU;AAPO,CAArB;AAYA;;;;;;AAKM,SAAU,QAAV,CAAmB,gBAAnB,EAAmD;AACvD,QAAM;AACJ,IAAA,MAAM,GAAG,KAAK,CAAC,MADX;AAEJ,IAAA,oBAAoB,GAAG,KAAK,CAAC,oBAFzB;AAGJ,IAAA,aAAa,GAAG,KAAK,CAAC,aAHlB;AAIJ,IAAA,UAAU,GAAG,KAAK,CAAC,UAJf;AAKJ,IAAA,UAAU,GAAG,KAAK,CAAC,UALf;AAMJ,IAAA,QAAQ,GAAG,KAAK,CAAC,QANb;AAOJ,IAAA,WAAW,GAAG,KAAK,CAAC;AAPhB,MAQF,gBARJ;AAUA,EAAA,KAAK,CAAC,MAAN,GAAe,MAAf;AACA,EAAA,KAAK,CAAC,oBAAN,GAA6B,oBAA7B;AACA,EAAA,KAAK,CAAC,aAAN,GAAsB,aAAtB;AACA,EAAA,KAAK,CAAC,UAAN,GAAmB,UAAnB;AACA,EAAA,KAAK,CAAC,UAAN,GAAmB,UAAnB;AACA,EAAA,KAAK,CAAC,QAAN,GAAiB,QAAjB;AACA,EAAA,KAAK,CAAC,WAAN,GAAoB,WAApB;AACD;;eAEc;;;;;;;;;;ACtCf;;;;AAIA;;;AAGA,MAAM,UAAU,GAAG,GAAnB;AAEA;;;;AAGA,MAAM,MAAN,CAAY;AA+BV;;;;;;;AAOA,EAAA,WAAA,CACI,KADJ,EAEI,MAFJ,EAGI,aAHJ,EAGsC;AAnCtC;;;AAGQ,SAAA,OAAA,GAAkB,EAAlB;AAYR;;;;AAGQ,SAAA,CAAA,GAAY,CAAC,CAAb;AAER;;;;AAGQ,SAAA,CAAA,GAAY,CAAC,CAAb;AAcN,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,aAAL,GAAqB,aAArB;AACA,SAAK,cAAL,GAAsB;AACpB,MAAA,aAAa,EAAE,MADK;AAEpB,MAAA,cAAc,EAAE,MAFI;AAGpB,MAAA,SAAS,EAAE,MAAM,GAAG,eAAM,oBAHN;AAIpB,MAAA,SAAS,EAAE,MAAM,GAAG,eAAM;AAJN,KAAtB;AAMD;AAED;;;;;;;;;AAOQ,EAAA,UAAU,CACd,GADc,EAEd,MAFc,EAGd,KAHc,EAGD;AAEf,UAAM;AAAC,MAAA,CAAD;AAAI,MAAA;AAAJ,QAAS,IAAf;AAEA,IAAA,GAAG,CAAC,SAAJ;AACA,IAAA,GAAG,CAAC,SAAJ,GAAgB,KAAhB;AACA,IAAA,GAAG,CAAC,GAAJ,CAAQ,CAAR,EAAW,CAAX,EAAc,MAAd,EAAsB,CAAtB,EAAyB,IAAI,CAAC,EAAL,GAAU,CAAnC,EAAsC,KAAtC;AACA,IAAA,GAAG,CAAC,IAAJ;AACD;AAED;;;;;;;AAKQ,EAAA,UAAU,CAAC,GAAD,EAA8B;AAC9C,UAAM;AAAC,MAAA,CAAD;AAAI,MAAA,CAAJ;AAAO,MAAA,aAAP;AAAsB,MAAA,cAAc,EAAE;AAAC,QAAA,aAAa,EAAE;AAAhB;AAAtC,QAAiE,IAAvE;AACA,UAAM;AAAC,MAAA;AAAD,QAAgB,aAAtB;AAEA,IAAA,GAAG,CAAC,GAAJ,CAAQ,CAAR,EAAW,CAAX,EAAc,MAAd,EAAsB,CAAtB,EAAyB,IAAI,CAAC,EAAL,GAAU,CAAnC,EAAsC,KAAtC;AACA,IAAA,GAAG,CAAC,WAAJ,GAAkB,WAAlB;AACA,IAAA,GAAG,CAAC,MAAJ;AACD;AAED;;;;;;;AAKQ,EAAA,SAAS,CAAC,GAAD,EAA8B;AAC7C,UAAM;AAAC,MAAA,CAAD;AAAI,MAAA,CAAJ;AAAO,MAAA,KAAP;AAAc,MAAA;AAAd,QAA+B,IAArC;AACA,UAAM;AAAC,MAAA;AAAD,QAAgB,aAAtB,CAF6C,CAI7C;AACA;;AACA,QAAI,QAAQ,GAAG,MAAf;AACA,QAAI,QAAQ,GAAG,CAAf;;AACA,QAAI,KAAK,CAAC,MAAN,GAAe,CAAnB,EAAsB;AACpB,MAAA,QAAQ,GAAG,KAAX;AACA,MAAA,QAAQ,GAAG,CAAX;AACD;;AAED,IAAA,GAAG,CAAC,SAAJ,GAAgB,WAAhB;AACA,IAAA,GAAG,CAAC,IAAJ,GAAW,GAAG,QAAQ,IAAI,eAAM,QAAQ,EAAxC;AACA,IAAA,GAAG,CAAC,SAAJ,GAAgB,QAAhB;AACA,IAAA,GAAG,CAAC,QAAJ,CAAa,KAAb,EAAoB,CAApB,EAAuB,CAAC,GAAG,QAA3B;AACD;AAED;;;;;;;AAKA,EAAA,SAAS,GAAA;AACP,UAAM;AACJ,MAAA,cAAc,EAAE;AAAC,QAAA,aAAa,EAAE;AAAhB;AADZ,QAEF,IAFJ;AAGA,WAAO,MAAP;AACD;AAED;;;;;;;AAKA,EAAA,IAAI,CAAC,SAAS,GAAG,KAAK,cAAL,CAAoB,SAAjC,EAA0C;AAC5C,UAAM;AACJ,MAAA,cAAc,EAAE;AACd,QAAA;AADc;AADZ,QAIF,IAJJ;;AAMA,QAAI,aAAa,GAAG,SAApB,EAA+B;AAC7B,YAAM,uBAAuB,GAAG,aAAa,GAAG,UAAhD;AACA,WAAK,cAAL,CAAoB,aAApB,GAAoC,uBAAuB,GAAG,SAA1B,GACpC,SADoC,GACxB,uBADZ;AAEA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;AAED;;;;;;;AAKA,EAAA,MAAM,CAAC,SAAS,GAAG,KAAK,cAAL,CAAoB,SAAjC,EAA0C;AAC9C,UAAM;AACJ,MAAA,cAAc,EAAE;AACd,QAAA;AADc;AADZ,QAIF,IAJJ;;AAMA,QAAI,aAAa,GAAG,SAApB,EAA+B;AAC7B,YAAM,uBAAuB,GAAG,aAAa,GAAG,UAAhD;AACA,WAAK,cAAL,CAAoB,aAApB,GAAoC,uBAAuB,GAAG,SAA1B,GACpC,SADoC,GACxB,uBADZ;AAEA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;AAED;;;;;;AAIA,EAAA,aAAa,GAAA;AACX,UAAM;AACJ,MAAA,cAAc,EAAE;AACd,QAAA,aADc;AAEd,QAAA;AAFc;AADZ,QAKF,IALJ;;AAOA,QAAI,aAAa,GAAG,cAApB,EAAoC;AAClC,aAAO,KAAK,MAAL,CAAY,cAAZ,CAAP;AACD;;AAED,QAAI,aAAa,GAAG,cAApB,EAAoC;AAClC,aAAO,KAAK,IAAL,CAAU,cAAV,CAAP;AACD;;AAED,WAAO,KAAP;AACD;AAED;;;;;;;AAKA,EAAA,UAAU,CAAC,OAAD,EAAgB;AACxB,SAAK,OAAL,GAAe,OAAf;AACD;AAED;;;;;;;;AAMA,EAAA,cAAc,CAAC,CAAD,EAAY,CAAZ,EAAqB;AACjC,SAAK,CAAL,GAAS,CAAT;AACA,SAAK,CAAL,GAAS,CAAT;AACD;AAED;;;;;;;;;;AAQA,EAAA,IAAI,CAAC,IAAD,EAAsB;AACxB,UAAM;AACJ,MAAA,cAAc,EAAE;AAAC,QAAA,aAAa,EAAE;AAAhB,OADZ;AAEJ,MAAA,aAAa,EAAE;AAAC,QAAA;AAAD;AAFX,QAGF,IAHJ,CADwB,CAMxB;;AACA,SAAK,OAAL,GAAe,KAAK,OAAL,GAAe,KAAK,OAApB,GAA8B,IAAI,CAAC,YAAL,EAA7C;AACA,SAAK,UAAL,CACI,IAAI,CAAC,UAAL,EADJ,EAEI,MAFJ,EAGI,OAHJ;AAKA,SAAK,UAAL,CACI,IAAI,CAAC,aAAL,EADJ,EAEI,MAFJ,EAGI,KAAK,OAHT,EAbwB,CAmBxB;;AACA,SAAK,UAAL,CAAgB,IAAI,CAAC,UAAL,EAAhB,EApBwB,CAsBxB;;AACA,SAAK,SAAL,CAAe,IAAI,CAAC,UAAL,EAAf,EAvBwB,CAyBxB;;AACA,WAAO,KAAK,OAAZ;AACD;;AArPS;;eAwPG;;;;;;;;;;ACpQf;;;;AAEA;;;;;AAKA,SAAS,cAAT,GAAuB;AACrB,QAAM;AAAC,IAAA;AAAD,MAAe,cAArB;AACA,SAAO,UAAU,CAAC,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAgB,UAAU,CAAC,MAAtC,CAAD,CAAjB;AACD;;eAEc;;;;;;;;;;ACbf;;AACA;;AACA;;;;AAEA;;;AAGA,MAAM,cAAN,CAAoB;AAqBlB;;;;;AAKA,EAAA,WAAA,CAAY,KAAZ,EAAoB;AAClB,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,UAAL,GAAkB,IAAI,eAAJ,CACd,GAAG,KAAK,EADM,EAEd,eAAM,MAFQ,EAGd,8BAHc,CAAlB;AAKD;AAED;;;;;;;AAKA,EAAA,OAAO,CAAC,KAAD,EAAyB;AAC9B,SAAK,IAAL,GAAY,KAAZ;AACD;AAED;;;;;;;AAKA,EAAA,QAAQ,CAAC,KAAD,EAAyB;AAC/B,SAAK,KAAL,GAAa,KAAb;AACD;AAED;;;;;;;;AAMA,EAAA,SAAS,GAAA;;;AACP,UAAM,UAAU,GAAG,CAAA,CAAA,EAAA,GAAA,KAAK,IAAL,MAAS,IAAT,IAAS,EAAA,KAAA,KAAA,CAAT,GAAS,KAAA,CAAT,GAAS,EAAA,CAAE,SAAF,EAAT,KAA0B,CAA7C;AACA,UAAM,WAAW,GAAG,CAAA,CAAA,EAAA,GAAA,KAAK,KAAL,MAAU,IAAV,IAAU,EAAA,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAU,EAAA,CAAE,SAAF,EAAV,KAA2B,CAA/C;AACA,WAAO,IAAI,CAAC,GAAL,CAAS,UAAT,EAAqB,WAArB,IAAoC,CAA3C;AACD;;AA/DiB;;eAkEL;;;;;;;;;;ACzEf;;;;AAEA;;;AAGA,MAAM,oBAAN,SACU,uBADV,CAC2B;AAWvB;;;;;AAKA,EAAA,OAAO,CAAC,KAAD,EAA+B;AACpC,UAAM,OAAN,CAAc,KAAd;AACD;AAED;;;;;;;AAKA,EAAA,QAAQ,CAAC,KAAD,EAA+B;AACrC,UAAM,QAAN,CAAe,KAAf;AACD;AAED;;;;;;;;AAMA,EAAA,MAAM,CAAC,KAAD,EAAS;AACb;AACA,QAAI,KAAK,KAAK,KAAK,KAAnB,EAA0B;AACxB;AACD,KAJY,CAMb;;;AACA,QAAI,KAAK,GAAG,KAAK,KAAjB,EAAwB;AACtB,UAAI,KAAK,IAAT,EAAe;AACb,aAAK,IAAL,CAAU,MAAV,CAAiB,KAAjB;AACA;AACD;;AACD,WAAK,OAAL,CAAa,IAAI,oBAAJ,CAAyB,KAAzB,CAAb;AACA;AACD,KAdY,CAgBb;;;AACA,QAAI,KAAK,KAAT,EAAgB;AACd,WAAK,KAAL,CAAW,MAAX,CAAkB,KAAlB;AACA;AACD;;AACD,SAAK,QAAL,CAAc,IAAI,oBAAJ,CAAyB,KAAzB,CAAd;AACD;AAED;;;;;;;;AAMA,EAAA,WAAW,GAAA;AACT,QAAI,KAAK,IAAT,EAAe;AACb,aAAO,KAAK,IAAL,CAAU,WAAV,EAAP;AACD;;AACD,WAAO,IAAP;AACD;AAED;;;;;;;;;;;AASA,EAAA,cAAc,CACV,MADU,EACsB;AAElC;AACA,UAAM,cAAc,GAAG,CAAA,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,IAAR,MAAiB,IAAjB,GAAwB,MAAxB,GAAiC,OAAxD,CAHkC,CAKlC;;AACA,QAAI,CAAC,KAAK,IAAN,IAAc,CAAC,KAAK,KAAxB,EAA+B;AAC7B,UAAI,MAAJ,EAAY;AACV,eAAO,MAAM,CAAC,cAAD,CAAb;AACD;;AACD,aAAO,CAAC,IAAD,CAAP;AACD,KAXiC,CAalC;;;AACA,QAAI,KAAK,IAAL,IAAa,CAAC,KAAK,KAAvB,EAA8B;AAC5B,UAAI,MAAJ,EAAY;AACV,QAAA,MAAM,CAAC,cAAD,CAAN,GAAyB,KAAK,IAA9B;AACD;;AACD,aAAO,CAAC,IAAD,EAAO,KAAK,IAAZ,CAAP;AACD,KALD,MAKO,IAAI,KAAK,KAAL,IAAc,CAAC,KAAK,IAAxB,EAA8B;AACnC,UAAI,MAAJ,EAAY;AACV,QAAA,MAAM,CAAC,cAAD,CAAN,GAAyB,KAAK,KAA9B;AACD;;AACD,aAAO,CAAC,IAAD,EAAO,KAAK,KAAZ,CAAP;AACD,KAxBiC,CA0BlC;AAEA;;;AACA,UAAM,CAAC,WAAD,IAAgB,KAAK,KAAL,CAAY,MAAZ,CACpB,KAAK,KAAL,CAAY,WAAZ,GAA0B,KADN,EACa,IADb,CAAtB,CA7BkC,CAiClC;AACA;;AACA,IAAA,WAAY,CAAC,IAAb,GAAoB,KAAK,IAAzB;AACA,IAAA,WAAY,CAAC,KAAb,GAAqB,KAAK,KAA1B;;AACA,QAAI,MAAJ,EAAY;AACV,MAAA,MAAM,CAAC,cAAD,CAAN,GAAyB,WAAzB;AACD;;AAED,WAAO,CAAC,IAAD,EAAO,WAAP,CAAP;AACD;AAED;;;;;;;;;;;;;AAWA,EAAA,MAAM,CACF,KADE,EAEF,MAFE,EAE8B;AAElC;AACA,QAAI,KAAK,GAAG,KAAK,KAAb,IAAsB,KAAK,IAA/B,EAAqC;AACnC,YAAM,CAAC,WAAD,IAAgB,KAAK,IAAL,CAAU,MAAV,CAAiB,KAAjB,EAAwB,IAAxB,CAAtB;AACA,aAAO,CAAC,WAAD,EAAc,IAAd,CAAP;AACD,KANiC,CAQlC;;;AACA,QAAI,KAAK,GAAG,KAAK,KAAb,IAAsB,KAAK,KAA/B,EAAsC;AACpC,YAAM,CAAC,WAAD,IAAgB,KAAK,KAAL,CAAW,MAAX,CAAkB,KAAlB,EAAyB,IAAzB,CAAtB;AACA,aAAO,CAAC,WAAD,EAAc,IAAd,CAAP;AACD,KAZiC,CAclC;;;AACA,QAAI,KAAK,KAAL,KAAe,KAAnB,EAA0B;AACxB,YAAM,GAAG,GAAG,KAAK,cAAL,CAAoB,MAApB,CAAZ;AACA,aAAO,KAAK,IAAZ;AACA,aAAO,KAAK,KAAZ;AACA,aAAO,GAAP;AACD;;AAED,WAAO,GAAG,IAAH,CAAP;AACD;;AAlKsB;;eAqKZ;;;;;;;;;;;;;;;;;;;;;AC3Kf;;AACA;;;;;;;;;;;ACDA;;;;;;;;AAQA,SAAS,YAAT,CAAsB,GAAtB,EAAmC,KAAnC,EAAkD,IAAlD,EAA8D;AAC5D,SAAO,OAAO,GAAG,KAAK,KAAK,KAAK,IAAI,GAApC;AACD;;eAEc;;;;;;;;;;ACZf;;;;AAEA;;;AAGA,MAAM,GAAG,GAAG,EAAZ;AAEA;;;;AAGA,MAAM,cAAN,CAAoB;AAApB,EAAA,WAAA,GAAA;AACE;;;AAGQ,SAAA,GAAA,GAAM,CAAN;AAER;;;;AAGQ,SAAA,KAAA,GAAQ,CAAR;AAER;;;;AAGQ,SAAA,IAAA,GAAO,CAAP;AAiCT;AA/BC;;;;;;;AAKA,EAAA,cAAc,CAAC,KAAD,EAAgC;AAC5C,SAAK,KAAL,IAAc,CAAC,KAAK,KAAL,IAAc,GAAf,IAAsB,GAApC;AACD;AAED;;;;;;;;AAMA,EAAA,YAAY,GAAA;AACV;AACA,UAAM,KAAK,GAAG,2BAAa,KAAK,GAAlB,EAAuB,KAAK,KAA5B,EAAmC,KAAK,IAAxC,CAAd,CAFU,CAIV;;AACA,SAAK,cAAL,CAAoB,MAApB;;AACA,QAAI,KAAK,IAAL,GAAY,GAAhB,EAAqB;AACnB,WAAK,cAAL,CAAoB,OAApB;;AACA,UAAI,KAAK,KAAL,GAAa,GAAjB,EAAsB;AACpB,aAAK,cAAL,CAAoB,KAApB;AACD;AACF,KAXS,CAaV;;;AACA,WAAO,KAAP;AACD;;AA9CiB;;eAiDL;;;;;;;;;;AC3Df;;AACA;;;;AAGA;;;AAGA,MAAM,eAAN,CAAqB;AA6BnB;;;;;AAKA,EAAA,WAAA,CAAY,GAAZ,EAAkC;AAVlC;;;AAGQ,SAAA,oBAAA,GAA+B,EAA/B;AAQN,UAAM,MAAM,GAAG,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAf;AAEA,SAAK,GAAL,GAAW,GAAX;AACA,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,cAAL,GAAsB,IAAI,uBAAJ,EAAtB;AACD;AAED;;;;;AAGA,EAAA,WAAW,GAAA;AACT,UAAM;AAAC,MAAA,MAAD;AAAS,MAAA;AAAT,QAAkB,KAAK,GAA7B;AACA,SAAK,UAAL,GAAkB,SAAlB,CAA4B,CAA5B,EAA+B,CAA/B,EAAkC,KAAlC,EAAyC,MAAzC;AACD;AAED;;;;;;;;AAMA,EAAA,oBAAoB,CAAC,MAAD,EAAiB,KAAjB,EAA8B;AAChD,SAAK,MAAL,CAAY,MAAZ,GAAqB,KAAK,GAAL,CAAS,MAAT,GAAkB,MAAvC;AACA,SAAK,MAAL,CAAY,KAAZ,GAAoB,KAAK,GAAL,CAAS,KAAT,GAAiB,KAArC;AACD;AAED;;;;;;;AAKA,EAAA,aAAa,GAAA;AACX,UAAM,GAAG,GAAG,KAAK,MAAL,CAAY,UAAZ,CAAuB,IAAvB,CAAZ;;AACA,QAAI,CAAC,GAAL,EAAU;AACR,YAAM,IAAI,KAAJ,CAAU,uBAAV,CAAN;AACD;;AAED,WAAO,GAAP;AACD;AAED;;;;;;;AAKA,EAAA,UAAU,GAAA;AACR,UAAM,GAAG,GAAG,KAAK,GAAL,CAAS,UAAT,CAAoB,IAApB,CAAZ;;AACA,QAAI,CAAC,GAAL,EAAU;AACR,YAAM,IAAI,KAAJ,CAAU,uBAAV,CAAN;AACD;;AAED,WAAO,GAAP;AACD;AAED;;;;;;;AAKA,EAAA,YAAY,GAAA;AACV,WAAO,KAAK,cAAL,CAAoB,YAApB,EAAP;AACD;AAED;;;;;;;AAKA,EAAA,OAAO,CAAC,EAAD,EAAqB;AAC1B,SAAK,GAAL,CAAS,gBAAT,CAA0B,WAA1B,EAAwC,KAAD,IAAU;AAC/C,YAAM;AAAC,QAAA,KAAD;AAAQ,QAAA;AAAR,UAAiB,KAAvB;AACA,YAAM;AAAC,QAAA,IAAI,EAAE;AAAP,UAAgB,KAAK,aAAL,GAAqB,YAArB,CAClB,KAAK,GAAG,KAAK,GAAL,CAAS,UADC,EAElB,KAAK,GAAG,KAAK,GAAL,CAAS,SAFC,EAGlB,CAHkB,EAGf,CAHe,CAAtB,CAF+C,CAQ/C;;AACA,YAAM,KAAK,GAAG,2BAAa,KAAK,CAAC,CAAD,CAAlB,EAAuB,KAAK,CAAC,CAAD,CAA5B,EAAiC,KAAK,CAAC,CAAD,CAAtC,CAAd;;AACA,UAAI,KAAK,oBAAL,KAA8B,KAAlC,EAAyC;AACvC,aAAK,oBAAL,GAA4B,KAA5B;AACA,QAAA,EAAE,CAAC,KAAD,CAAF;AACD;AACF,KAdD;AAeD;AAED;;;;;;;AAKA,EAAA,OAAO,CAAC,EAAD,EAAqB;AAC1B,SAAK,GAAL,CAAS,gBAAT,CAA0B,OAA1B,EAAoC,KAAD,IAAU;AAC3C,YAAM;AAAC,QAAA,KAAD;AAAQ,QAAA;AAAR,UAAiB,KAAvB;AACA,MAAA,OAAO,CAAC,GAAR,CAAY,KAAZ,EAAmB,KAAnB;AACA,YAAM;AAAC,QAAA,IAAI,EAAE;AAAP,UAAgB,KAAK,aAAL,GAAqB,YAArB,CAClB,KAAK,GAAG,KAAK,GAAL,CAAS,UADC,EAElB,KAAK,GAAG,KAAK,GAAL,CAAS,SAFC,EAGlB,CAHkB,EAGf,CAHe,CAAtB;AAKA,MAAA,EAAE,CAAC,2BAAa,KAAK,CAAC,CAAD,CAAlB,EAAuB,KAAK,CAAC,CAAD,CAA5B,EAAiC,KAAK,CAAC,CAAD,CAAtC,CAAD,CAAF;AACD,KATD;AAUD;;AAzIkB;;eA4IN;;;;;;;;;ACnJf,IAAY,iBAAZ;;;AAAA,CAAA,UAAY,iBAAZ,EAA6B;AAC3B,EAAA,iBAAA,CAAA,iBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACA,EAAA,iBAAA,CAAA,iBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACA,EAAA,iBAAA,CAAA,iBAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA;AACA,EAAA,iBAAA,CAAA,iBAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA;AACD,CALD,EAAY,iBAAiB,iCAAjB,iBAAiB,GAAA,EAAA,CAA7B;;;;;;;;;;;;;ACAA;;;;AAEA;;;;;;AAMM,SAAU,yBAAV,CAAoC,UAApC,EAAsD;AAC1D,SAAO,IAAA,CAAA,GAAA,CAAA,CAAA,EAAM,UAAU,GAAC,CAAjB,CAAP;AACD;AAED;;;;;;;;AAMM,SAAU,gCAAV,CAA2C,QAA3C,EAA2D;AAC/D,SAAO,CAAC,QAAQ,GAAG,CAAZ,IAAiB,eAAM,aAA9B;AACD;AAED;;;;;;;;AAMM,SAAU,2CAAV,CAAsD,KAAtD,EAAmE;AACvE,SAAQ,KAAD,GAAU,eAAM,aAAvB;AACD;AAED;;;;;;;;AAMM,SAAU,6BAAV,CAAwC,UAAxC,EAA0D;AAC9D,SAAQ,UAAD,GAAe,eAAM,UAA5B;AACD;AAED;;;;;;;;;;;;;;;;AAcM,SAAU,kCAAV,CACF,cADE,EAEF,YAFE,EAGF,QAHE,EAIF,SAJE,EAIe;AAEnB,QAAM,sBAAsB,GAAG,gCAAgC,CAC3D,cAD2D,CAA/D;AAGA,QAAM,uBAAuB,GAAG,6BAA6B,CAAC,YAAY,GAAC,CAAd,CAA7D;AACA,QAAM,cAAc,GAAG,sBAAsB,GAAG,QAAzB,GACrB,sBADqB,GACI,QAD3B;AAEA,QAAM,eAAe,GAAG,uBAAuB,GAAG,SAA1B,GACtB,uBADsB,GACI,SAD5B;AAGA,SAAO;AACL,IAAA,uBADK;AAEL,IAAA,sBAFK;AAGL,IAAA,eAHK;AAIL,IAAA;AAJK,GAAP;AAMD;;;;;;;;;AC3ED;;;AAGA,MAAM,WAAN,CAAiB;AAsBf;;;;;;;;;AASA,EAAA,WAAA,CACI,KADJ,EAEI,KAFJ,EAGI,GAHJ,EAII,GAJJ,EAKI,GALJ,EAKc;AAEZ,UAAM;AAAC,MAAA,CAAC,EAAE,MAAJ;AAAY,MAAA,CAAC,EAAE;AAAf,QAAyB,KAA/B;AACA,UAAM;AAAC,MAAA,CAAC,EAAE,IAAJ;AAAU,MAAA,CAAC,EAAE;AAAb,QAAqB,GAA3B;AACA,UAAM;AAAC,MAAA,CAAC,EAAE,IAAJ;AAAU,MAAA,CAAC,EAAE;AAAb,QAAqB,GAA3B;AACA,UAAM;AAAC,MAAA,CAAC,EAAE,IAAJ;AAAU,MAAA,CAAC,EAAE;AAAb,QAAqB,GAA3B;AAEA,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,IAAL,GAAY,IAAZ;AACD;AAED;;;;;;;AAKA,EAAA,IAAI,CAAC,GAAD,EAA8B;AAChC,IAAA,GAAG,CAAC,SAAJ;AACA,IAAA,GAAG,CAAC,MAAJ,CAAW,KAAK,MAAhB,EAAwB,KAAK,MAA7B;AACA,IAAA,GAAG,CAAC,WAAJ,GAAkB,KAAK,KAAvB;AACA,IAAA,GAAG,CAAC,aAAJ,CACI,KAAK,IADT,EAEI,KAAK,IAFT,EAGI,KAAK,IAHT,EAII,KAAK,IAJT,EAKI,KAAK,IALT,EAMI,KAAK,IANT;AAQA,IAAA,GAAG,CAAC,MAAJ;AACD;;AAxEc;;eA4EF;;;;;;;;;;AChFf;;AACA;;;;AAMA;;;;;;;AAOA,SAAS,4BAAT,CACI,eADJ,EAEI,gBAFJ,EAGI,cAHJ,EAG4C;AAE5C;AACE,QAAM;AAAC,IAAA,MAAD;AAAS,IAAA;AAAT,MAAiB,gBAAvB;AACA,QAAM;AAAC,IAAA,MAAD;AAAS,IAAA;AAAT,MAAiB,cAAvB;AACA,QAAM,KAAK,GAAG,CAAC,MAAM,GAAG,IAAV,IAAkB,CAAhC;AACA,QAAM,KAAK,GAAG,CAAC,MAAM,GAAG,IAAV,IAAkB,CAAhC,CAN0C,CAQ1C;;AACA,QAAM,YAAY,GAAG,IAAI,oBAAJ,CACjB,eAAM,WADW,EAEjB;AAAC,IAAA,CAAC,EAAE,MAAJ;AAAY,IAAA,CAAC,EAAE;AAAf,GAFiB,EAGjB;AAAC,IAAA,CAAC,EAAE,KAAJ;AAAW,IAAA,CAAC,EAAE;AAAd,GAHiB,EAIjB;AAAC,IAAA,CAAC,EAAE,IAAJ;AAAU,IAAA,CAAC,EAAE;AAAb,GAJiB,EAKjB;AAAC,IAAA,CAAC,EAAE,IAAJ;AAAU,IAAA,CAAC,EAAE;AAAb,GALiB,CAArB;AAOA,EAAA,YAAY,CAAC,IAAb,CAAkB,eAAe,CAAC,UAAhB,EAAlB;AACD;;eAEc;;;;;;;;;;ACrCf;;AACA;;AAGA;;AAKA;;;;AAOA;;;AAGA,IAAI,gBAAJ;AAEA;;;;AAGA,IAAI,cAAJ;AAEA;;;;AAGA,IAAI,UAAJ;AAEA;;;;;;;;;AAQA,SAAS,qBAAT,CACI,IADJ,EAEI,eAFJ,EAGI,QAHJ,EAII,aAJJ,EAI0B;AAExB;AACA,MAAI,gBAAJ,EAAsB;AACpB,IAAA,oBAAoB,CAAC,gBAAD,CAApB;AACD,GALuB,CAOxB;;;AACA,EAAA,gBAAgB,GAAG,MAAM,CAAC,qBAAP,CAA6B,MAAK;AACnD,IAAA,eAAe,CAAC,WAAhB;AACA,UAAM,cAAc,GAAG,oBAAoB,CACvC,IADuC,EACjC,eADiC,EAChB,QADgB,EACN,aADM,CAA3C;;AAEA,QAAI,cAAJ,EAAoB;AAClB,MAAA,qBAAqB,CAAC,IAAD,EAAO,eAAP,EAAwB,QAAxB,EAAkC,aAAlC,CAArB;AACD;AACF,GAPkB,CAAnB;AAQD;AAED;;;;;;;;;;;AASA,SAAS,cAAT,CACI,IADJ,EAEI,IAFJ,EAGI,QAHJ,EAII,aAJJ,EAI0B;AAExB,QAAM;AAAC,IAAA,CAAD;AAAI,IAAA;AAAJ,MAAS,QAAf;AACA,EAAA,IAAI,CAAC,UAAL,CAAgB,cAAhB,CAA+B,CAA/B,EAAkC,CAAlC,EAHwB,CAKxB;;AACA,QAAM,OAAO,GAAG,IAAI,CAAC,UAAL,CAAgB,IAAhB,CAAqB,IAArB,CAAhB;;AACA,MAAI,OAAO,KAAK,cAAZ,IAA8B,aAAlC,EAAiD;AAC/C,WAAO,IAAI,CAAC,UAAL,CAAgB,IAAhB,EAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAI,CAAC,UAAL,CAAgB,aAAhB,EAAP;AACD;AACF;AAED;;;;;;;;;;;AASA,SAAS,oBAAT,CACI,IADJ,EAEI,eAFJ,EAGI,QAHJ,EAII,aAJJ,EAI0B;AAExB,QAAM;AAAC,IAAA,CAAC,EAAE,SAAJ;AAAe,IAAA,CAAC,EAAE;AAAlB,MAA+B,QAArC,CAFwB,CAIxB;;AACA,MAAI,cAAc,GAAG,cAAc,CAC/B,IAD+B,EAE/B,eAF+B,EAG/B;AAAC,IAAA,CAAC,EAAE,SAAJ;AAAe,IAAA,CAAC,EAAE;AAAlB,GAH+B,EAI/B,aAJ+B,CAAnC;AAMA,EAAA,IAAI,CAAC,UAAL,CAAgB,cAAhB,CAA+B,SAA/B,EAA0C,SAA1C;AACA,EAAA,IAAI,CAAC,UAAL,CAAgB,IAAhB,CAAqB,eAArB,EAZwB,CAcxB;;AACA,QAAM;AAAC,IAAA,IAAD;AAAO,IAAA;AAAP,MAAgB,UAAU,CAAC,GAAX,CAAe,IAAf,CAAtB,CAfwB,CAiBxB;;AACA,MAAI,IAAI,CAAC,IAAT,EAAe;AACb,UAAM,UAAU,GAAG,UAAU,CAAC,GAAX,CAAe,IAAI,CAAC,IAApB,EAA2B,IAA9C;AACA,UAAM,cAAc,GAAG,SAAS,GAAG,eAAM,UAAzC;AACA,UAAM,YAAY,GAAG;AACnB,MAAA,CAAC,EAAE,SAAS,GAAG,uDACX,IAAI,GAAG,UADI,CADI;AAInB,MAAA,CAAC,EAAE;AAJgB,KAArB;AAOA,IAAA,cAAc,GAAG,oBAAoB,CACjC,IAAI,CAAC,IAD4B,EAEjC,eAFiC,EAGjC,YAHiC,EAIjC,aAJiC,CAApB,IAKZ,cALL;AAMA,+CAA6B,eAA7B,EAA8C;AAC5C,MAAA,MAAM,EAAE,SADoC;AAE5C,MAAA,IAAI,EAAE,YAAY,CAAC;AAFyB,KAA9C,EAGG;AACD,MAAA,MAAM,EAAE,SAAS,GAAG,IAAI,CAAC,UAAL,CAAgB,SAAhB,EADnB;AAED,MAAA,IAAI,EAAE,cAAc,GAAG,IAAI,CAAC,IAAL,CAAU,UAAV,CAAqB,SAArB;AAFtB,KAHH;AAOD,GAzCuB,CA2CxB;;;AACA,MAAI,IAAI,CAAC,KAAT,EAAgB;AACd,UAAM,YAAY,GAAG,UAAU,CAAC,GAAX,CAAe,IAAI,CAAC,KAApB,EAA4B,KAAjD;AACA,UAAM,cAAc,GAAG,SAAS,GAAG,eAAM,UAAzC;AACA,UAAM,aAAa,GAAG;AACpB,MAAA,CAAC,EAAE,SAAS,GAAG,uDACX,KAAK,GAAG,YADG,CADK;AAIpB,MAAA,CAAC,EAAE;AAJiB,KAAtB;AAOA,IAAA,cAAc,GAAG,oBAAoB,CACjC,IAAI,CAAC,KAD4B,EAEjC,eAFiC,EAGjC,aAHiC,EAIjC,aAJiC,CAApB,IAKZ,cALL;AAMA,+CAA6B,eAA7B,EAA8C;AAC5C,MAAA,MAAM,EAAE,SADoC;AAE5C,MAAA,IAAI,EAAE,aAAa,CAAC;AAFwB,KAA9C,EAGG;AACD,MAAA,MAAM,EAAE,SAAS,GAAG,IAAI,CAAC,UAAL,CAAgB,SAAhB,EADnB;AAED,MAAA,IAAI,EAAE,cAAc,GAAG,IAAI,CAAC,KAAL,CAAW,UAAX,CAAsB,SAAtB;AAFtB,KAHH;AAOD;;AAED,SAAO,cAAP;AACD;AAED;;;;;;;;AAMA,SAAS,8BAAT,CACI,IADJ,EACyC;AAEvC,QAAM,IAAI,GAAG,IAAI,CAAC,IAAL,GAAY,8BAA8B,CACnD,IAAI,CAAC,IAD8C,CAA9B,GAErB,GAFS,GAEJ,CAFT;AAGA,QAAM,KAAK,GAAG,IAAI,CAAC,KAAL,GAAa,8BAA8B,CACrD,IAAI,CAAC,KADgD,CAA9B,GAEvB,GAFU,GAEL,CAFT;AAGA,EAAA,UAAU,CAAC,GAAX,CAAe,IAAf,EAAqB;AACnB,IAAA,IADmB;AAEnB,IAAA;AAFmB,GAArB;AAKA,SAAO,IAAI,GAAG,KAAd;AACD;AAED;;;;;;;;;AAOA,SAAS,oBAAT,CACI,IADJ,EAEI,aAFJ,EAGI,OAHJ,EAGmC;AAEjC,EAAA,UAAU,GAAG,IAAI,GAAJ,EAAb;AACA,QAAM,cAAc,GAAG,8BAA8B,CAAC,IAAD,CAArD;AACA,QAAM,YAAY,GAAG,IAAI,CAAC,SAAL,EAArB;AACA,QAAM;AAAC,IAAA,SAAD;AAAY,IAAA,QAAZ;AAAsB,IAAA;AAAtB,MAAuC,OAA7C,CALiC,CAOjC;;AACA,QAAM;AACJ,IAAA,sBADI;AAEJ,IAAA,eAFI;AAGJ,IAAA;AAHI,MAIF,8CACA,cADA,EAEA,YAFA,EAGA,QAHA,EAIA,SAJA,CAJJ,CARiC,CAmBjC;;AACA,QAAM,IAAI,GAAG,UAAU,CAAC,GAAX,CAAe,IAAf,EAAsB,IAAnC;AACA,QAAM,gBAAgB,GAAG,cAAc,GAAG,CAA1C;AACA,QAAM,MAAM,GAAI,gBAAgB,GAAG,sBAAsB,GAAG,CAA5D,CAtBiC,CAwBjC;;AACA,QAAM,eAAe,GAAG,IAAI,iBAAJ,CAAoB,aAApB,CAAxB;AACA,EAAA,eAAe,CAAC,oBAAhB,CAAqC,eAArC,EAAsD,cAAtD;AAEA;;;;AAGA,EAAA,eAAe,CAAC,OAAhB,CAAyB,KAAD,IAAU;AAChC,IAAA,cAAc,GAAG,KAAjB;AACA,IAAA,qBAAqB,CAAC,IAAD,EAAO,eAAP,EAAwB;AAC3C,MAAA,CAAC,EAAE,MAAM,GAAG,uDAA4C,IAAI,GAAC,CAAjD,CAD+B;AAE3C,MAAA,CAAC,EAAE,yCAA8B,GAA9B;AAFwC,KAAxB,EAGlB,OAAO,CAAC,aAAD,CAHW,CAArB;AAID,GAND,EA/BiC,CAuCjC;;AACA,EAAA,qBAAqB,CAAC,IAAD,EAAO,eAAP,EAAwB;AAC3C,IAAA,CAAC,EAAE,MAAM,GAAG,uDAA4C,IAAI,GAAC,CAAjD,CAD+B;AAE3C,IAAA,CAAC,EAAE,yCAA8B,GAA9B;AAFwC,GAAxB,EAGlB,OAAO,CAAC,aAAD,CAHW,CAArB;AAID;;eAEc;;;;;;;;;;AC5Pf;;AACA;;AAGA;;AAMA;;;;AAGA;;;AAGA,IAAI,gBAAJ;AAEA;;;;AAGA,IAAI,eAAJ;AAEA;;;;AAGA,IAAI,cAAJ;AAEA;;;;AAGA,IAAI,gBAAgB,GAA2B,IAAI,GAAJ,EAA/C;AAEA;;;;;;;;AAOA,SAAS,qBAAT,CACI,IADJ,EAEI,IAFJ,EAGI,OAHJ,EAGmC;AAEjC;AACA,MAAI,gBAAJ,EAAsB;AACpB,IAAA,oBAAoB,CAAC,gBAAD,CAApB;AACD,GALgC,CAOjC;;;AACA,EAAA,gBAAgB,GAAG,MAAM,CAAC,qBAAP,CACf,MAAM,gBAAgB,CAAC,IAAD,EAAO,IAAP,EAAa,OAAb,CADP,CAAnB;AAGD;AAGD;;;;;;;AAKA,SAAS,gCAAT,GAAyC;AACvC,SAAO,eAAe,CAAC,MAAhB,GAAyB,CAAhC;AACD;AAGD;;;;;;;;;;AAQA,SAAS,+BAAT,GAAwC;AACtC,MAAI,IAAI,GAAG,CAAX;AACA,MAAI,KAAK,GAAG,CAAZ;AACA,MAAI,OAAO,GAAG,CAAd;;AAEA,OAAK,MAAM,cAAX,IAA6B,eAA7B,EAA8C;AAC5C,QAAI,cAAc,KAAK,MAAvB,EAA+B;AAC7B,MAAA,OAAO,IAAI,CAAX;AACD,KAFD,MAEO;AACL,MAAA,OAAO,IAAI,CAAX;AACD;;AACD,QAAI,OAAO,GAAG,CAAd,EAAiB;AACf,MAAA,IAAI,GAAG,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,GAAL,CAAS,OAAT,CAAT,EAA4B,IAA5B,CAAP;AACD,KAFD,MAEO;AACL,MAAA,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,OAAT,EAAkB,KAAlB,CAAR;AACD;AACF;;AAED,SAAO;AACL,IAAA,IADK;AACC,IAAA;AADD,GAAP;AAGD;AAED;;;;;;;;;;;AASA,SAAS,cAAT,CACI,IADJ,EAEI,IAFJ,EAGI,SAHJ,EAII,QAJJ,EAImB;AAEjB,QAAM;AAAC,IAAA,CAAD;AAAI,IAAA;AAAJ,MAAS,QAAf;AACA,QAAM,oBAAoB,GAAG,OAAO,CAAC,IAAI,CAAC,IAAL,IAAa,IAAI,CAAC,KAAnB,CAApC;AACA,EAAA,IAAI,CAAC,UAAL,CAAgB,cAAhB,CAA+B,CAA/B,EAAkC,CAAlC,EAJiB,CAMjB;;AACA,QAAM,OAAO,GAAG,IAAI,CAAC,UAAL,CAAgB,IAAhB,CAAqB,IAArB,CAAhB;AACA,EAAA,gBAAgB,CAAC,GAAjB,CAAqB,OAArB,EAA8B,SAA9B;;AACA,MAAI,OAAO,KAAK,cAAZ,IAA8B,oBAAlC,EAAwD;AACtD,WAAO,IAAI,CAAC,UAAL,CAAgB,IAAhB,EAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAI,CAAC,UAAL,CAAgB,aAAhB,EAAP;AACD;AACF;AAED;;;;;;;;;;;;AAUA,SAAS,YAAT,CACI,IADJ,EAEI,IAFJ,EAGI,SAHJ,EAII,UAJJ,EAKI,SALJ,EAKwB;AAEtB,QAAM,aAAa,GAAG,yCAA8B,UAA9B,CAAtB;AACA,QAAM,WAAW,GAAG,yCAA8B,UAAU,GAAG,CAA3C,CAApB;AACA,MAAI,cAAc,GAAG,KAArB,CAJsB,CAMtB;;AACA,MAAI,IAAI,CAAC,IAAT,EAAe;AACb,UAAM,gBAAgB,GAAe,IAAI,CAAC,IAAL,CAAU,IAAV,IAAkB,IAAI,CAAC,IAAL,CAAU,KAA5B,GACnC,CAAC,GAAG,SAAJ,EAAe,MAAf,CADmC,GACV,CAAC,GAAG,SAAJ,CAD3B;AAEA,UAAM,KAAK,GAAG,SAAS,GAAI,MAAM,eAAM,aAAvC;AAEA,IAAA,cAAc,GAAG,cAAc,CAC3B,IAAI,CAAC,IADsB,EAE3B,IAF2B,EAG3B,gBAH2B,EAGT;AAChB,MAAA,CAAC,EAAE,KADa;AAEhB,MAAA,CAAC,EAAE;AAFa,KAHS,CAAd,IAOZ,cAPL;AAQA,+CAA6B,IAA7B,EAAmC;AACjC,MAAA,MAAM,EAAE,SADyB;AAEjC,MAAA,IAAI,EAAE;AAF2B,KAAnC,EAGG;AACD,MAAA,MAAM,EAAE,aAAa,GAAG,IAAI,CAAC,UAAL,CAAgB,SAAhB,EADvB;AAED,MAAA,IAAI,EAAE,WAAW,GAAG,IAAI,CAAC,IAAL,CAAU,UAAV,CAAqB,SAArB;AAFnB,KAHH;AAOD,GA3BqB,CA6BtB;;;AACA,MAAI,IAAI,CAAC,KAAT,EAAgB;AACd,UAAM,gBAAgB,GAAe,IAAI,CAAC,KAAL,CAAW,IAAX,IAAmB,IAAI,CAAC,KAAL,CAAW,KAA9B,GACnC,CAAC,GAAG,SAAJ,EAAe,OAAf,CADmC,GACT,CAAC,GAAG,SAAJ,CAD5B;AAEA,UAAM,MAAM,GAAG,SAAS,GAAI,MAAM,eAAM,aAAxC;AAEA,IAAA,cAAc,GAAG,cAAc,CAC3B,IAAI,CAAC,KADsB,EAE3B,IAF2B,EAG3B,gBAH2B,EAGT;AAChB,MAAA,CAAC,EAAE,MADa;AAEhB,MAAA,CAAC,EAAE;AAFa,KAHS,CAAd,IAOZ,cAPL;AAQA,+CAA6B,IAA7B,EAAmC;AACjC,MAAA,MAAM,EAAE,SADyB;AAEjC,MAAA,IAAI,EAAE;AAF2B,KAAnC,EAGG;AACD,MAAA,MAAM,EAAE,aAAa,GAAG,IAAI,CAAC,UAAL,CAAgB,SAAhB,EADvB;AAED,MAAA,IAAI,EAAE,WAAW,GAAG,IAAI,CAAC,KAAL,CAAW,UAAX,CAAsB,SAAtB;AAFnB,KAHH;AAOD;;AAED,SAAO,cAAP;AACD;AAGD;;;;;;;;;;AAQA,SAAS,YAAT,CACI,IADJ,EAEI,IAFJ,EAGI,aAHJ,EAGyB;AACvB;AACA,MAAI,WAAW,GAAG,IAAlB;AACA,MAAI,SAAS,GAAG,aAAhB;AACA,MAAI,iBAAiB,GAAG,GAAxB;AACA,QAAM,gBAAgB,GAA4B,EAAlD;AACA,MAAI,cAAc,GAAG,cAAc,CAAC,IAAD,EAAO,IAAP,EAAa,CAAC,GAAG,gBAAJ,CAAb,EAAoC;AACrE,IAAA,CAAC,EAAE,SADkE;AAErE,IAAA,CAAC,EAAE,yCAA8B,iBAA9B;AAFkE,GAApC,CAAnC,CANuB,CAWvB;;AACA,OAAK,MAAM,WAAX,IAA0B,eAA1B,EAA2C;AACzC,IAAA,cAAc,GAAG,YAAY,CACzB,WADyB,EAEzB,IAFyB,EAGzB,SAHyB,EAIzB,iBAJyB,EAKzB,gBALyB,CAAZ,IAMZ,cANL;;AAQA,QAAI,WAAW,KAAK,MAApB,EAA4B;AAC1B,MAAA,WAAW,GAAG,WAAW,CAAC,IAA1B;AACA,MAAA,SAAS,GAAG,SAAS,GAAI,MAAM,eAAM,aAArC;AACA,MAAA,gBAAgB,CAAC,IAAjB,CAAsB,MAAtB;AACD,KAJD,MAIO;AACL,MAAA,WAAW,GAAG,WAAW,CAAC,KAA1B;AACA,MAAA,SAAS,GAAG,SAAS,GAAI,MAAM,eAAM,aAArC;AACA,MAAA,gBAAgB,CAAC,IAAjB,CAAsB,OAAtB;AACD;;AACD,IAAA,iBAAiB,IAAI,CAArB;AACD,GA/BsB,CAiCvB;;;AACA,EAAA,cAAc,GAAG,YAAY,CACzB,WADyB,EAEzB,IAFyB,EAGzB,SAHyB,EAIzB,iBAJyB,EAKzB,gBALyB,CAAZ,IAMZ,cANL,CAlCuB,CA0CvB;;AACA,SAAO,cAAP;AACD;AAED;;;;;;;;;;AAQA,SAAS,gBAAT,CACI,IADJ,EAEI,IAFJ,EAGI,OAHJ,EAGmC;AAEjC;AACA,QAAM,UAAU,GAAG,gCAAgC,EAAnD;AACA,QAAM;AACJ,IAAA,IAAI,EAAE,aADF;AAEJ,IAAA,KAAK,EAAE;AAFH,MAGF,+BAA+B,EAHnC;AAIA,QAAM,cAAc,GAAG,yCAA8B,UAAU,GAAG,CAA3C,CAAvB;AACA,QAAM,aAAa,GAAG,4CAClB,aAAa,GAAC,cADI,CAAtB;AAGA,QAAM,YAAY,GAAG,IAAI,CAAC,GAAL,CAAS,cAAT,EAAyB,OAAO,CAAC,SAAjC,CAArB;AACA,QAAM,WAAW,GAAG,IAAI,CAAC,GAAL,CAAS,aAAT,EAAwB,OAAO,CAAC,QAAhC,CAApB;AACA,QAAM,MAAM,GAAI,WAAW,GAAC,CAAb,GAAmB,aAAa,GAAC,CAAhD,CAdiC,CAgBjC;AACA;;AACA,EAAA,IAAI,CAAC,oBAAL,CAA0B,YAA1B,EAAwC,WAAxC,EAlBiC,CAoBjC;;AACA,EAAA,gBAAgB,GAAG,IAAI,GAAJ,EAAnB,CArBiC,CAuBjC;;AACA,QAAM,cAAc,GAAG,YAAY,CAC/B,IAD+B,EAE/B,IAF+B,EAG/B,MAAM,GAAG,uDAA4C,aAAa,GAAG,CAA5D,CAHsB,CAAnC;;AAKA,MAAI,cAAJ,EAAoB;AAClB,IAAA,qBAAqB,CAAC,IAAD,EAAO,IAAP,EAAa,OAAb,CAArB;AACD;AACF;AAED;;;;;;;;;AAOA,SAAS,wBAAT,CACI,IADJ,EAEI,aAFJ,EAGI,OAHJ,EAGmC;AAEjC;AACA,QAAM,IAAI,GAAG,IAAI,iBAAJ,CAAoB,aAApB,CAAb;AACA,EAAA,eAAe,GAAG,EAAlB;AAEA;;;;AAGA,EAAA,IAAI,CAAC,OAAL,CAAc,KAAD,IAAU;AACrB,IAAA,eAAe,GAAG,gBAAgB,CAAC,GAAjB,CAAqB,KAArB,KAA+B,eAAjD;AACA,IAAA,qBAAqB,CAAC,IAAD,EAAO,IAAP,EAAa,OAAb,CAArB;AACD,GAHD;AAKA;;;;AAGA,EAAA,IAAI,CAAC,OAAL,CAAc,KAAD,IAAU;AACrB,IAAA,cAAc,GAAG,KAAjB;AACA,IAAA,qBAAqB,CAAC,IAAD,EAAO,IAAP,EAAa,OAAb,CAArB;AACD,GAHD,EAjBiC,CAsBjC;;AACA,EAAA,qBAAqB,CAAC,IAAD,EAAO,IAAP,EAAa,OAAb,CAArB;AACD;;eAEc;;;;;;;;;;AChVf;;AAEA;;AACA;;AASA;;;;AAGA;;;;;;;;AAQA,SAAS,oBAAT,CACI,IADJ,EAEI,eAFJ,EAGI,WAHJ,EAII,gBAJJ,EAIgD;AAE9C;AACA,QAAM;AAAC,IAAA,MAAD;AAAS,IAAA;AAAT,MAAiB,gBAAvB;AACA,QAAM,SAAS,GAAG,CAAC,MAAM,GAAG,IAAV,IAAkB,CAApC,CAJ8C,CAM9C;;AACA,QAAM,SAAS,GAAG,WAAW,GAAG,eAAM,UAAtC,CAP8C,CAS9C;;AACA,EAAA,IAAI,CAAC,UAAL,CAAgB,cAAhB,CAA+B,SAA/B,EAA0C,SAA1C;AACA,EAAA,IAAI,CAAC,UAAL,CAAgB,IAAhB,CAAqB,eAArB,EAX8C,CAc9C;AACA;;AACA,MAAI,IAAI,CAAC,IAAT,EAAe;AACb,IAAA,oBAAoB,CAAC,IAAI,CAAC,IAAN,EAAY,eAAZ,EAA6B,WAAW,GAAC,CAAzC,EAA4C;AAC9D,MAAA,MAD8D;AAE9D,MAAA,IAAI,EAAE;AAFwD,KAA5C,CAApB;AAIA,+CAA6B,eAA7B,EAA8C;AAC5C,MAAA,MAAM,EAAE,SADoC;AAE5C,MAAA,IAAI,EAAE,CAAC,MAAM,GAAG,SAAV,IAAuB;AAFe,KAA9C,EAGG;AACD,MAAA,MAAM,EAAE,SAAS,GAAG,eAAM,MADzB;AAED,MAAA,IAAI,EAAE,yCAA8B,WAAW,GAAG,CAA5C,IAAiD,eAAM;AAF5D,KAHH;AAOD;;AAED,MAAI,IAAI,CAAC,KAAT,EAAgB;AACd,IAAA,oBAAoB,CAAC,IAAI,CAAC,KAAN,EAAa,eAAb,EAA8B,WAAW,GAAC,CAA1C,EAA6C;AAC/D,MAAA,MAAM,EAAE,SADuD;AAE/D,MAAA;AAF+D,KAA7C,CAApB;AAIA,+CAA6B,eAA7B,EAA8C;AAC5C,MAAA,MAAM,EAAE,SADoC;AAE5C,MAAA,IAAI,EAAE,CAAC,SAAS,GAAG,IAAb,IAAqB;AAFiB,KAA9C,EAGG;AACD,MAAA,MAAM,EAAE,SAAS,GAAG,eAAM,MADzB;AAED,MAAA,IAAI,EAAE,yCAA8B,WAAW,GAAG,CAA5C,IAAiD,eAAM;AAF5D,KAHH;AAOD;AACF;AAED;;;;;;;;;AAOA,SAAS,oBAAT,CACI,IADJ,EAEI,aAFJ,EAGI,OAHJ,EAGmC;AAEjC,QAAM,YAAY,GAAG,IAAI,CAAC,SAAL,EAArB;AACA,QAAM,oBAAoB,GAAG,qCAA0B,YAA1B,CAA7B;AACA,QAAM;AAAC,IAAA,SAAD;AAAY,IAAA;AAAZ,MAAwB,OAA9B,CAJiC,CAMjC;;AACA,QAAM;AACJ,IAAA,sBADI;AAEJ,IAAA,eAFI;AAGJ,IAAA;AAHI,MAIF,8CACA,oBADA,EAEA,YAFA,EAGA,QAHA,EAIA,SAJA,CAJJ,CAPiC,CAkBjC;;AACA,QAAM,gBAAgB,GAAG,cAAc,GAAG,CAA1C;AACA,QAAM,MAAM,GAAI,gBAAgB,GAAG,sBAAsB,GAAG,CAA7C,GACf,eAAM,aADN;AAEA,QAAM,IAAI,GAAI,gBAAgB,GAAG,sBAAsB,GAAG,CAA7C,GACb,eAAM,aADN,CAtBiC,CAyBjC;;AACA,QAAM,eAAe,GAAG,IAAI,eAAJ,CAAoB,aAApB,CAAxB;AACA,EAAA,eAAe,CAAC,oBAAhB,CAAqC,eAArC,EAAsD,cAAtD,EA3BiC,CA6BjC;;AACA,EAAA,oBAAoB,CAAC,IAAD,EAAO,eAAP,EAAwB,GAAxB,EAA6B;AAAC,IAAA,MAAD;AAAS,IAAA;AAAT,GAA7B,CAApB;AACD;;eAEc;;;;;;;;;;AClHf;;AACA;;AACA;;AACA;;;;AAIA;;;;;;;AAOA,SAAS,cAAT,CACI,IADJ,EAEI,aAFJ,EAGI,OAAA,GAAqC,EAHzC,EAG2C;AAEzC,QAAM;AACJ,IAAA,IAAI,GAAG,qCAAkB,MADrB;AAEJ,IAAA,SAAS,GAAG,MAAM,CAAC,WAFf;AAGJ,IAAA,QAAQ,GAAG,MAAM,CAAC;AAHd,MAIF,OAJJ;;AAMA,UAAQ,IAAR;AACE,SAAK,qCAAkB,MAAvB;AACE,yCAAqB,IAArB,EAA2B,aAA3B,EAA0C;AACxC,QAAA,SADwC;AAExC,QAAA;AAFwC,OAA1C;AAIA;;AAEF,SAAK,qCAAkB,UAAvB;AACE,6CAAyB,IAAzB,EAA+B,aAA/B,EAA8C;AAC5C,QAAA,SAD4C;AAE5C,QAAA;AAF4C,OAA9C;AAIA;;AAEF,SAAK,qCAAkB,SAAvB;AACE,yCAAqB,IAArB,EAA2B,aAA3B,EAA0C;AACxC,QAAA,SADwC;AAExC,QAAA,QAFwC;AAGxC,QAAA,aAAa,EAAE;AAHyB,OAA1C;AAKA;;AAEF;AACE,yCAAqB,IAArB,EAA2B,aAA3B,EAA0C;AACxC,QAAA,SADwC;AAExC,QAAA;AAFwC,OAA1C;AAIA;AA5BJ;AA8BD;;eAEc;;;;;;;;;;;;;;;;;;;;;AC1Df;;AACA;;;;;;;;;;ACDA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;ACAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;ACAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;ACHA;;;;AAEA,IAAMA,SAAS,GAAGC,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAAlB;AACA,IAAMC,WAAW,GAAGF,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAApB;AACA,IAAME,MAAM,GAAGH,QAAQ,CAACI,aAAT,CAAuB,gBAAvB,CAAf;AACA,IAAMC,MAAM,GAAGL,QAAQ,CAACI,aAAT,CAAuB,SAAvB,CAAf;AACA,IAAME,KAAK,GAAGN,QAAQ,CAACI,aAAT,CAAuB,QAAvB,CAAd;AAEAL,SAAS,CAACQ,gBAAV,CAA2B,OAA3B,EAAoCC,WAApC;;AACA,SAASA,WAAT,CAAqBC,CAArB,EAAwB;AACtBA,EAAAA,CAAC,CAACC,cAAF;;AACA,MAAIR,WAAW,CAACS,KAAZ,IAAqB,EAAzB,EAA6B;AAC3BL,IAAAA,KAAK,CAACM,KAAN,CAAYC,OAAZ,GAAsB,OAAtB;AACA;AACD,GAHD,MAGO;AACLR,IAAAA,MAAM,CAACO,KAAP,CAAaC,OAAb,GAAuB,OAAvB;AACAP,IAAAA,KAAK,CAACM,KAAN,CAAYC,OAAZ,GAAsB,MAAtB;AACA,QAAMC,IAAI,GAAGZ,WAAW,CAACS,KAAZ,CAAkBI,KAAlB,CAAwB,GAAxB,CAAb;AACAC,IAAAA,OAAO,CAACC,GAAR,SAAmBH,IAAnB;AACA,QAAMI,IAAI,GAAG,EAAb;AACAJ,IAAAA,IAAI,CAACK,OAAL,CAAa,UAACC,MAAD,EAAY;AACvBF,MAAAA,IAAI,CAACG,IAAL,CAAUC,QAAQ,CAACF,MAAD,CAAlB;AACD,KAFD;AAIAG,IAAAA,UAAU,CAACL,IAAD,CAAV;AACD;AACF;;AACD,SAASK,UAAT,CAAoBL,IAApB,EAA0B;AACxB,MAAMM,IAAI,GAAG,IAAIC,0CAAJ,CAAyBP,IAAI,CAAC,CAAD,CAA7B,CAAb;;AACA,OAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,IAAI,CAACS,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpCF,IAAAA,IAAI,CAACI,MAAL,CAAYV,IAAI,CAACQ,CAAD,CAAhB;AACD;;AACD,4CAAeF,IAAf,EAAqBrB,MAArB;AACD;;;ACjCD,IAAI0B,UAAU,GAAG,4BAAjB;AAEA,IAAIC,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAcC,MAA9B;;AAEA,SAASA,MAAT,CAAgBC,UAAhB,EAA4B;AAC1BJ,EAAAA,SAAS,CAACK,IAAV,CAAe,IAAf,EAAqBD,UAArB;AACA,OAAKE,GAAL,GAAW;AACTtB,IAAAA,IAAI,EAAEiB,MAAM,CAACC,MAAP,CAAcK,OADX;AAETC,IAAAA,gBAAgB,EAAE,EAFT;AAGTC,IAAAA,iBAAiB,EAAE,EAHV;AAITC,IAAAA,MAAM,EAAE,UAAUC,EAAV,EAAc;AACpB,WAAKH,gBAAL,CAAsBjB,IAAtB,CAA2BoB,EAAE,IAAI,YAAY,CAAE,CAA/C;AACD,KANQ;AAOTC,IAAAA,OAAO,EAAE,UAAUD,EAAV,EAAc;AACrB,WAAKF,iBAAL,CAAuBlB,IAAvB,CAA4BoB,EAA5B;AACD;AATQ,GAAX;AAYAV,EAAAA,MAAM,CAACC,MAAP,CAAcK,OAAd,GAAwB,IAAxB;AACD;;AAEDN,MAAM,CAACC,MAAP,CAAcC,MAAd,GAAuBA,MAAvB;AACA,IAAIU,aAAJ,EAAmBC,cAAnB;AAEA,IAAIC,MAAM,GAAGd,MAAM,CAACC,MAAP,CAAca,MAA3B;;AACA,IAAI,CAAC,CAACA,MAAD,IAAW,CAACA,MAAM,CAACC,eAApB,KAAwC,OAAOC,SAAP,KAAqB,WAAjE,EAA8E;AAC5E,MAAIC,QAAQ,GAAG,MAA4BC,QAAQ,CAACD,QAApD;AACA,MAAIE,QAAQ,GAAGD,QAAQ,CAACC,QAAT,KAAsB,QAAtB,GAAiC,KAAjC,GAAyC,IAAxD;AACA,MAAIC,EAAE,GAAG,IAAIJ,SAAJ,CAAcG,QAAQ,GAAG,KAAX,GAAmBF,QAAnB,GAA8B,GAA9B,aAA2D,GAAzE,CAAT;;AACAG,EAAAA,EAAE,CAACC,SAAH,GAAe,UAASC,KAAT,EAAgB;AAC7BV,IAAAA,aAAa,GAAG,EAAhB;AACAC,IAAAA,cAAc,GAAG,EAAjB;AAEA,QAAI9B,IAAI,GAAGwC,IAAI,CAACC,KAAL,CAAWF,KAAK,CAACvC,IAAjB,CAAX;;AAEA,QAAIA,IAAI,CAAC0C,IAAL,KAAc,QAAlB,EAA4B;AAC1B,UAAIC,OAAO,GAAG,KAAd;AACA3C,MAAAA,IAAI,CAAC4C,MAAL,CAAYvC,OAAZ,CAAoB,UAASwC,KAAT,EAAgB;AAClC,YAAI,CAACA,KAAK,CAACC,KAAX,EAAkB;AAChB,cAAIC,SAAS,GAAGC,cAAc,CAACC,MAAM,CAACC,aAAR,EAAuBL,KAAK,CAACM,EAA7B,CAA9B;;AACA,cAAIJ,SAAJ,EAAe;AACbJ,YAAAA,OAAO,GAAG,IAAV;AACD;AACF;AACF,OAPD,EAF0B,CAW1B;;AACAA,MAAAA,OAAO,GAAGA,OAAO,IAAI3C,IAAI,CAAC4C,MAAL,CAAYQ,KAAZ,CAAkB,UAASP,KAAT,EAAgB;AACrD,eAAOA,KAAK,CAACH,IAAN,KAAe,KAAf,IAAwBG,KAAK,CAACQ,SAAN,CAAgBC,EAA/C;AACD,OAFoB,CAArB;;AAIA,UAAIX,OAAJ,EAAa;AACXzC,QAAAA,OAAO,CAACqD,KAAR;AAEAvD,QAAAA,IAAI,CAAC4C,MAAL,CAAYvC,OAAZ,CAAoB,UAAUwC,KAAV,EAAiB;AACnCW,UAAAA,QAAQ,CAACP,MAAM,CAACC,aAAR,EAAuBL,KAAvB,CAAR;AACD,SAFD;AAIAf,QAAAA,cAAc,CAACzB,OAAf,CAAuB,UAAUoD,CAAV,EAAa;AAClCC,UAAAA,YAAY,CAACD,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,CAAZ;AACD,SAFD;AAGD,OAVD,MAUO,IAAItB,QAAQ,CAACwB,MAAb,EAAqB;AAAE;AAC5BxB,QAAAA,QAAQ,CAACwB,MAAT;AACD;AACF;;AAED,QAAI3D,IAAI,CAAC0C,IAAL,KAAc,QAAlB,EAA4B;AAC1BL,MAAAA,EAAE,CAACuB,KAAH;;AACAvB,MAAAA,EAAE,CAACwB,OAAH,GAAa,YAAY;AACvB1B,QAAAA,QAAQ,CAACwB,MAAT;AACD,OAFD;AAGD;;AAED,QAAI3D,IAAI,CAAC0C,IAAL,KAAc,gBAAlB,EAAoC;AAClCxC,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AAEA2D,MAAAA,kBAAkB;AACnB;;AAED,QAAI9D,IAAI,CAAC0C,IAAL,KAAc,OAAlB,EAA2B;AACzBxC,MAAAA,OAAO,CAACV,KAAR,CAAc,kBAAkBQ,IAAI,CAACR,KAAL,CAAWuE,OAA7B,GAAuC,IAAvC,GAA8C/D,IAAI,CAACR,KAAL,CAAWwE,KAAvE;AAEAF,MAAAA,kBAAkB;AAElB,UAAIG,OAAO,GAAGC,kBAAkB,CAAClE,IAAD,CAAhC;AACAd,MAAAA,QAAQ,CAACiF,IAAT,CAAcC,WAAd,CAA0BH,OAA1B;AACD;AACF,GA1DD;AA2DD;;AAED,SAASH,kBAAT,GAA8B;AAC5B,MAAIG,OAAO,GAAG/E,QAAQ,CAACC,cAAT,CAAwB4B,UAAxB,CAAd;;AACA,MAAIkD,OAAJ,EAAa;AACXA,IAAAA,OAAO,CAACI,MAAR;AACD;AACF;;AAED,SAASH,kBAAT,CAA4BlE,IAA5B,EAAkC;AAChC,MAAIiE,OAAO,GAAG/E,QAAQ,CAACoF,aAAT,CAAuB,KAAvB,CAAd;AACAL,EAAAA,OAAO,CAACd,EAAR,GAAapC,UAAb,CAFgC,CAIhC;;AACA,MAAIgD,OAAO,GAAG7E,QAAQ,CAACoF,aAAT,CAAuB,KAAvB,CAAd;AACA,MAAIC,UAAU,GAAGrF,QAAQ,CAACoF,aAAT,CAAuB,KAAvB,CAAjB;AACAP,EAAAA,OAAO,CAACS,SAAR,GAAoBxE,IAAI,CAACR,KAAL,CAAWuE,OAA/B;AACAQ,EAAAA,UAAU,CAACC,SAAX,GAAuBxE,IAAI,CAACR,KAAL,CAAWwE,KAAlC;AAEAC,EAAAA,OAAO,CAACQ,SAAR,GACE,2NACE,mFADF,GAEE,yEAFF,GAGE,qEAHF,GAG0EV,OAAO,CAACU,SAHlF,GAG8F,QAH9F,GAIE,OAJF,GAIYF,UAAU,CAACE,SAJvB,GAImC,QAJnC,GAKA,QANF;AASA,SAAOR,OAAP;AAED;;AAED,SAASS,UAAT,CAAoBxD,MAApB,EAA4BiC,EAA5B,EAAgC;AAC9B,MAAIwB,OAAO,GAAGzD,MAAM,CAACyD,OAArB;;AACA,MAAI,CAACA,OAAL,EAAc;AACZ,WAAO,EAAP;AACD;;AAED,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,CAAJ,EAAOC,CAAP,EAAUC,GAAV;;AAEA,OAAKF,CAAL,IAAUF,OAAV,EAAmB;AACjB,SAAKG,CAAL,IAAUH,OAAO,CAACE,CAAD,CAAP,CAAW,CAAX,CAAV,EAAyB;AACvBE,MAAAA,GAAG,GAAGJ,OAAO,CAACE,CAAD,CAAP,CAAW,CAAX,EAAcC,CAAd,CAAN;;AACA,UAAIC,GAAG,KAAK5B,EAAR,IAAe6B,KAAK,CAACC,OAAN,CAAcF,GAAd,KAAsBA,GAAG,CAACA,GAAG,CAAClE,MAAJ,GAAa,CAAd,CAAH,KAAwBsC,EAAjE,EAAsE;AACpEyB,QAAAA,OAAO,CAACrE,IAAR,CAAasE,CAAb;AACD;AACF;AACF;;AAED,MAAI3D,MAAM,CAACa,MAAX,EAAmB;AACjB6C,IAAAA,OAAO,GAAGA,OAAO,CAACM,MAAR,CAAeR,UAAU,CAACxD,MAAM,CAACa,MAAR,EAAgBoB,EAAhB,CAAzB,CAAV;AACD;;AAED,SAAOyB,OAAP;AACD;;AAED,SAASpB,QAAT,CAAkBtC,MAAlB,EAA0B2B,KAA1B,EAAiC;AAC/B,MAAI8B,OAAO,GAAGzD,MAAM,CAACyD,OAArB;;AACA,MAAI,CAACA,OAAL,EAAc;AACZ;AACD;;AAED,MAAIA,OAAO,CAAC9B,KAAK,CAACM,EAAP,CAAP,IAAqB,CAACjC,MAAM,CAACa,MAAjC,EAAyC;AACvC,QAAIJ,EAAE,GAAG,IAAIwD,QAAJ,CAAa,SAAb,EAAwB,QAAxB,EAAkC,SAAlC,EAA6CtC,KAAK,CAACQ,SAAN,CAAgBC,EAA7D,CAAT;AACAT,IAAAA,KAAK,CAACC,KAAN,GAAc,CAAC6B,OAAO,CAAC9B,KAAK,CAACM,EAAP,CAAtB;AACAwB,IAAAA,OAAO,CAAC9B,KAAK,CAACM,EAAP,CAAP,GAAoB,CAACxB,EAAD,EAAKkB,KAAK,CAACuC,IAAX,CAApB;AACD,GAJD,MAIO,IAAIlE,MAAM,CAACa,MAAX,EAAmB;AACxByB,IAAAA,QAAQ,CAACtC,MAAM,CAACa,MAAR,EAAgBc,KAAhB,CAAR;AACD;AACF;;AAED,SAASG,cAAT,CAAwB9B,MAAxB,EAAgCiC,EAAhC,EAAoC;AAClC,MAAIwB,OAAO,GAAGzD,MAAM,CAACyD,OAArB;;AACA,MAAI,CAACA,OAAL,EAAc;AACZ;AACD;;AAED,MAAI,CAACA,OAAO,CAACxB,EAAD,CAAR,IAAgBjC,MAAM,CAACa,MAA3B,EAAmC;AACjC,WAAOiB,cAAc,CAAC9B,MAAM,CAACa,MAAR,EAAgBoB,EAAhB,CAArB;AACD;;AAED,MAAItB,aAAa,CAACsB,EAAD,CAAjB,EAAuB;AACrB;AACD;;AACDtB,EAAAA,aAAa,CAACsB,EAAD,CAAb,GAAoB,IAApB;AAEA,MAAIkC,MAAM,GAAGnE,MAAM,CAACoE,KAAP,CAAanC,EAAb,CAAb;AAEArB,EAAAA,cAAc,CAACvB,IAAf,CAAoB,CAACW,MAAD,EAASiC,EAAT,CAApB;;AAEA,MAAIkC,MAAM,IAAIA,MAAM,CAAC/D,GAAjB,IAAwB+D,MAAM,CAAC/D,GAAP,CAAWE,gBAAX,CAA4BX,MAAxD,EAAgE;AAC9D,WAAO,IAAP;AACD;;AAED,SAAO6D,UAAU,CAACzB,MAAM,CAACC,aAAR,EAAuBC,EAAvB,CAAV,CAAqCoC,IAArC,CAA0C,UAAUpC,EAAV,EAAc;AAC7D,WAAOH,cAAc,CAACC,MAAM,CAACC,aAAR,EAAuBC,EAAvB,CAArB;AACD,GAFM,CAAP;AAGD;;AAED,SAASO,YAAT,CAAsBxC,MAAtB,EAA8BiC,EAA9B,EAAkC;AAChC,MAAIkC,MAAM,GAAGnE,MAAM,CAACoE,KAAP,CAAanC,EAAb,CAAb;AACAjC,EAAAA,MAAM,CAACK,OAAP,GAAiB,EAAjB;;AACA,MAAI8D,MAAJ,EAAY;AACVA,IAAAA,MAAM,CAAC/D,GAAP,CAAWtB,IAAX,GAAkBkB,MAAM,CAACK,OAAzB;AACD;;AAED,MAAI8D,MAAM,IAAIA,MAAM,CAAC/D,GAAjB,IAAwB+D,MAAM,CAAC/D,GAAP,CAAWG,iBAAX,CAA6BZ,MAAzD,EAAiE;AAC/DwE,IAAAA,MAAM,CAAC/D,GAAP,CAAWG,iBAAX,CAA6BpB,OAA7B,CAAqC,UAAUmF,EAAV,EAAc;AACjDA,MAAAA,EAAE,CAACtE,MAAM,CAACK,OAAR,CAAF;AACD,KAFD;AAGD;;AAED,SAAOL,MAAM,CAACoE,KAAP,CAAanC,EAAb,CAAP;AACAjC,EAAAA,MAAM,CAACiC,EAAD,CAAN;AAEAkC,EAAAA,MAAM,GAAGnE,MAAM,CAACoE,KAAP,CAAanC,EAAb,CAAT;;AACA,MAAIkC,MAAM,IAAIA,MAAM,CAAC/D,GAAjB,IAAwB+D,MAAM,CAAC/D,GAAP,CAAWE,gBAAX,CAA4BX,MAAxD,EAAgE;AAC9DwE,IAAAA,MAAM,CAAC/D,GAAP,CAAWE,gBAAX,CAA4BnB,OAA5B,CAAoC,UAAUmF,EAAV,EAAc;AAChDA,MAAAA,EAAE;AACH,KAFD;;AAGA,WAAO,IAAP;AACD;AACF","file":"app.6178ef24.js","sourceRoot":"..","sourcesContent":["import {Theme} from './types';\n\nconst theme: Theme = {\n  radius: 20,\n  growthAndShrinkTimes: 1.25,\n  leafNodeSpace: 75,\n  lineHeight: 90,\n  textFont: 'Poppins',\n  strokeColor: '#f56042',\n  colorArray: [\n    {bgColor: '#fff2e0', borderColor: '#f56042'},\n  ],\n};\n\n/**\n * Set the user defined theme if required\n *\n * @param {Theme} userDefinedTheme\n */\nexport function setTheme(userDefinedTheme: Partial<Theme>) {\n  const {\n    radius = theme.radius,\n    growthAndShrinkTimes = theme.growthAndShrinkTimes,\n    leafNodeSpace = theme.leafNodeSpace,\n    lineHeight = theme.lineHeight,\n    colorArray = theme.colorArray,\n    textFont = theme.textFont,\n    strokeColor = theme.strokeColor,\n  } = userDefinedTheme;\n\n  theme.radius = radius;\n  theme.growthAndShrinkTimes = growthAndShrinkTimes;\n  theme.leafNodeSpace = leafNodeSpace;\n  theme.lineHeight = lineHeight;\n  theme.colorArray = colorArray;\n  theme.textFont = textFont;\n  theme.strokeColor = strokeColor;\n}\n\nexport default theme;\n\n","import {CanvasComponent} from '..';\nimport theme from '../config/theme';\nimport {CircleColorSettings} from '../config/types';\nimport {RadiusSettings} from './types';\n\n/**\n * Rate at which circle will grow or shrink\n */\nconst growthRate = 0.3;\n\n/**\n * Describes a circle in the canvas\n */\nclass Circle {\n  /**\n   * Radius of the circle\n   */\n  private radiusSettings: RadiusSettings\n\n  /**\n   * The colorId of the circle\n   */\n  private colorId: string = ''\n\n  /**\n   * Color of the circle\n   */\n  private colorSettings: CircleColorSettings\n\n  /**\n   * Value to be displayed inside the circle\n   */\n  private value: string\n\n  /**\n   * X Position of the circle\n   */\n  private x: number = -1\n\n  /**\n   * Y Position of the circle\n   */\n  private y: number = -1\n\n  /**\n   * For constructing a new circle\n   *\n   * @param {string} value\n   * @param {number} radius\n   * @param {CircleColorSettings} colorSettings\n   */\n  constructor(\n      value: string,\n      radius: number,\n      colorSettings: CircleColorSettings,\n  ) {\n    this.value = value;\n    this.colorSettings = colorSettings;\n    this.radiusSettings = {\n      currentRadius: radius,\n      originalRadius: radius,\n      maxRadius: radius * theme.growthAndShrinkTimes,\n      minRadius: radius / theme.growthAndShrinkTimes,\n    };\n  }\n\n  /**\n   * Draw the circle\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {number} radius\n   * @param {string} color\n   */\n  private drawCircle(\n      ctx: CanvasRenderingContext2D,\n      radius: number,\n      color: string,\n  ) {\n    const {x, y} = this;\n\n    ctx.beginPath();\n    ctx.fillStyle = color;\n    ctx.arc(x, y, radius, 0, Math.PI * 2, false);\n    ctx.fill();\n  }\n\n  /**\n   * Draw the border\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  private drawBorder(ctx: CanvasRenderingContext2D) {\n    const {x, y, colorSettings, radiusSettings: {currentRadius: radius}} = this;\n    const {borderColor} = colorSettings;\n\n    ctx.arc(x, y, radius, 0, Math.PI * 2, false);\n    ctx.strokeStyle = borderColor;\n    ctx.stroke();\n  }\n\n  /**\n   * Write the text\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  private writeText(ctx: CanvasRenderingContext2D) {\n    const {x, y, value, colorSettings} = this;\n    const {borderColor} = colorSettings;\n\n    // @todo: Make this configurable\n    // Decide font size\n    let fontSize = '10pt';\n    let ySpacing = 5;\n    if (value.length > 3) {\n      fontSize = '8pt';\n      ySpacing = 3;\n    }\n\n    ctx.fillStyle = borderColor;\n    ctx.font = `${fontSize} ${theme.textFont}`;\n    ctx.textAlign = 'center';\n    ctx.fillText(value, x, y + ySpacing);\n  }\n\n  /**\n   * Get the current radius\n   *\n   * @return {number}\n   */\n  getRadius() {\n    const {\n      radiusSettings: {currentRadius: radius},\n    } = this;\n    return radius;\n  }\n\n  /**\n   * Increase radius of the circle\n   * @param {number} maxRadius\n   * @return {boolean} - Weather size was changed\n   */\n  grow(maxRadius = this.radiusSettings.maxRadius) {\n    const {\n      radiusSettings: {\n        currentRadius,\n      },\n    } = this;\n\n    if (currentRadius < maxRadius) {\n      const originalIncreasedRadius = currentRadius + growthRate;\n      this.radiusSettings.currentRadius = originalIncreasedRadius > maxRadius ?\n      maxRadius : originalIncreasedRadius;\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Decrease the radius of the circle\n   * @param {number} minRadius\n   * @return {boolean} - Weather size was changed\n   */\n  shrink(minRadius = this.radiusSettings.minRadius) {\n    const {\n      radiusSettings: {\n        currentRadius,\n      },\n    } = this;\n\n    if (currentRadius > minRadius) {\n      const originalDecreasedRadius = currentRadius - growthRate;\n      this.radiusSettings.currentRadius = originalDecreasedRadius < minRadius ?\n      minRadius : originalDecreasedRadius;\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Bring the circle back to its original radius\n   * @return {boolean} - Weather size was changed\n   */\n  restoreCircle() {\n    const {\n      radiusSettings: {\n        currentRadius,\n        originalRadius,\n      },\n    } = this;\n\n    if (currentRadius > originalRadius) {\n      return this.shrink(originalRadius);\n    }\n\n    if (currentRadius < originalRadius) {\n      return this.grow(originalRadius);\n    }\n\n    return false;\n  }\n\n  /**\n   * Set the color id of the circle\n   *\n   * @param {string} colorId\n   */\n  setColorId(colorId: string) {\n    this.colorId = colorId;\n  }\n\n  /**\n   * Set the x and y coordinates of the circle\n   *\n   * @param {number} x\n   * @param {number} y\n   */\n  setCoordinates(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Draw the circle on the screen\n   * Draw the border\n   * Add the text\n   *\n   * @param {CanvasComponent} comp\n   * @return {string} - The color id represented by the unique color\n   */\n  draw(comp: CanvasComponent) {\n    const {\n      radiusSettings: {currentRadius: radius},\n      colorSettings: {bgColor},\n    } = this;\n\n    // Draw circle\n    this.colorId = this.colorId ? this.colorId : comp.getNextColor();\n    this.drawCircle(\n        comp.getContext(),\n        radius,\n        bgColor,\n    );\n    this.drawCircle(\n        comp.getHitContext(),\n        radius,\n        this.colorId,\n    );\n\n    // Draw border\n    this.drawBorder(comp.getContext());\n\n    // Write text\n    this.writeText(comp.getContext());\n\n    // Return the colorId\n    return this.colorId;\n  }\n}\n\nexport default Circle;\n","import {CircleColorSettings} from '../config/types';\nimport theme from '../config/theme';\n\n/**\n * Get a random color settings\n *\n * @return {CircleColorSettings}\n */\nfunction getRandomColor():CircleColorSettings {\n  const {colorArray} = theme;\n  return colorArray[Math.floor(Math.random() * colorArray.length)];\n}\n\nexport default getRandomColor;\n","import Circle from '../shapes/Circle';\nimport theme from '../config/theme';\nimport getRandomColor from '../utils/getRandomColor';\n\n/**\n * Describes a node of a binary tree\n */\nclass BinaryTreeNode<T extends string | number> {\n  /**\n   * The value of the node\n   */\n  value: T\n\n  /**\n   * The canvas circle\n   */\n  nodeCircle: Circle\n\n  /**\n   * The left child of the node\n   */\n  left?: BinaryTreeNode<T>\n\n  /**\n   * The right child of the node\n   */\n  right?: BinaryTreeNode<T>\n\n  /**\n   * For constructing a new binary tree node\n   *\n   * @param {T} value\n   */\n  constructor(value: T) {\n    this.value = value;\n    this.nodeCircle = new Circle(\n        `${value}`,\n        theme.radius,\n        getRandomColor(),\n    );\n  }\n\n  /**\n   * Set the left child\n   *\n   * @param {BinaryTreeNode} value\n   */\n  setLeft(value: BinaryTreeNode<T>) {\n    this.left = value;\n  }\n\n  /**\n   * Set the right child\n   *\n   * @param {BinaryTreeNode} value\n   */\n  setRight(value: BinaryTreeNode<T>) {\n    this.right = value;\n  }\n\n  /**\n   * Get the height of the binry tree from the node\n   * Height of root is 1\n   *\n   * @return {number}\n   */\n  getHeight():number {\n    const leftHeight = this.left?.getHeight() || 0;\n    const rightHeight = this.right?.getHeight() || 0;\n    return Math.max(leftHeight, rightHeight) + 1;\n  }\n}\n\nexport default BinaryTreeNode;\n","import BinaryTreeNode from './BinaryTreeNode';\n\n/**\n * A Binary search tree node\n */\nclass BinarySearchTreeNode<T extends string | number>\n  extends BinaryTreeNode<T> {\n    /**\n     * Left child of the node\n     */\n    left?: BinarySearchTreeNode<T>\n\n    /**\n     * Right child of the node\n     */\n    right?: BinarySearchTreeNode<T>\n\n    /**\n     * Set the left child of the node\n     *\n     * @param {BinarySearchTreeNode<T>} value\n     */\n    setLeft(value: BinarySearchTreeNode<T>) {\n      super.setLeft(value);\n    }\n\n    /**\n     * Set the right child of the node\n     *\n     * @param {BinarySearchTreeNode<T>} value\n     */\n    setRight(value: BinarySearchTreeNode<T>) {\n      super.setRight(value);\n    }\n\n    /**\n     * Insert a value into the node\n     * (Using Recursion)\n     *\n     * @param {T} value\n     */\n    insert(value: T) {\n      // Skip equal value\n      if (value === this.value) {\n        return;\n      }\n\n      // When value is lesser\n      if (value < this.value) {\n        if (this.left) {\n          this.left.insert(value);\n          return;\n        }\n        this.setLeft(new BinarySearchTreeNode(value));\n        return;\n      }\n\n      // When value is greater\n      if (this.right) {\n        this.right.insert(value);\n        return;\n      }\n      this.setRight(new BinarySearchTreeNode(value));\n    }\n\n    /**\n     * Find the minimum value from the given node\n     *\n     * @param {BinarySearchTreeNode<T>} node\n     * @return {BinarySearchTreeNode<T>}\n     */\n    findMinimum():BinarySearchTreeNode<T> {\n      if (this.left) {\n        return this.left.findMinimum();\n      }\n      return this;\n    }\n\n    /**\n     * Delete this node\n     *\n     * @param {BinarySearchTreeNode<T>} parent\n     * @return {[\n     *  BinarySearchTreeNode<T>,\n     *  BinarySearchTreeNode<T>\n     * ]} [deletedNode, currentRoot]\n     */\n    deleteThisNode(\n        parent?: BinarySearchTreeNode<T>,\n    ): [BinarySearchTreeNode<T>?, BinarySearchTreeNode<T>?] {\n      // Which direction is this node from the parent\n      const childDirection = parent?.left === this ? 'left' : 'right';\n\n      // Case 1: Delete leaf node\n      if (!this.left && !this.right) {\n        if (parent) {\n          delete parent[childDirection];\n        }\n        return [this];\n      }\n\n      // Case 2: Delete when there is only one child\n      if (this.left && !this.right) {\n        if (parent) {\n          parent[childDirection] = this.left;\n        }\n        return [this, this.left];\n      } else if (this.right && !this.left) {\n        if (parent) {\n          parent[childDirection] = this.right;\n        }\n        return [this, this.right];\n      }\n\n      // Case 3: There are 2 children\n\n      // Step 1: Delete the in order successor\n      const [deletedNode] = this.right!.delete(\n        this.right!.findMinimum().value, this,\n      );\n\n      // Step 2: Set the in order successor as the current node\n      // Deleted node will always be found\n      deletedNode!.left = this.left;\n      deletedNode!.right = this.right;\n      if (parent) {\n        parent[childDirection] = deletedNode;\n      }\n\n      return [this, deletedNode];\n    }\n\n    /**\n     * Delete a node\n     * (Using recursion)\n     *\n     * @param {T} value\n     * @param {BinarySearchTreeNode<T>} parent\n     * @return {[\n     *  BinarySearchTreeNode<T>,\n     *  BinarySearchTreeNode<T>\n     * ]} [deletedNode, currentRoot]\n     */\n    delete(\n        value: T,\n        parent?: BinarySearchTreeNode<T>,\n    ): [BinarySearchTreeNode<T>?, BinarySearchTreeNode<T>?] {\n      // Delete from left node\n      if (value < this.value && this.left) {\n        const [deletedNode] = this.left.delete(value, this);\n        return [deletedNode, this];\n      }\n\n      // Delete from right node\n      if (value > this.value && this.right) {\n        const [deletedNode] = this.right.delete(value, this);\n        return [deletedNode, this];\n      }\n\n      // Delete the current node\n      if (this.value === value) {\n        const res = this.deleteThisNode(parent);\n        delete this.left;\n        delete this.right;\n        return res;\n      }\n\n      return [, this];\n    }\n}\n\nexport default BinarySearchTreeNode;\n","import BinaryTreeNode from './BinaryTreeNode';\nimport BinarySearchTreeNode from './BinarySearchTreeNode';\n\nexport {\n  BinaryTreeNode,\n  BinarySearchTreeNode,\n};\n","/**\n * Get RGB string from red green and blue values\n *\n * @param {number} red\n * @param {number} green\n * @param {number} blue\n * @return {string}\n */\nfunction getRGBString(red: number, green: number, blue: number) {\n  return `rgb(${red}, ${green}, ${blue})`;\n}\n\nexport default getRGBString;\n","import getRGBString from '../utils/getRGBString';\n\n/**\n * The gap between 2 ids\n */\nconst gap = 10;\n\n/**\n * For generating color\n */\nclass ColorGenerator {\n  /**\n   * The red color value\n   */\n  private red = 0\n\n  /**\n   * The green color value\n   */\n  private green = 0\n\n  /**\n   * The blue color value\n   */\n  private blue = 1\n\n  /**\n   * Increment a color\n   *\n   * @param {'red' | 'green' | 'blue'} color\n   */\n  incrementColor(color: 'red' | 'green' | 'blue') {\n    this[color] = (this[color] + gap) % 256;\n  }\n\n  /**\n   * Get the next color\n   * Starts from rgb(0, 0, 0)\n   *\n   * @return {string}\n   */\n  getNextColor() {\n    // Generate the rgb value\n    const color = getRGBString(this.red, this.green, this.blue);\n\n    // Increment the color\n    this.incrementColor('blue');\n    if (this.blue < gap) {\n      this.incrementColor('green');\n      if (this.green < gap) {\n        this.incrementColor('red');\n      }\n    }\n\n    // Return the color\n    return color;\n  }\n}\n\nexport default ColorGenerator;\n","import ColorGenerator from '../helpers/ColorGenerator';\nimport getRGBString from '../utils/getRGBString';\nimport {GetColorCallBack} from './types';\n\n/**\n * Defines one canvas\n */\nclass CanvasComponent {\n  /**\n   * The canvas element\n   */\n  private $el: HTMLCanvasElement\n\n  /**\n   * This is a hidden canvas element\n   * which is used to redraw all the elements from the canvas\n   * in unique colors.\n   *\n   * This way an element can be easily identified from this hit canvas\n   * just by using the color in O(1)\n   *\n   * Otherwise to identify an element in the canvas it will take O(n)\n   *\n   */\n  private $hitEl: HTMLCanvasElement\n\n  /**\n   * The color generator for generating new color\n   */\n  private colorGenerator: ColorGenerator\n\n  /**\n   * The current hovering color\n   */\n  private currentHoveringColor: string = ''\n\n  /**\n   * For constructing a new canvas component\n   *\n   * @param {HTMLCanvasElement} $el\n   */\n  constructor($el: HTMLCanvasElement) {\n    const $hitEl = document.createElement('canvas');\n\n    this.$el = $el;\n    this.$hitEl = $hitEl;\n    this.colorGenerator = new ColorGenerator();\n  }\n\n  /**\n   * Clears the canvas\n   */\n  clearCanvas() {\n    const {height, width} = this.$el;\n    this.getContext().clearRect(0, 0, width, height);\n  }\n\n  /**\n   * Set the maximum width and height\n   *\n   * @param {number} height\n   * @param {number} width\n   */\n  setMaxWidthAndHeight(height: number, width: number) {\n    this.$hitEl.height = this.$el.height = height;\n    this.$hitEl.width = this.$el.width = width;\n  }\n\n  /**\n   * Get the hit 2d context\n   *\n   * @return {CanvasComponent}\n   */\n  getHitContext(): CanvasRenderingContext2D {\n    const ctx = this.$hitEl.getContext('2d');\n    if (!ctx) {\n      throw new Error('Cannot get 2d context');\n    }\n\n    return ctx;\n  }\n\n  /**\n   * Get the 2d context\n   *\n   * @return {CanvasRenderingContext2D}\n   */\n  getContext(): CanvasRenderingContext2D {\n    const ctx = this.$el.getContext('2d');\n    if (!ctx) {\n      throw new Error('Cannot get 2d context');\n    }\n\n    return ctx;\n  }\n\n  /**\n   * Get the next color from the color generator\n   *\n   * @return {string}\n   */\n  getNextColor() {\n    return this.colorGenerator.getNextColor();\n  }\n\n  /**\n   * On hover get the canvas hit color\n   *\n   * @param {GetColorCallBack} cb\n   */\n  onHover(cb: GetColorCallBack) {\n    this.$el.addEventListener('mousemove', (event) => {\n      const {pageX, pageY} = event;\n      const {data: pixel} = this.getHitContext().getImageData(\n          pageX - this.$el.offsetLeft,\n          pageY - this.$el.offsetTop,\n          1, 1,\n      );\n\n      // Callback should only be called on color change\n      const color = getRGBString(pixel[0], pixel[1], pixel[2]);\n      if (this.currentHoveringColor !== color) {\n        this.currentHoveringColor = color;\n        cb(color);\n      }\n    });\n  }\n\n  /**\n   * On click of canvas get the hit color\n   *\n   * @param {GetColorCallBack} cb\n   */\n  onClick(cb: GetColorCallBack) {\n    this.$el.addEventListener('click', (event) => {\n      const {pageX, pageY} = event;\n      console.log(pageX, pageY);\n      const {data: pixel} = this.getHitContext().getImageData(\n          pageX - this.$el.offsetLeft,\n          pageY - this.$el.offsetTop,\n          1, 1,\n      );\n      cb(getRGBString(pixel[0], pixel[1], pixel[2]));\n    });\n  }\n}\n\nexport default CanvasComponent;\n\n\n","export enum VisualizationType {\n  SIMPLE,\n  PRETTY,\n  EXPANDABLE,\n  HIGHLIGHT\n}\n","import theme from '../config/theme';\n\n/**\n * Get the max number of leaf nodes from height of the binary tree\n *\n * @param {number} treeHeight - Height of the tree (number of nodes from)\n * @return {number} - Maximum number of leaf nodes\n */\nexport function getMaxLeafNodesFromHeight(treeHeight: number) {\n  return 2 ** (treeHeight-1);\n}\n\n/**\n * Maximum canvas width required from number of tree nodes\n *\n * @param {number} maxNodes - Maximum number of nodes\n * @return {number} - The max width required\n */\nexport function getCanvasWidthFromMaxNodeSpacing(maxNodes: number) {\n  return (maxNodes + 2) * theme.leafNodeSpace;\n}\n\n/**\n * Get the x position from given horizontal node position\n *\n * @param {number} nodes - The number of nodes from the left\n * @return {number} - The x position\n */\nexport function getXPositionFromGivenHorizontalNodePosition(nodes: number) {\n  return (nodes) * theme.leafNodeSpace;\n}\n\n/**\n * Get canvas height from the tree height\n *\n * @param {number} treeHeight - Height of the tree (number of nodes from)\n * @return {number} - The canvas height in px\n */\nexport function getCanvasHeightFromTreeHeight(treeHeight: number) {\n  return (treeHeight) * theme.lineHeight;\n}\n\n/**\n * Get required and actual height and width\n *\n * @param {number} maxNodeSpacing\n * @param {number} heightOfTree\n * @param {number} maxWidth\n * @param {number} maxHeight\n * @return {{\n *  maxCanvasHeightRequired: number,\n *  maxCanvasWidthRequired:number,\n *  actualMaxHeight: number,\n *  actualMaxWidth: number\n * }}\n */\nexport function getRequiredAndActualHeightAndWidth(\n    maxNodeSpacing: number,\n    heightOfTree: number,\n    maxWidth: number,\n    maxHeight: number,\n) {\n  const maxCanvasWidthRequired = getCanvasWidthFromMaxNodeSpacing(\n      maxNodeSpacing,\n  );\n  const maxCanvasHeightRequired = getCanvasHeightFromTreeHeight(heightOfTree+1);\n  const actualMaxWidth = maxCanvasWidthRequired > maxWidth ?\n    maxCanvasWidthRequired : maxWidth;\n  const actualMaxHeight = maxCanvasHeightRequired > maxHeight ?\n    maxCanvasHeightRequired : maxHeight;\n\n  return {\n    maxCanvasHeightRequired,\n    maxCanvasWidthRequired,\n    actualMaxHeight,\n    actualMaxWidth,\n  };\n}\n","import {Point} from '../types/Point';\n\n/**\n * Describes a bezier curve\n */\nclass BezierCurve {\n  /**\n   * X Configurations\n   */\n  xStart: number\n  cp1x: number\n  cp2x: number\n  xEnd: number\n\n  /**\n   * Y Configurations\n   */\n  yStart: number\n  cp1y: number\n  cp2y: number\n  yEnd: number\n\n  /**\n   * Color of the curve\n   */\n  color: string\n\n  /**\n   * Construct a new bezier curve\n   *\n   * @param {string} color\n   * @param {Point} start\n   * @param {Point} cp1\n   * @param {Point} cp2\n   * @param {Point} end\n   */\n  constructor(\n      color: string,\n      start: Point,\n      cp1: Point,\n      cp2: Point,\n      end: Point,\n  ) {\n    const {x: xStart, y: yStart} = start;\n    const {x: cp1x, y: cp1y} = cp1;\n    const {x: cp2x, y: cp2y} = cp2;\n    const {x: xEnd, y: yEnd} = end;\n\n    this.color = color;\n    this.xStart = xStart;\n    this.yStart = yStart;\n    this.cp1x = cp1x;\n    this.cp1y = cp1y;\n    this.cp2x = cp2x;\n    this.cp2y = cp2y;\n    this.xEnd = xEnd;\n    this.yEnd = yEnd;\n  }\n\n  /**\n   * Draw the bezier curve\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  draw(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    ctx.moveTo(this.xStart, this.yStart);\n    ctx.strokeStyle = this.color;\n    ctx.bezierCurveTo(\n        this.cp1x,\n        this.cp1y,\n        this.cp2x,\n        this.cp2y,\n        this.xEnd,\n        this.yEnd,\n    );\n    ctx.stroke();\n  }\n}\n\n\nexport default BezierCurve;\n","import CanvasComponent from '../canvas/Canvas';\nimport theme from '../config/theme';\nimport BezierCurve from '../strokes/BezierCurve';\nimport {\n  HorizontalStartAndEndInput,\n  VerticalStartAndEndInput,\n} from '../canvas/types';\n\n/**\n * Connect two points with a bezier curve\n *\n * @param {CanvasComponent} canvasComponent\n * @param {HorizontalStartAndEndInput} horizontalConfig\n * @param {VerticalStartAndEndInput} verticalConfig\n */\nfunction connectPointsWithBezierCurve(\n    canvasComponent: CanvasComponent,\n    horizontalConfig: HorizontalStartAndEndInput,\n    verticalConfig: VerticalStartAndEndInput,\n) {\n// X, Y Calculation\n  const {xStart, xEnd} = horizontalConfig;\n  const {yStart, yEnd} = verticalConfig;\n  const halfY = (yStart + yEnd) / 2;\n  const halfX = (xStart + xEnd) / 2;\n\n  // Draw the bezier curve\n  const berzierCurve = new BezierCurve(\n      theme.strokeColor,\n      {x: xStart, y: yStart},\n      {x: halfX, y: halfY},\n      {x: xEnd, y: halfY},\n      {x: xEnd, y: yEnd},\n  );\n  berzierCurve.draw(canvasComponent.getContext());\n}\n\nexport default connectPointsWithBezierCurve;\n","import {CanvasComponent} from '.';\nimport theme from '../config/theme';\nimport BinaryTreeNode from '../tree/BinaryTreeNode';\nimport {Point} from '../types/Point';\nimport {\n  getCanvasHeightFromTreeHeight,\n  getRequiredAndActualHeightAndWidth,\n  getXPositionFromGivenHorizontalNodePosition,\n} from '../utils/tree';\nimport connectPointsWithBezierCurve\n  from '../utils/connectPointsWithBezierCurve';\nimport {\n  IndividualInputOptions,\n  LeftAndRightSpacing,\n} from './types';\n\n/**\n * The current animation frame that is going on\n */\nlet animationFrameId: number;\n\n/**\n * Current color that is being hovered on\n */\nlet hoveredColorId: string;\n\n/**\n * Spacing map for storing space requirements\n */\nlet spacingMap: Map<BinaryTreeNode<string | number>, LeftAndRightSpacing>;\n\n/**\n * Clear the existing animation frame if any and request an animation frame\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} canvasComponent\n * @param {Point} position\n * @param {boolean} highlightMode\n */\nfunction requestAnimationFrame(\n    root: BinaryTreeNode<string | number>,\n    canvasComponent: CanvasComponent,\n    position: Point,\n    highlightMode: boolean,\n) {\n  // Clear existing animation frame\n  if (animationFrameId) {\n    cancelAnimationFrame(animationFrameId);\n  }\n\n  // Request a new one\n  animationFrameId = window.requestAnimationFrame(() => {\n    canvasComponent.clearCanvas();\n    const requiredRedraw = recursivelyDrawNodes(\n        root, canvasComponent, position, highlightMode);\n    if (requiredRedraw) {\n      requestAnimationFrame(root, canvasComponent, position, highlightMode);\n    }\n  });\n}\n\n/**\n * Draw single node\n *\n * @param {BinaryTreeNode} node\n * @param {CanvasComponent} comp\n * @param {Point} position\n * @param {boolean} highlightMode\n * @return {boolean} Weather redraw is required\n */\nfunction drawSingleNode(\n    node: BinaryTreeNode<string | number>,\n    comp: CanvasComponent,\n    position: Point,\n    highlightMode: boolean,\n) {\n  const {x, y} = position;\n  node.nodeCircle.setCoordinates(x, y);\n\n  // Grow or shrink while hover\n  const colorId = node.nodeCircle.draw(comp);\n  if (colorId === hoveredColorId && highlightMode) {\n    return node.nodeCircle.grow();\n  } else {\n    return node.nodeCircle.restoreCircle();\n  }\n}\n\n/**\n * Recursively draw all the nodes for a pretty tree\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} canvasComponent\n * @param {Point} position\n * @param {boolean} highlightMode\n * @return {boolean}\n */\nfunction recursivelyDrawNodes(\n    root: BinaryTreeNode<string | number>,\n    canvasComponent: CanvasComponent,\n    position: Point,\n    highlightMode: boolean,\n): boolean {\n  const {x: xPosition, y: yPosition} = position;\n\n  // Draw the node\n  let requiredRedraw = drawSingleNode(\n      root,\n      canvasComponent,\n      {x: xPosition, y: yPosition},\n      highlightMode,\n  );\n  root.nodeCircle.setCoordinates(xPosition, yPosition);\n  root.nodeCircle.draw(canvasComponent);\n\n  // Root spacings\n  const {left, right} = spacingMap.get(root)!;\n\n  // Draw the left child\n  if (root.left) {\n    const leftOfLeft = spacingMap.get(root.left)!.left;\n    const childYPosition = yPosition + theme.lineHeight;\n    const leftPosition = {\n      x: xPosition - getXPositionFromGivenHorizontalNodePosition(\n          left - leftOfLeft,\n      ),\n      y: childYPosition,\n    };\n\n    requiredRedraw = recursivelyDrawNodes(\n        root.left,\n        canvasComponent,\n        leftPosition,\n        highlightMode,\n    ) || requiredRedraw;\n    connectPointsWithBezierCurve(canvasComponent, {\n      xStart: xPosition,\n      xEnd: leftPosition.x,\n    }, {\n      yStart: yPosition + root.nodeCircle.getRadius(),\n      yEnd: childYPosition - root.left.nodeCircle.getRadius(),\n    });\n  }\n\n  // Draw the right child\n  if (root.right) {\n    const rightOfRight = spacingMap.get(root.right)!.right;\n    const childYPosition = yPosition + theme.lineHeight;\n    const rightPosition = {\n      x: xPosition + getXPositionFromGivenHorizontalNodePosition(\n          right - rightOfRight,\n      ),\n      y: childYPosition,\n    };\n\n    requiredRedraw = recursivelyDrawNodes(\n        root.right,\n        canvasComponent,\n        rightPosition,\n        highlightMode,\n    ) || requiredRedraw;\n    connectPointsWithBezierCurve(canvasComponent, {\n      xStart: xPosition,\n      xEnd: rightPosition.x,\n    }, {\n      yStart: yPosition + root.nodeCircle.getRadius(),\n      yEnd: childYPosition - root.right.nodeCircle.getRadius(),\n    });\n  }\n\n  return requiredRedraw;\n}\n\n/**\n * Calculates the spacing required recursively\n *\n * @param {BinaryTreeNode<string | number>} root\n * @return {number} - The spacing requirement of that node\n */\nfunction calculateSpacingMapRecursively(\n    root: BinaryTreeNode<string | number>,\n): number {\n  const left = root.left ? calculateSpacingMapRecursively(\n      root.left,\n  ) + 0.5: 0;\n  const right = root.right ? calculateSpacingMapRecursively(\n      root.right,\n  ) + 0.5: 0;\n  spacingMap.set(root, {\n    left,\n    right,\n  });\n\n  return left + right;\n}\n\n/**\n * Draw a pretty binary tree\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {HTMLCanvasElement} canvasElement\n * @param {IndividualInputOptions} options\n */\nfunction drawPrettyBinaryTree(\n    root: BinaryTreeNode<string | number>,\n    canvasElement: HTMLCanvasElement,\n    options: IndividualInputOptions,\n) {\n  spacingMap = new Map();\n  const maxNodeSpacing = calculateSpacingMapRecursively(root);\n  const heightOfTree = root.getHeight();\n  const {maxHeight, maxWidth, highlightMode} = options;\n\n  // Calculate canvas spacing requirements\n  const {\n    maxCanvasWidthRequired,\n    actualMaxHeight,\n    actualMaxWidth,\n  } = getRequiredAndActualHeightAndWidth(\n      maxNodeSpacing,\n      heightOfTree,\n      maxWidth,\n      maxHeight,\n  );\n\n  // Init calculation\n  const left = spacingMap.get(root)!.left;\n  const midPointInCanvas = actualMaxWidth / 2;\n  const xStart = (midPointInCanvas - maxCanvasWidthRequired / 2);\n\n  // Initialize the canvas\n  const canvasComponent = new CanvasComponent(canvasElement);\n  canvasComponent.setMaxWidthAndHeight(actualMaxHeight, actualMaxWidth);\n\n  /**\n   * Hover event handler\n   */\n  canvasComponent.onHover((color) => {\n    hoveredColorId = color;\n    requestAnimationFrame(root, canvasComponent, {\n      x: xStart + getXPositionFromGivenHorizontalNodePosition(left+1),\n      y: getCanvasHeightFromTreeHeight(0.5),\n    }, Boolean(highlightMode));\n  });\n\n  // Recursively draw all nodes\n  requestAnimationFrame(root, canvasComponent, {\n    x: xStart + getXPositionFromGivenHorizontalNodePosition(left+1),\n    y: getCanvasHeightFromTreeHeight(0.5),\n  }, Boolean(highlightMode));\n}\n\nexport default drawPrettyBinaryTree;\n","import {CanvasComponent} from '.';\nimport theme from '../config/theme';\nimport BinaryTreeNode from '../tree/BinaryTreeNode';\nimport {Point} from '../types/Point';\nimport {\n  getCanvasHeightFromTreeHeight,\n  getCanvasWidthFromMaxNodeSpacing,\n  getXPositionFromGivenHorizontalNodePosition,\n} from '../utils/tree';\nimport {IndividualInputOptions, PathArray} from './types';\nimport connectPointsWithBezierCurve\n  from '../utils/connectPointsWithBezierCurve';\n\n/**\n * The current animation frame that is going on\n */\nlet animationFrameId: number;\n\n/**\n * Array of all children that needs printing\n */\nlet globalPathArray: PathArray;\n\n/**\n * Current color that is being hovered on\n */\nlet hoveredColorId: string;\n\n/**\n * Map storing the colorId to the path array\n */\nlet colorIdToPathMap: Map<string, PathArray> = new Map();\n\n/**\n * Clear the existing animation frame if any and request an animation frame\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} comp\n * @param {IndividualInputOptions} options\n */\nfunction requestAnimationFrame(\n    root: BinaryTreeNode<string | number>,\n    comp: CanvasComponent,\n    options: IndividualInputOptions,\n) {\n  // Clear existing animation frame\n  if (animationFrameId) {\n    cancelAnimationFrame(animationFrameId);\n  }\n\n  // Request a new one\n  animationFrameId = window.requestAnimationFrame(\n      () => animationFrameCB(root, comp, options),\n  );\n}\n\n\n/**\n * Get the node height from print array\n *\n * @return {number}\n */\nfunction getNodeHeightFromGlobalPathArray() {\n  return globalPathArray.length + 1;\n}\n\n\n/**\n * Get the node width from the print array\n *\n * @return {{\n *  left: number,\n *  right: number\n * }}\n */\nfunction getNodeWidthFromGlobalPathArray() {\n  let left = 0;\n  let right = 0;\n  let current = 0;\n\n  for (const childDirection of globalPathArray) {\n    if (childDirection === 'left') {\n      current -= 1;\n    } else {\n      current += 1;\n    }\n    if (current < 0) {\n      left = Math.max(Math.abs(current), left);\n    } else {\n      right = Math.max(current, right);\n    }\n  }\n\n  return {\n    left, right,\n  };\n}\n\n/**\n * Draw single node\n *\n * @param {BinaryTreeNode} node\n * @param {CanvasComponent} comp\n * @param {PathArray} pathArray\n * @param {Point} position\n * @return {boolean} Weather redraw is required\n */\nfunction drawSingleNode(\n    node: BinaryTreeNode<string | number>,\n    comp: CanvasComponent,\n    pathArray: PathArray,\n    position: Point,\n) {\n  const {x, y} = position;\n  const doesNodeHaveChildren = Boolean(node.left || node.right);\n  node.nodeCircle.setCoordinates(x, y);\n\n  // Grow or shrink while hover\n  const colorId = node.nodeCircle.draw(comp);\n  colorIdToPathMap.set(colorId, pathArray);\n  if (colorId === hoveredColorId && doesNodeHaveChildren) {\n    return node.nodeCircle.grow();\n  } else {\n    return node.nodeCircle.restoreCircle();\n  }\n}\n\n/**\n * Draw both the children if required\n *\n * @param {BinaryTreeNode} node\n * @param {CanvasComponent} comp\n * @param {number} xPosition\n * @param {number} nodeHeight\n * @param {PathArray} pathArray\n * @return {boolean}\n */\nfunction drawChildren(\n    node: BinaryTreeNode<string | number>,\n    comp: CanvasComponent,\n    xPosition: number,\n    nodeHeight: number,\n    pathArray: PathArray,\n) {\n  const currentHeight = getCanvasHeightFromTreeHeight(nodeHeight);\n  const childHeight = getCanvasHeightFromTreeHeight(nodeHeight + 1);\n  let requiredRedraw = false;\n\n  // Draw the left child\n  if (node.left) {\n    const currentPathArray : PathArray = node.left.left || node.left.right ?\n      [...pathArray, 'left'] : [...pathArray];\n    const xLeft = xPosition - (0.5 * theme.leafNodeSpace);\n\n    requiredRedraw = drawSingleNode(\n        node.left,\n        comp,\n        currentPathArray, {\n          x: xLeft,\n          y: childHeight,\n        },\n    ) || requiredRedraw;\n    connectPointsWithBezierCurve(comp, {\n      xStart: xPosition,\n      xEnd: xLeft,\n    }, {\n      yStart: currentHeight + node.nodeCircle.getRadius(),\n      yEnd: childHeight - node.left.nodeCircle.getRadius(),\n    });\n  }\n\n  // Draw the right child\n  if (node.right) {\n    const currentPathArray : PathArray = node.right.left || node.right.right ?\n      [...pathArray, 'right'] : [...pathArray];\n    const xRight = xPosition + (0.5 * theme.leafNodeSpace);\n\n    requiredRedraw = drawSingleNode(\n        node.right,\n        comp,\n        currentPathArray, {\n          x: xRight,\n          y: childHeight,\n        },\n    ) || requiredRedraw;\n    connectPointsWithBezierCurve(comp, {\n      xStart: xPosition,\n      xEnd: xRight,\n    }, {\n      yStart: currentHeight + node.nodeCircle.getRadius(),\n      yEnd: childHeight - node.right.nodeCircle.getRadius(),\n    });\n  }\n\n  return requiredRedraw;\n}\n\n\n/**\n * Draw all the nodes by following print array\n *\n * @param {BinaryTreeNode} root\n * @param {CanvasComponent} comp\n * @param {number} xRootPosition\n * @return {boolean} - Weather animated redraw is required\n */\nfunction drawAllNodes(\n    root:BinaryTreeNode<string | number>,\n    comp: CanvasComponent,\n    xRootPosition: number): boolean {\n  // Draw root\n  let currentNode = root;\n  let xPosition = xRootPosition;\n  let currentNodeHeight = 0.5;\n  const currentPathArray: Array<'left' | 'right'> = [];\n  let requiredRedraw = drawSingleNode(root, comp, [...currentPathArray], {\n    x: xPosition,\n    y: getCanvasHeightFromTreeHeight(currentNodeHeight),\n  });\n\n  // Draw all the children according to the path\n  for (const currentPath of globalPathArray) {\n    requiredRedraw = drawChildren(\n        currentNode,\n        comp,\n        xPosition,\n        currentNodeHeight,\n        currentPathArray,\n    ) || requiredRedraw;\n\n    if (currentPath === 'left') {\n      currentNode = currentNode.left!;\n      xPosition = xPosition - (0.5 * theme.leafNodeSpace);\n      currentPathArray.push('left');\n    } else {\n      currentNode = currentNode.right!;\n      xPosition = xPosition + (0.5 * theme.leafNodeSpace);\n      currentPathArray.push('right');\n    }\n    currentNodeHeight += 1;\n  }\n\n  // Draw the children of the last element in the path\n  requiredRedraw = drawChildren(\n      currentNode,\n      comp,\n      xPosition,\n      currentNodeHeight,\n      currentPathArray,\n  ) || requiredRedraw;\n\n  // Return if redraw is required\n  return requiredRedraw;\n}\n\n/**\n * Animation frame call back function that will recursively be called.\n * In case animation is required\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} comp\n * @param {IndividualInputOptions} options\n */\nfunction animationFrameCB(\n    root: BinaryTreeNode<string | number>,\n    comp: CanvasComponent,\n    options: IndividualInputOptions,\n) {\n  // Height and width calculations\n  const nodeHeight = getNodeHeightFromGlobalPathArray();\n  const {\n    left: leftNodeWidth,\n    right: rightNodeWidth,\n  } = getNodeWidthFromGlobalPathArray();\n  const requiredHeight = getCanvasHeightFromTreeHeight(nodeHeight + 1);\n  const requiredWidth = getCanvasWidthFromMaxNodeSpacing(\n      leftNodeWidth+rightNodeWidth,\n  );\n  const actualHeight = Math.max(requiredHeight, options.maxHeight);\n  const actualWidth = Math.max(requiredWidth, options.maxWidth);\n  const xStart = (actualWidth/2) - (requiredWidth/2);\n\n  // Set the height and width\n  // This also clears the canvas. So no need to clear it manually.\n  comp.setMaxWidthAndHeight(actualHeight, actualWidth);\n\n  // Initialize color id to path map\n  colorIdToPathMap = new Map();\n\n  // Draw and check if redraw is required\n  const requiredRedraw = drawAllNodes(\n      root,\n      comp,\n      xStart + getXPositionFromGivenHorizontalNodePosition(leftNodeWidth + 1),\n  );\n  if (requiredRedraw) {\n    requestAnimationFrame(root, comp, options);\n  }\n}\n\n/**\n * Draw an expandable binary tree\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {HTMLCanvasElement} canvasElement\n * @param {IndividualInputOptions} options\n */\nfunction drawExpandableBinaryTree(\n    root: BinaryTreeNode<string | number>,\n    canvasElement: HTMLCanvasElement,\n    options: IndividualInputOptions,\n) {\n  // Initialization\n  const comp = new CanvasComponent(canvasElement);\n  globalPathArray = [];\n\n  /**\n   * Click event handler\n   */\n  comp.onClick((color) => {\n    globalPathArray = colorIdToPathMap.get(color) || globalPathArray;\n    requestAnimationFrame(root, comp, options);\n  });\n\n  /**\n   * Hover event handler\n   */\n  comp.onHover((color) => {\n    hoveredColorId = color;\n    requestAnimationFrame(root, comp, options);\n  });\n\n  // Draw frame\n  requestAnimationFrame(root, comp, options);\n}\n\nexport default drawExpandableBinaryTree;\n","import CanvasComponent from './Canvas';\nimport BinaryTreeNode from '../tree/BinaryTreeNode';\nimport theme from '../config/theme';\nimport {\n  getCanvasHeightFromTreeHeight,\n  getMaxLeafNodesFromHeight,\n  getRequiredAndActualHeightAndWidth,\n} from '../utils/tree';\nimport {\n  HorizontalStartAndEndInput,\n  IndividualInputOptions,\n} from './types';\nimport connectPointsWithBezierCurve\n  from '../utils/connectPointsWithBezierCurve';\n\n/**\n * Recursively draw all the nodes\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} canvasComponent\n * @param {number} currentLine\n * @param {HorizontalStartAndEndInput} horizontalConfig\n */\nfunction recursivelyDrawNodes(\n    root: BinaryTreeNode<string | number>,\n    canvasComponent: CanvasComponent,\n    currentLine: number,\n    horizontalConfig: HorizontalStartAndEndInput,\n) {\n  // X Calculation\n  const {xStart, xEnd} = horizontalConfig;\n  const xPosition = (xStart + xEnd) / 2;\n\n  // Y Calculation\n  const yPosition = currentLine * theme.lineHeight;\n\n  // Draw the node\n  root.nodeCircle.setCoordinates(xPosition, yPosition);\n  root.nodeCircle.draw(canvasComponent);\n\n\n  // Draw the left child nodes\n  // Radius is added and subtracted from y to move the line outside the circle\n  if (root.left) {\n    recursivelyDrawNodes(root.left, canvasComponent, currentLine+1, {\n      xStart,\n      xEnd: xPosition,\n    });\n    connectPointsWithBezierCurve(canvasComponent, {\n      xStart: xPosition,\n      xEnd: (xStart + xPosition) / 2,\n    }, {\n      yStart: yPosition + theme.radius,\n      yEnd: getCanvasHeightFromTreeHeight(currentLine + 1) - theme.radius,\n    });\n  }\n\n  if (root.right) {\n    recursivelyDrawNodes(root.right, canvasComponent, currentLine+1, {\n      xStart: xPosition,\n      xEnd,\n    });\n    connectPointsWithBezierCurve(canvasComponent, {\n      xStart: xPosition,\n      xEnd: (xPosition + xEnd) / 2,\n    }, {\n      yStart: yPosition + theme.radius,\n      yEnd: getCanvasHeightFromTreeHeight(currentLine + 1) - theme.radius,\n    });\n  }\n}\n\n/**\n * Draw an explandable binary tree\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {HTMLCanvasElement} canvasElement\n * @param {IndividualInputOptions} options\n */\nfunction drawSimpleBinaryTree(\n    root: BinaryTreeNode<string | number>,\n    canvasElement: HTMLCanvasElement,\n    options: IndividualInputOptions,\n) {\n  const heightOfTree = root.getHeight();\n  const maxNumberOfLeafNodes = getMaxLeafNodesFromHeight(heightOfTree);\n  const {maxHeight, maxWidth} = options;\n\n  // Max height and width requirements\n  const {\n    maxCanvasWidthRequired,\n    actualMaxHeight,\n    actualMaxWidth,\n  } = getRequiredAndActualHeightAndWidth(\n      maxNumberOfLeafNodes,\n      heightOfTree,\n      maxWidth,\n      maxHeight,\n  );\n\n  // Init calculation\n  const midPointInCanvas = actualMaxWidth / 2;\n  const xStart = (midPointInCanvas - maxCanvasWidthRequired / 2) +\n  theme.leafNodeSpace;\n  const xEnd = (midPointInCanvas + maxCanvasWidthRequired / 2) -\n  theme.leafNodeSpace;\n\n  // Initialize the canvas\n  const canvasComponent = new CanvasComponent(canvasElement);\n  canvasComponent.setMaxWidthAndHeight(actualMaxHeight, actualMaxWidth);\n\n  // Recursively draw the tree\n  recursivelyDrawNodes(root, canvasComponent, 0.5, {xStart, xEnd});\n}\n\nexport default drawSimpleBinaryTree;\n","import BinaryTreeNode from '../tree/BinaryTreeNode';\nimport {VisualizationType} from '../enumns/VisualizationType';\nimport drawPrettyBinaryTree from './drawPrettyBinaryTree';\nimport drawExpandableBinaryTree from './drawExpandableBinaryTree';\nimport drawSimpleBinaryTree from './drawSimpleBinaryTree';\nimport {MainInputOptions} from './types';\n\n\n/**\n * Draw a binary tree in one of the given types\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {HTMLCanvasElement} canvasElement\n * @param {Partial<MainInputOptions>} options\n */\nfunction drawBinaryTree(\n    root: BinaryTreeNode<string | number>,\n    canvasElement: HTMLCanvasElement,\n    options: Partial<MainInputOptions> = {},\n) {\n  const {\n    type = VisualizationType.SIMPLE,\n    maxHeight = window.innerHeight,\n    maxWidth = window.innerWidth,\n  } = options;\n\n  switch (type) {\n    case VisualizationType.PRETTY:\n      drawPrettyBinaryTree(root, canvasElement, {\n        maxHeight,\n        maxWidth,\n      });\n      break;\n\n    case VisualizationType.EXPANDABLE:\n      drawExpandableBinaryTree(root, canvasElement, {\n        maxHeight,\n        maxWidth,\n      });\n      break;\n\n    case VisualizationType.HIGHLIGHT:\n      drawPrettyBinaryTree(root, canvasElement, {\n        maxHeight,\n        maxWidth,\n        highlightMode: true,\n      });\n      break;\n\n    default:\n      drawSimpleBinaryTree(root, canvasElement, {\n        maxHeight,\n        maxWidth,\n      });\n      break;\n  }\n}\n\nexport default drawBinaryTree;\n","import CanvasComponent from './Canvas';\nimport drawBinaryTree from './drawBinaryTree';\n\nexport {\n  CanvasComponent,\n  drawBinaryTree,\n};\n","export * from './VisualizationType';\n","export * from './theme';\n","export * from './tree';\nexport * from './canvas';\nexport * from './enumns';\nexport * from './config';\n","import { BinarySearchTreeNode, drawBinaryTree } from \"binary-tree-visualizer\";\r\n\r\nconst resultBtn = document.getElementById(\"btn\");\r\nconst nodesValues = document.getElementById(\"nodeData\");\r\nconst output = document.querySelector(\".result canvas\");\r\nconst result = document.querySelector(\".result\");\r\nconst error = document.querySelector(\".error\");\r\n\r\nresultBtn.addEventListener(\"click\", inputToList);\r\nfunction inputToList(e) {\r\n  e.preventDefault();\r\n  if (nodesValues.value == \"\") {\r\n    error.style.display = \"block\";\r\n    return;\r\n  } else {\r\n    result.style.display = \"block\";\r\n    error.style.display = \"none\";\r\n    const data = nodesValues.value.split(\" \");\r\n    console.log(typeof data);\r\n    const list = [];\r\n    data.forEach((values) => {\r\n      list.push(parseInt(values));\r\n    });\r\n\r\n    buildATree(list);\r\n  }\r\n}\r\nfunction buildATree(list) {\r\n  const root = new BinarySearchTreeNode(list[0]);\r\n  for (let i = 1; i < list.length; i++) {\r\n    root.insert(list[i]);\r\n  }\r\n  drawBinaryTree(root, output);\r\n}\r\n","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\n        location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}