{"version":3,"sources":["../../src/config/theme.ts","../../src/shapes/Circle.ts","../../src/utils/getRandomColor.ts","../../src/tree/BinaryTreeNode.ts","../../src/tree/BinarySearchTreeNode.ts","../../src/tree/index.ts","../../src/utils/getRGBString.ts","../../src/helpers/ColorGenerator.ts","../../src/canvas/Canvas.ts","../../src/enumns/VisualizationType.ts","../../src/utils/tree.ts","../../src/strokes/BezierCurve.ts","../../src/utils/connectPointsWithBezierCurve.ts","../../src/canvas/drawPrettyBinaryTree.ts","../../src/canvas/drawExpandableBinaryTree.ts","../../src/canvas/drawSimpleBinaryTree.ts","../../src/canvas/drawBinaryTree.ts","../../src/canvas/index.ts","../../src/enumns/index.ts","../../src/config/index.ts","../src/index.ts","../src/app.js"],"names":["resultBtn","document","getElementById","nodesValues","result","querySelector","message","error","resetBtn","textFont","radius","fontSize","strokeColor","colorArray","borderColor","bgColor","leafNodeSpace","lineHeight","addEventListener","inputToList","value","innerText","style","display","e","key","preventDefault","setTimeout","data","split","list","forEach","values","push","parseInt","some","isNaN","innerHTML","buildATree","hasDuplicates","dupli","tellsDuplicates","elem","root","BinarySearchTreeNode","i","length","insert","set","Set","add","size","res","counts","num","Object","hasOwnProperty","call","window","matchMedia","matches"],"mappings":";;AqBAA;;;;AFAA,AVAA,ASAA,AEAA,IXAY,iBAAZ;ADAA,AQCA,AFAA,ADAA,AECA,AfAA,AOFA,ANCA,AUCA,APFA,ADAA,ASCA,ANDA,AJCA,MFCM,KAAK,GAAU;AmBFrB,AnBGE,AkBHF,AEAA,EpBGE,MAAM,EAAE,EADW;AQDrB,AQCA,AFEA,ADAA,AEDA,AIHA,AnBIE,ASJF,ASAA,AfCA,ASCA,AQFA,CXAA,CTIE,SSJU,WTIU,EAAE,IAFH,ASFrB,EAA6B;AUA7B,AnBKE,ASJA,ASDF,APKA,AUJA,ADDA,EpBKE,ASJA,EYAIA,EVIA,OUJS,ErBIA,CqBJGC,CrBID,AWAjB,CAAiB,CXHI,ASDnB,CAAA,IYAwB,CAACC,YZAzB,CAAA,CYAgB,CAAwB,KAAxB,CZAhB,AYAF,CZAE,GAAA,CAAA,CAAA,GAAA,QAAA;AOEF,AFOA,ADDA,AEGA,AIZA,AnBME,ASJA,ASFF,AXEA,ANGA,AUsBE,APzBF,ADAA,ADCA,AQHA,AWEA,ADFA,EpBME,ASJA,EYAIC,QrBIM,EAAE,CqBJG,CrBAI,EqBADF,CZAlB,CAAA,MYA0B,CAACC,UZA3B,CAAA,GYAkB,CAAwB,IZA1C,CAAA,GAAA,CAAA,CAAA,AYAkB,CAApB,EZAE,QAAA;AUFF,AnBOE,ASJA,ASHF,AGGA,ADHA,EpBOE,ASJA,EYAIE,MrBII,AqBJE,ErBIA,CqBJGH,CrBDM,KSCnB,CAAA,CYAqB,CAACI,aAAT,CAAuB,CZApC,CAAA,OYAa,CAAf,IZAE,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA;ADCF,AQAA,AGJA,AnBQE,ASJA,ASJF,ANQA,ASJA,ADJA,EpBQE,ASJA,EYAIC,MrBII,CqBJG,CrBID,EqBJIL,KZAd,CAAA,CTFmB,CqBEG,CAACC,cZAvB,AYAc,CZAd,AYAsC,SAAxB,CAAhB,CZAE,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA;AUJF,AnBSE,ASJD,ASLD,AXKA,ANGA,AGHA,AiBAA,ADLA,CXAA,CTSE,CSTU,CYKNK,EdAA,ANGA,AGHA,GGAG,AcAE,GdAC,AcAEN,CrBID,COJb,CPIe,CCDC,GAAG,CQRU,AYKP,CAACI,CpBGvB,EDNqB,EIGrB,QiBAc,CjBCJ,AiBD2B,QAAvB,CAAd,SZLY,KLKZ,CAC2B,WKNE,GAAA,EAAA,CAA7B;AOMA,AFOA,ADGA,AEDA,AIfA,AnBUE,AkBVF,AXOA,ANGA,AGOI,ADbJ,AGIA,AINA,AWIA,ADNA,EpBUE,EqBJIG,KfEG,GNEG,AqBJE,ErBIA,CACV,AqBLaP,MfEjB,CAAsB,CeFG,CAACI,CfE1B,EAAmC,KAAnC,EAAkD,GeFjC,CfEjB,AeFwC,EfEsB,MeF7C,CAAjB;AbCA,AWPA,AnBWK,AkBXL,AZSE,AJDF,AmBDA,ADPA,IpBWK,EQJC,GFEG,AJDA,EFGG,EAAE,GMFE,GAAG,EEFnB,CAAqB,ARIjB,CEHJ,CICwB,EJDD,GICM,KAAK,EeFzB,EfE6B,GAApC;AEqCA,AW9CF,AnBWyB,AkBXzB,AZUC,AJDC,AmBDAI,ADRF,ECQEA,ErBGuB,IEFjB,EmBDE,EAAE,GrBGwB,EAAE,IqBJ7B;APST,ADGA,AInBA,AjBWI,AGJJ,AEPA,AHSS,AmBAPC,EAAAA,CrBCY,CcMV,ADGA,AXVK,ECFH,EkBEE,EAAE,EAFD,QPST,ADGA,AVZA,CAAoB;AaCpB,AFUA,ADGA,AbnBqB,AOQrB,ANGA,AEeE,ADnBM,AmBCNC,ADTF,CpBCA,CqBQEA,IdAI,ANGA,ACJiB,ImBCb,EpBGV,AoBHY,CpBGA,CoBNH,CfKM,KCFf,ALDE,CKCkB;ASDpB,ACRA,AjBcA,AOLA,ANkCE,AURA,APdE,ACrBJ,AOcA,AVLE,AmBEAC,EdFF,AI0BE,APdE,AiBVFA,ILHI,GZaK,AQPF,AVLA,CEYG,GGZZ,AI0BE,AUxBW,CVyBP,CK5BS,AZaJ,AiBVI,CdFf,CHY0C,CYbiB,CL2BzD,AT1BiB,CAAC,CS4Bd,CK7ByD,EdCvC,AmBHf,CLEkD,AdClC,CS0BvB,CK3BF,CL8BM,ET7Bc,CS0BlB,AT1B6B,ES8BzB,ET9B6B,CS0BjC,AT1BkC,CUKpC,CD0BM,ACzBF,GDoBF,CT1B6B,CS+Bf,IT/B+B,MUK/C,EAEI,EVPqD,CAAC,MAAtC,CAAD,CAAjB,KUKF,EAGI,cAHJ,EAG4C;AIP5C,ATAE,AIgCE,APpBE,AQHN,AVTC,AQHK,AWKJC,ADZF,ECYEA,OXLc,CCmCN,APpBE,EiBVA,EAAE,CACV,EjBSE,CAAc,KAAd,WMfA,CAAoC,UAApC,EAAsD;AF2C1D,AGRS,APnBN,AQHH,AFZA,AWMIC,ADdN,EZkDE,EapCIA,EV4BK,CAAC,CCtBJ,CDsBM,ADlCL,IF0CP,AE1CO,CF0CK,AE1CL,CCkCC,AU5BO,EboCf,AE1CO,AWMU,CXNV,CF0C2B,AE1C3B,EAAM,GWKX,OXLqB,GAAC,CAAjB,CAAP;AFsBA,AMVF,ADGA,AEDA,AJoBsB,APjBlB,AQLK,AFXR,AWMKC,ADfN,INoBI,ADGA,ADHK,ASLHA,EV2BgB,CAAC,EIpBd,AJoBgB,CCtBjB,CSLK,EAAE,EnBHA,GWWf,CCHA,UCEA,CACI,IADJ,EAEI,eAFJ,EAGI,WAHJ,EAII,gBAJJ,EAIgD;ADJhD,ADGA,AEGE,ARfQ,AI6BA,ARVR,ASZe,AFTjB,AWEI,ADbJ,EjBgCE,CkBpBY,CTQG,ASdR,IVoC0B,CJ7BzB,GAAA,CI6BN,ARVF,CAAY,CInBE,CAAN,GJmBR,EAAoB;AYHpB,ARdA,AI4BE,ARVA,ASbI,ASFNC,ADlBF,ECkBEA,ITEuB,EGSjB,CZIC,CQUC,IRVN,CkBfW,ElBeE,AkBfA,EAZR,GlB2BL,ASbF;AJaQ,AOJD,AfVH,AWwBK,ARTP,ASbF,ASFAC,ADnBF,ECmBEA,ENUO,EJcE,CAAC,CCtBJ,CJYE,ARdM,AWwBF,ARTL,CYLD,EMVI,CVwBF,CUxBI,GrBAR,CAAmB,CGerB,GAAkB,IAAI,GKDhB,GAA+B,EAA/B,ARdJ,EAAmD,KGenC,CACd,GAAG,KAAK,EADM,EAEd,eAAM,MAFQ,EAGd,8BAHc,CAAlB;AKiBA,AOtBa,AfTf,AC8BA,AUPkB,ARJjB,ASlBM,ASfA,ADNT,CCMA,CpB4CE,EcrBe,AHRR,EDsBW,CAAC,CXvBb,CWuBe,CHQb,AI9BF,GX6BN,CACI,EOAU,GAAG,APDjB,EAEI,MODqB,APDzB,COC0B,CPEtB,YOFa,CAAuB,APDxC,EAGsC,MOFrB,CAAf;AAEA,AM5BJ,ADGA,AECQ,AfRJ,ACHF,AUyBQ,ARFR,ASpBe,ASCjBjB,ADtBA,INyBI,ADGA,AbPA,AYAa,EGQQ,EJcM,CHUtB,Aa/BA,CrBDC,AqBCAkB,CVqBN,CHUA,CRhCS,CaOb,CLyBe,GAAX,AM5BJ,AdJkB,CAAC,GeQjB,GfTM,CqBER,CAA2B,OAA3B,EAAoCC,WAApC;AbgCI,AQrCJ,AFUA,ADGA,AEAE,AfRE,AOJM,AI0BN,ACvBI,ASERX,ADvBA,IpBsBI,EYDqB,EGSjB,AMPA,Cb+BC,AQrCA,ATCC,AcKDU,CVqBC,IJ1BA,CCoCN,EOxBa,ARZC,CCoCA,ADpCR,EQYU,AHTlB,CGSmB,ECbrB,CRqCI,AQpCA,AhBIoB,CqBCxB,CAA0B,CNOC,AfRA,CgBL3B,EAEI,ADW0B,EfRE,CAAC,AqBCjC,CNOoB,CMPe,GNOG,CAApC,CAJ8C,CAM9C,ECfF,EAGI,EKGqC,KLHrC,ChBAI,EgBAiC,EAHzC,EAG2C;ARmCvC,AQjCF,AhBCE,AOHF,AIwBS,APdP,AQRF,ASEAf,ADxBF,EhB8BI,AiBNFA,ErBDE,EWqBO,CAAC,CKtBJ,AJAA,CJiCC,AGXK,CPdF,CAAC,EOcH,ACtBG,ASEA,CAACiB,EjBMF,AQRI,CZCC,AYDA,CRQ0B,CiBNzC,CrBDkB,EqBCE,Cb+BlB,AIjCmB,CSErB,CrBDuB,CQgCC,ARhCA,AYDA,IJiCI,AIjCd,IAAkB,CAAhC,IZFM,cQmCkB,EAAtB;AACD,AQjCC,ADUF,AfTE,ACHM,AUuBU,APbd,AQRJ,ASEAd,EAAAA,ELFE,AhBCA,EWoBgB,CAAC,CKrBb,ADUA,AHVA,CXFE,AUuBa,AUnBd,CjBMG,AiBNFe,CLFC,EJAE,CZCC,ECHJ,AWEM,CGUC,AfTA,AYDA,CRQX,CHVsB,AGUP,AiBNnB,CNQkB,CdZV,CDGY,AqBCA,CrBDC,AYDA,CRQjB,AiBNJ,ETFwB,IAAV,CGUe,EfbvB,Cea0B,AHVA,CAAhC,CAN0C,CAQ1C,WIF2B,CDUW,KCXhC,KDWN,CAP8C,CAS9C;APuBA,AQlCE,AhBCA,ACQF,AUWQ,APZL,AMfC,AWSJjB,ADzBF,ECyBEA,ELFE,AhBCA,IWmB2B,AUlBvB,CXTQ,AWSPkB,EVkBL,EKpBS,ChBCC,AqBCZ,CAAaC,CLFC,ChBCC,KgBDK,AhBCA,AqBCpB,CLFqB,AhBCA,EqBCE,MAAvB,ErBNM,CgBEA,ONLF,CAA2C,QAA3C,EAA2D;AMQ7D,AFKJ,ACME,AfVE,AWmBA,APXA,AQRF,AFRA,AWSAf,ENSA,AMTAA,ELFE,AFKA,AdJA,EeUE,CAAC,CHVC,CFRC,CC2BC,AD3BA,AWSA,CAACc,CLFC,AhBCA,GgBDG,AhBCA,CqBCb,CNSA,AMTeC,CNSC,ALlBA,EIYE,AdJA,AYAA,CIDC,AhBCA,AURA,CMOC,ANPb,CIYsC,AFJxB,CSCrB,EXTwB,CIYyB,AFJxB,ASCA,ErBPnB,CcUuC,EAA/C,ACME,CAA+B,AMT/B,QXT8B,CKkB9B,EAA0C,GHVrB,CACjB,KGSJ,CLlBA,SESU,WADW,EAEjB;AINE,AFUR,ACKE,AfVE,AOJM,AIsBC,ACjBJ,AFTN,AWSA,AD3BD,CCsBA,CNcE,EfVE,AYCG,CAAC,CIFF,ADWA,AJQK,CIRJ,AJQK,ACjBF,ELLA,AIsBI,IKvBZ,ATCQ,AIsBA,ACjBJ,EZDS,COJE,CQcf,ARdQ,CQcQ,AfVA,IeUhB,CAAqB,AfVA,CAAC,WAPhB,GeiBN,EAX8C,CAc9C;ACZA,ADaA,AfbE,AO4BH,AIXmB,ARClB,ASlBgB,AFPlB,AWQApB,AD5BA,EjB6CE,EHlBE,AYAc,CAAC,CDiBC,CAAC,ACjBA,CIAb,CLiBe,ARCd,CAAC,CkBjBC,CrBDC,AqBCAe,GrBDG,AGkBN,EAAyB,GHlBd,CAAC,EgBAE,GAAG,EKC1B,CAA6B,MLDM,CAAC,AKCpC,EAAsC,CLDZ,CAAc,QKCDM,CAAD,EAAO,ELDnB,KACxB,IAAI,eAAJ,CAAoB,aAApB,CADA;AAEA,AhBVM,AOKN,ANWQ,AUSA,AREN,ASnBE,ASEJ,AD7BF,EJ6BE,CJJqB,EAGjB,CZAA,AqBCAA,CAAC,CVewB,AUfvBC,CpBME,AEWD,CFXC,CeNC,ALeP,AUfE,CLAM,CfMU,AEWlB,CFXmB,CeNrB,AfMQ,CeNM,AbiBA,AkBjBA,KlBiBZ,CH3BF,CqBUA,EAAuB,ILAvB,EAA6B,eAA7B;AR+BA,AOnBA,AfXA,ACOA,AUSE,ARCD,ASnBI,ASEHN,AD9BJ,EZ4DE,AR9BA,EYFK,ASEHA,CTFI,CGaF,CfXC,AYFG,CZEF,CWgBC,CILC,CAAC,CHbL,CJgCO,CR9BX,AWgBE,CILF,AMXa,Cb8BF,Aa9BGK,CNWC,AfXA,AWgBA,AUhBF,CAAX,IVgBA,CXhBF;AQ+BE,AQ9BF,AHMF,AEKI,AfXF,AWgBE,AREF,ASrBe,ASGd,AD/BH,EpB+BE,EeWE,AHda,CAAC,EZGX,AYHa,CZGZ,CaMC,AFUA,CHcC,AQ9BA,IAAR,CLgBE,GAAc,MILM,AJKpB,CILqB,GfXvB,CeW2B,CFL7B,AEK8B,CFJ1B,AbP2B,GeWP,CFLxB,CEKoC,CFHhC,cEGoB,AfXtB,CaMF,CEKqD,CFFjD,QAHJ,EAII,AEC4D,GAAC,CAAzC,EAA4C,OFLpE,EAI0B;ALoBf,AQ7BP,AHWF,AEAI,AfXJ,AWgBE,ACpBE,ASIL,ADhCD,CC4BA,CrBIE,CYPqB,EAIjB,CJgCK,AOlBL,CfXC,CAAC,CgBAC,ALgBA,GHaC,AOnB0D,GJMhE,GAAc,GXhBhB,GAAsB,AWgBpB,aXhBF,SgBAyB,MAAvB;AR6Be,AQ5Bb,AHWJ,AEAI,AfXJ,AWgBE,ACpBG,AQ7BP,EpBiCE,EYJK,CAAC,CJgCW,AKjBb,AEAA,CfXC,AYJG,CZIF,CWgBC,CILC,CHfJ,CGeM,CJKR,GAAY,EXhBd,EWgBE,CXhBiB,CaWnB,EAAsB,ObXtB,UgBAyB,IAArB,EAA2B,eAA3B,EAA4C;AR4BxC,AQ3BF,AHWJ,AEHgE,AfRlE,ACMQ,AUUN,APXA,AQVY,ASIhB,ADjCA,EpBkCE,AIKE,ESMA,ADhBY,CGaQ,AHbP,CGab,CfRG,AYLY,CJgCS,AQ3BpB,AhBAA,AIKE,CHCA,AUUD,APXE,AiBNFL,CpBOC,GOqBuB,APrBX,AUUlB,CVVmB,AGDb,CHCA,COqBN,AGXY,APXG,CYN+B,ChBChD,EWgBE,AUjBJ,CrBCqB,AqBDAK,CAArB,ERYwB,AQZA,CRYC,MbXvB,UaWsB,CAApB;ALiBA,AQ3BI,AFGR,ADQG,AEAC,AfXF,ACmBE,AUHA,APXE,AQXA,ASKJA,ADlCF,EpBmCE,AqBDAA,CROwB,ADhBH,ASSpB,CRcD,AQdEE,CTJE,EZKC,CgBAC,AhBAA,CQ2BC,AMxBA,AbgBA,AUHA,IAAL,CVGA,EDnBF,AWgBc,CVGC,CoBpBf,Cb4BE,AR3Be,CWgBf,EHWkB,APRlB,KDnBF,GcGF,CNwBI,AMvBA,CNuB4B,CAA5B,EAA+B,AMxBnC,CNwBI,CMtBA,CNsBkC,GMxBtC,ENwBI,AMrBA,ENqByC,EOhBZ,GDRjC,CNwBI,CMrB+B,UCK/B,EAA8C;APiB/C,AQ9B+C,AFUhD,ACII,AfXJ,AOPA,AN0BE,AUHA,APXE,AQXC,AFJD,AU1BN,EpBoCE,AOPA,EKCK,CAAC,CGiBF,CCdA,AhBGC,AYNG,CZMF,AIKE,CHcD,AUHA,AD1BO,EEIV,CGiBM,CJKR,APXW,CWMD,ERlBE,AIuBA,CJvBC,CHYG,CJLlB,CWgBE,EXhBkB,AOPN,AN0BZ,CcT8C,AXLzB,CGZuB,CN0BvB,GGdnB,EAA0B,GJL9B,KCmBE,cS7BE,CAAsD,KAAtD,EAAmE;AFuCvE,AQ5BI,AFOJ,ACII,AfXJ,AOPE,AN0BA,AUHA,APXI,AQZQ,AFHd,AWQA,ErBEA,EYPc,CAAC,CEcX,ACIA,AMbAvB,CrBEC,AYPY,CZOX,COPC,AN0BA,AUHA,AD1BC,CKqBA,EAAE,CAAC,AJKT,CJvBA,AGHK,EVUP,AWgBc,CD1BG,AWQF,CdLC,AcKAiB,CNaC,AfXA,AOPA,CIuBf,EGTF,ACIoB,CdQlB,AoBrBE,CPSkB,APdA,EN0BE,CDnBxB,AqBFyB,EdLR,AcKjB,ENaU,AMbmB,CXRN,CHGQ,EQkBE,CRlBjB,IAAsB,GAApC,EGHF;AIkBE,ADIF,AEHgD,AfRjD,AOPE,AN0BG,AUHF,APXG,ADWL,ASxBI,AFFL,AWQGb,ADnCJ,EPgDE,AVKA,CS7BqB,CEoBnB,AFpBF,ASWEA,CNUA,AXPe,CHkBb,AGZA,CWIC,EJKE,AUlBA,ClBkBC,AkBlBAe,ClBkBC,EQAP,EUlBA,CVkBY,ARAN,AkBlBMC,ERaE,AVKiB,CFGhB,CUHf,CELiB,AZQA,EoBrBjB,CPSoB,CAAC,COTC,CRaC,AZOD,CYPE,KQbxB,QPSoB,CAApB,ODIiB,CAA6B,MAAK;AGVnD,AFOD,ADIC,AEAE,ARjBJ,ANyBI,AUHH,ARAC,ASvBF,AFFF,AWOInB,ETLF,CESiC,CAOjC,ADEE,AQbAA,ENaE,AdQA,GenBG,AbgBA,CkBlBC,CAACkB,CNaC,EAAE,AZKV,ASvBU,CAAC,CSKX,ClBkBa,AkBlBAC,ERaE,ADlBjB,CCkBkB,AZQA,AW1BA,EX0BE,AEHlB,CYLmB,CMbnB,ENasB,CMbC,CpBmBD,GYNtB,EQbA,ETL+B,CAAC,KGkBJ,KCXL,AJPP,CGiBb,CHjBL,QIOE;AACE,AHWF,AEAE,AdQA,AUFJ,ARDC,ASvBF,ASKGjB,ADrCJ,ICqCIA,ENaE,AdQA,IYRI,AEAA,CMbC,CNaC,AMbAe,GrBEG,ACmBA,EAAE,IoBrBb,EpBqBmB,CYRC,AQbA,EpBqBE,AoBrBtB,CRauB,cZQK,IenBD,EHWgB,CACvC,CGZF,EAA+B,CHWU,CEAL,CFC5B,OZIY,GcL2B,ECX/C,CDWkD,CCXF,ADW1C,CFAmC,EAChB,CED8B,OFAd,EACN,MED0B,OFApB,CAA3C;AGVI,ADQD,AdWD,AGdA,ADYJ,AkBnBEd,ADtCJ,ICsCIA,CNOA,CdcE,EenBE,AZKE,CiBPD,CAACc,GjBOK,EHcA,CGdG,CYNoC,AfoBrC,EoBrBb,EjBOmB,EHcA,GAAG,AGdpB,EAAwB,aHcE;AelBxB,AFON,ADIE,AEAD,AdGuB,AGTlB,AiBPJM,ADvCJ,ENgDE,EOTEA,CpBgBA,GedI,AHWA,ETNI,IiBPE,CjBOG,AQZF,ASKA,GPSG,CVFV,EUEa,AVFE,CSMnB,EAAoB,GCJG,AOTR,CPSS,qBAAP,CACf,MAAM,gBAAgB,CAAC,IAAD,EAAO,IAAP,EAAa,OAAb,CADP,CAAnB;AEToD,AFYrD,ADEK,AZQH,AGdO,AiBPNpB,ADxCJ,MPqDM,AQbFA,CLDE,IKCG,CAACc,CjBOK,IAAL,CAAU,GiBPhB,GjBOM,CAAiB,ESMA,CAAC,ETNlB,ESMiB,EAAO,eAAP,EAAwB,QAAxB,EAAkC,aAAlC,CAArB;AGVA,AFWN,ADAK,AEAH,AdSA,AGfQ,AiBPL,ADzCL,KCuCc,CNeR,CMbA,GNaI,CAAC,AMfG,CAAV,INeF,EAAgB;APgBhB,AKfC,AEAC,AXNK,AiBPL,AD1CJ,EZsEE,CKtBmB,CAAnB,AEOE,kBPekB,CAAC,COfC,CAAC,IPeH,AOfO,CAAC,CPeS,IOff,CPeF,COfe,CPee,cOf5B,EAA8B,WAAW,GAAC,CAA1C,EAA6C;APgBjE,AQ1BA,AHWH,AEAK,AMbH,AD3CH,GCkCE,GNsBI,GPeG,AQ1BA,AKFA,GNaG,EAAE,CPeV,CAAY,MAAZ,COhBiE,EPgB5C,KAAK,GAAL,CAAS,MAAT,GAAkB,GQ1BhB,GR0BvB,MQ1BA;AR2BA,AQ1BE,AHYN,AEDM,ARnBJ,AIuBA,APXM,AMfF,AWSFjB,AD5CJ,EbsCE,AIuBA,EUjBEA,ENaE,AJIA,CAAC,EHWE,AErCO,CC0BV,AUjBI,CjBMG,AiBNFkB,CViByB,EJvBtB,CCkCV,CAAY,Aa5BZ,CdNU,AcMGC,CjBMT,CAAa,EIsBjB,EJtBqB,CIsBD,Aa5BpB,GAAuB,Eb4BE,GAAL,CAAS,Aa5B7B,Kb4BoB,AErClB,CAAwC,EFqCL,AQ1Bd,EZIN,CAAyB,CYJxC,CR0BF,CQ1B6B,EZIZ,AMff,CNeE,CMfwD,WMW1D,EAA4C;AR2B/C,AQ1BK,ADQ6D,ARhBjE,AIuBA,APXI,AMfN,AWSEhB,AD7CJ,IT8DI,AUjBAA,CNUoB,CAApB,CJOG,CKfC,ALeA,CD1BE,AWSD,CAACe,KAAN,CAAYC,CLCkC,ALgB9C,ED1BK,GAAe,CWSpB,GAAsB,MAAtB,KXT0B,UAA5B;AFuCA,AQ3BM,ADWJ,ARnBA,AIuBA,APXG,ADWL,AO1BD,AWSGf,AD9CJ,EjB+DE,EQAE,AUjBAA,CjBRe,CAgBb,COSC,CKfC,ALeA,EJvBE,CJuBC,CkBjBC,CAACc,CViBT,ARAO,CIvBI,AIuBA,CKjBmC,ETNhC,AcMd,CAAeC,CViBC,MAAhB,AUjBA,EViBwB,CUjBC,IViBI,EUjB7B,IViBA,MJvB2B,EQmBE,GRnBG,GAAlB,EAAuB,KAAK,EQmB1C,EAA8C,CRnBhC,EAAmC,KAAK,IAAxC,CAAd,CAFU,CAIV;ASOI,ADWF,AJIF,ADzBJ,AWQI,IViBA,EIJE,CJIC,CKfC,ALeA,AUjBEK,INaE,AMbE,ENaA,CMbGzB,IViBb,EKfiB,CLeC,CKfC,ADU2B,GMZtB,CViBD,AUjBEiB,KViBzB,AUjBa,CAAkBS,KAAlB,CAAwB,GAAxB,CAAb;ALD8C,AFalD,ACEM,ARlBF,AIsBA,AUjBA,IViBA,EIJE,CCfA,ALmBC,CAAC,AUjBEC,CPWD,APhBA,CQkBC,EAAE,AMbE,CNaD,EMbI,EAAb,IViBA,CIJkB,AJKd,CJvBJ,CAAoB,CQkBC,EJKZ,EILD,CRlBR,CIsBA,EIJ6B,AJMzB,KAAK,GGRb,CHMI,EGNqC,AHSjC,KAAK,IAHT,EAII,KAAK,IAJT,EAKI,KAAK,IALT,EAMI,KAAK,IANT;AKdE,AFSJ,ACDgD,AJc9C,APlBE,ADSF,AkBfAF,IVwBA,AUxBAA,CNUA,EAGG,AJWA,CAAC,APlBE,AiBNF,CPWC,AOXAG,ClBeC,GCTK,COkBX,EUxBA,CAAa,CjBMX,EAAgB,ADSF,GAAG,CWJC,AXID,CWJE,AXIF,EAAA,AkBfLC,GlBeK,CWJd,EOXQ,CPWiB,CAAhC,AXI0B,AkBfC,IlBeN,MAAS,IAAT,IAAS,EAAA,KAAA,KAAA,CAAT,GAAS,KAAA,CAAT,GAAS,EAAA,CAAE,SAAF,EAAT,KAA0B,CAA7C;AWHH,ACEK,ARnBF,AN0BM,AUIP,APlBK,ADSJ,AkBfEF,EpBoBI,IcPJ,AMbAA,EdNE,EJqBE,AkBfA,CjBMG,AiBNFG,CNaC,AdOQ,CM1BP,AN2BP,CcRQ,CMbR,CpBoBc,AGdZ,AiBNQC,CdNR,AHYW,CHgBb,EM5Bc,CJqBC,EYFE,ARnBnB,AHYI,CHcY,AGdM,ADSF,AkBfA,CdNC,AJqBD,AkBfCF,CNaC,AdUpB,AERkB,EAAA,CCThB,EHcY,AELI,AkBfA,CAAlB,CpBuBa,GERU,KYFG,AZER,MYHjB,AZG2B,IAAV,IAAU,EAAA,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAU,EAAA,CAAE,SAAF,EAAV,KAA2B,CAA/C;AaZA,AFWJ,ACAM,ARnBA,AN8BF,AGlBI,ADSJ,AkBfC,KAFD,CNeE,IAAI,AdWA,CM9BC,AJqBA,CYFC,GZEG,CAAC,GAAL,CAAS,KIrBd,CAAoB,IJqBf,EAAqB,CIrB1B,UJqBK,IAAoC,CAA3C,KYFsC,WAAW,GAAG,CAA5C,IAAiD,eAAM;ACV7D,ADQC,AdaI,AUzEM,APwDV,ADSJ,KYRC,CdgBO,CAAD,kCerBiB,IAArB,EAA2B,eAA3B,EAA4C;AR0BhD,AQzBM,ADWL,ARpBG,AN6BQ,AoBvBV,Eb4BF,IPLY,EepBN,AKHAF,EdNE,EcME,CAACK,Eb4BE,ADlCA,ESQmC,AKF1C,Cb4BO,Aa5BGC,EdNR,GAAa,AcMf,CAAJ,EdNE,AcMoB,EdNE;ACmCxB,AQzBI,ADWP,ARpBO,AN4BE,AGhBJ,ADvDc,AkBiDdhC,MAAAA,ELGE,AfmBW,CGhBR,CIsBD,EPNN,AoBtBQ,Cb4BC,ADlCA,AcMAkB,EVyBE,CHGC,CJtBV,CAAc,AiBNd,CAAaC,Eb4BE,CJtBG,IiBNlB,Cb4BU,ADlCR,CCkCoB,ADlCA,CcMC,IdNrB,EcMF,Gb4BU,CAAuB,GJtBnB,CIsBJ,AJtB6B,CIsBzC,IJtBgB,CAAd;AYL4C,AHalD,AEEA,ARrBO,AN6BH,AGjBC,AiBNChB,IpBuBF,EoBvBEA,CLAA,AfuBC,CAAC,CYVC,EQbE,CAACe,KpBuBR,AoBvBE,CAAYC,KRalB,CACI,CQdE,GRaN,AQb4B,ERexB,IAFJ,CQbM,CRgBF,QAHJ,EAII,aAJJ,EAI0B;ALWtB,AQxBE,AHeJ,ANxBG,AN6BD,AGhBA,AiBPEhB,IpBuBF,CMxCU,CAaV,AcIEA,CpBuBC,COIC,AKTA,AZKA,COIC,Ea3BE,Cb2BP,Aa3BQ8B,Eb2BE,CLZC,EFQX,GAAgB,CoBvBd,GACE,CpBsBJ,+DoBvBE;Ab4BA,AQrDJ,AH2CO,AZML,AoBtBEV,IRgBG,AZML,CYNI,CQhBFA,CpBsBC,CAAC,GAAJ,COIQ,APJA,CAAR,EAAW,COIC,APJZ,AoBtBY,CAAC,CpBsBC,GOIN,CAAU,EPJlB,EAAsB,CAAtB,EAAyB,AoBtBR,IpBsBY,CAAC,EAAL,GAAU,CAAnC,EAAsC,GOI9B,CAAN,CPJF;AOKC,AQxBJ,AHaW,AZOR,AoBtBEpB,IReM,AZOR,GAAG,CAAC,AoBtBFA,IpBsBF,CoBtBO,CAAC8B,SAAN;AReE,ANrBJ,AN6BD,AoBtBI,MRcU,CQhBD,EAER,EdPG,EcKK,CRgBd,AQhBI,EdLF;ACkCA,AKZF,ANrBC,AN8BD,AoBvBI,ERcJ,IAAI,CAAC,ILYI,GAAP,CQxBW,EHYb,CAAgB,cAAhB,CAA+B,CAA/B,EAAkC,CAAlC,EAHwB,CAKxB;ALWC,AMfH,AOXK,SPWI,+BAAT,GAAwC;ANiBtC,AMhBA,ADIA,ANtEkB,MOkEd,EDIE,ECJE,GAAG,CAAX,CDIa,GAAG,IAAI,CAAC,UAAL,CAAgB,IAAhB,CAAqB,IAArB,CAAhB;ACHA,AJrBI,AWUFC,IAAAA,EPWE,GJrBU,EIqBL,GAAG,AOXA,CPWZ,AOXaR,IAAD,CAAV,uBXVE,CACF,cADE,EAEF,YAFE,EAGF,QAHE,EAIF,SAJE,EAIe;AIkBnB,ADGA,AEFF,AXRI,AMTF,ENSE,IUOE,ADGA,EHnBE,CKiBC,IDDI,ADGA,ATVE,EGZA,COmBC,AVPD,CUOb,CDGgB,WEFlB,CACI,ALlB0B,EGmBxB,CHnB2B,CKiBjC,EFEoC,AEAhC,aFAF,EAAiD,AEFnD,EAGI,OAHJ,EAGmC,GLpB8B,CAC3D,cAD2D,CAA/D;AGoBE,AEEF,AXZI,AMPJ,AWEE,QNiBI,AXZE,AMPF,AWEAS,GReG,ETVI,ESUA,CAAC,CTVV,EAAe,CWYD,CMjBC,CAACT,CNiBC,GFFZ,AQfU,CReM,AEEA,AMjBvB,CNiBwB,CMjBC,ERelB,AHjBoB,EGiB3B,CHjB8B,GKmBX,EAArB,wBLnB6D,CAAC,YAAY,GAAC,CAAd,CAA7D;AIeA,ADGC,AEED,AXZM,AMPN,AWEI,GRaJ,ICDK,CCKC,ALnBA,CGiBC,CQfGU,GPYC,AVPE,EiBLE,GjBKG,AiBLAC,IjBKL,AMPO,CNOG,EMPA,EIcvB,CCK0B,GDLG,ACKA,EMjBI,CjBKpB,AiBLqBX,EjBK5B,EiBL2B,CAA7B,OPYJ,CJd6C,CIcC,EJdE,QAAzB,GACrB,OKkBqD,YAA1B,CAA7B,ELnBuB,GACI,QAD3B;AIeE,ADGA,AEEF,AdKQ,AGjBH,AMNL,AWCIxB,EpBsBI,IoBtBJA,EPYE,ACKA,ALlBA,GGgBG,CZOS,CAAC,AoBtBR,CAACe,CReC,CAAC,AZOI,EAA8B,IaV5B,CJbC,AWCjB,GReK,AHhBe,AWElB,CPWmB,ADGA,MCHvB,EAA+B,KDGxB,EAAP,OHhB6C,GAAG,SAA1B,GACtB,uBADsB,GACI,SAD5B,GWCI;APaA,ADGH,AECM,AdML,ASrBF,AWAImB,INeG,EDJH,AOXAA,GXAG,CTqBC,CoBrBC,CAACT,CPWC,ACIL,IDJS,CAAX,COXA,CAAc,UAACW,IAAD,EAAU;Ab0B5B,AMdG,ADGJ,AEAmB,AdMT,AGjBL,AMHF,AWAIpC,EbyBN,EOXkB,ALdhB,CISA,CbWO,CAAD,CoBpBFA,GPWG,AVRE,CIsBD,GAAA,AJtBN,AiBHS,CAACe,SAAR,EXDC,EWCoB,MAAMqB,IAAN,GAAa,IAAlC;Ab0BJ,AMdE,ADIN,AEFQ,AdMM,AGhBT,AMHD,AWAG,IXAH,EIWE,ACE0B,AdMlB,CAAJ,AoBrBJ,Gb2BI,GAAG,AMdA,ACEX,CAJiC,CAMjC,CPUc,CMdC,CAAX,GNce,GAAL,CAAS,CE3BhB,SF2BO,CAAoB,IAApB,CAAZ;AMbC,AbOY,AGdb,AMJA,AWAC,IXAD,CWPA,CpByBa,KoBlBNpC,OAAO,CpBkBR,ASrBD,AWGUe,SAAR,GAAoB,iCAApB;AbyBP,AOVF,AdG8B,ASjB5B,AWAD,IXAC,ETiB4B,EOOxB,AOVA,CPUC,GAAL,EAAU,MPPgC,EAAE;AOQ1C,AMdF,ACIA,AdE6C,ASrBxC,AWKR,GXLC,CKmBE,IDJI,AbMyC,IOQrC,GMdG,CNcC,EMdE,CAAd,ENcQ,AMdS,AbMyC,COQxC,CPR0C,GcHxD,mBPWI,CAAN;AACD,AMdC,ACIF,AdC4C,ASf/C,IKcG,EDJE,IAAI,GAAG,IAAI,CAAC,CCEV,EDFK,CAAS,IAAI,CAAC,GAAL,CAAS,OAAT,CAAT,EAA4B,IAA5B,CAAP;AACD,ACID,AdAM,AoBfV,INeI,CDNA,GbMuE,CoBflEiB,EPWE,CbIP,OoBfJ,CAAoBR,IAApB,EAA0B;Ab0BtB,AMdE,ACAE,AdIJ,AoBfF,MPWI,ACIA,AMfEa,IpBeE,AoBfE,CbyBD,AMdA,EOXI,CbyBX,AMdU,GOXKC,CPWD,CAAC,GAAL,CAAS,OAAT,EAAkB,KAAlB,CAAR,cCKA,OMhBS,CAAyBd,IAAI,CAAC,CAAD,CAA7B,CAAb,INeI,EAEA,YAFA,EAGA,QAHA,EAIA,SAJA,CAJJ,CAPiC,CAkBjC;APIC,AMdE,AbGM,MAAA;AOaT,AMfC,ACUD,AdRQ,AoBdR,OAAK,CNsBC,AdRkB,GoBdfe,CAAC,GAAG,CAAb,EAAgBA,CAAC,EpBcf,CoBdkBf,ENsBE,EMtBE,CNsBC,AMtBAgB,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC,CNsBC,GAAG,CAA1C;AACA,AdPE,AoBfAF,IpBeA,AoBfAA,GpBeG,CcOC,AdPA,AoBfA,CAACI,EpBeL,CAAQ,CAAR,CcOU,CdPC,AoBfX,CpBeA,AoBfYjB,CNsBE,CdPA,EoBfE,CAACe,CAAD,CAAhB,CpBeA,EAAsB,CAAtB,EAAyB,IcOK,AdPD,CAAC,EcOG,AdPR,GAAU,CAAnC,EAAsC,KAAtC,WcOuD,GAAG,CAA7C,GACf,eAAM,aADN;ADTA,ACWA,AdRE,AoBfD,IpBeC,GAAG,CcQC,AdRA,CaHC,GCWG,GAAI,IdRZ,GAAkB,ScQU,EdR5B,CcQ+B,sBAAsB,GAAG,CAA7C,GACb,eAAM,aADN,CAtBiC,CAyBjC;ADbE,ADGJ,AZAI,IaHA,AbGA,GAAG,CaJE,AbID,CYAC,KZAL,eYAJ,CACI,IADJ,EAEI,eAFJ,EAGI,QAHJ,EAII,aAJJ,EAI0B;ACPhB,ADSR,AEKA,AdVC,AGXC,AiBLF,EN0BA,AXrBE,EUOM,IDSF,QThBU,CWqBD,AXpBT,CWoBU,KXrBA,EACsB,aWoBtC,CAAqC,KM1BtBF,IAAf,EAAqB1C,IN0BrB,EAAsD,EM1BzB,CAACI,WN0B9B,EA1BiC,AMAZ,CN4BrB,AM5B4C,QAAvB,CAArB;APWO,ADUA,AZHP,AGVI,AiBPL,GPUC,CDUO,CAAC,EAAE,SAAJ;ACPP,ADOsB,AEQrB,AXpBI,EWoBJ,EFRqB,CAAC,EAAE,GTZd,YWoBU,CAAC,CXpBG,GWoBJ,AXpBO,CAAA,CWoBA,KXpBM,KAAA,IAAN,CWoBP,EAAwB,CXpBjB,EWoBP,EAA6B,EXpBhB,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,IAAR,MAAiB,IAAjB,GAAwB,MAAxB,GAAiC,OAAxD,CAHkC,CAKlC;AIkBJ,AMbF,ADKQ,AEQ4C,AM3BpD,Eb2BE,EOAkD,EFRb,GQnB9BkC,CN2B0C,IPArC,AKRZ,CAFwB,CAIxB,CLMY,Ka3Bd,CAAuBT,IAAvB,EAA6B;Ab4BzB,AODwD,AXjBtD,AiBTJ,IN0B0D,EM1BtDkB,EjBSI,CAAC,AiBTF,Eb2BE,Ca3BC,EjBSI,EIkBA,Aa3BAC,EjBSN,CiBTE,EAAV,CjBSsB,CAAC,KAAK,EIkBnB,CAAoB,EJlBzB,EAA+B,QIkB1B,EAAP;AACD,AKPD,AEKiD,AXhB3C,GWgBc,CAApB,EFLI,ITXM,MAAJ,EAAY,ESWA,GAAG,cAAc,CAC/B,IAD+B,EAE/B,eAF+B,EAG/B;ALMJ,AKNK,AEGN,AXhBS,AiBZmB,IRyBtB,CAAC,EAAE,QTbO,CSaX,KTbiB,CAAC,cAAD,CAAb,QiBVQnB,IAFW;ARyBR,ATZZ,AiBboB,IRyBR,CAAC,EAAE;AAAlB,AZJI,EAAA,CYC2B,EAI/B,MZLa,CAAC,GcSL,AdTI,EAA8B,CYCZ,CAAnC;AAMA,AZNE,AGRI,AiBdqB,ER4B3B,IAAI,CAAC,GZNG,GGRK,CAAC,GScd,CAAgB,ATdH,CAAP,aScN,CAA+B,SAA/B,EAA0C,SAA1C;AACA,AZPS,AGPJ,AiBbL,ER2BA,GTzBsC,CSyBlC,AZPK,AGLL,CSYC,AZPG,UYOR,CAAgB,IAAhB,CAAqB,eAArB,EAZwB,CAcxB;AZTY,AoBpBZ,MpBoBY,CAAJ,GoBpBGe,CAAX;AR8BA,AZVe,AoBpBOG,MpBoBP,AoBpBOA,ER8BhB,CQ9BmB,CAACE,CpBoBlB,EoBpBc,CAAQL,CAAR;AbkCtB,AKJO,AZVe,AGJlB,AiBhBJ,EbkCA,EKJO,EZVe,EYUhB,ATdE,CIkBD,CAAC,EAAD,CJlBM,CIkBe,GJlBpB,IAAa,CAAC,KAAK,KAAvB,EAA8B;AImBhC,AMdJ,ADSe,AZVL,AGHF,AiBnBqB,IRgCd,IZV0B,CaChC,CVJG,EHGR,IGHI,EAAY,KUIpB,CACI,IADJ,EAEI,IAFJ,EAGI,SAHJ,EAII,QAJJ,EAImB;ANWf,AMTF,ADGM,AZTJ,AGHM,AiBpBmB,MRgCL,ELMhB,AMTA,AVTE,EHGA,GOeG,CJlBG,CAAC,CSYiB,CAAC,GAAX,CAAe,CLMnC,EAAoB,CKNA,CAAtB,CAfwB,CAiBxB,CTdc,CAAN,GAAyB,KAAK,IAA9B;AImBJ,AMVG,AbNE,AGFF,AiBrBoB,IP6BpB,CAAD,CbNG,KOgBA,GAAL,CAAS,mBAAT,CAA6B,WAA7B,EAA0C,KAAK,SAA/C;AACD,AMXO,ADMV,AZZQ,AoBvBmB,IP6BjB,CNOkB,CAM1B,AKPE,EZZoB,EYYhB,CAAC,IAAT,EAAe,IZZb,CAF6C,CAI7C;AaII,ADOJ,ATdI,AiBtBqB,MP6BZ,IDOP,GTdK,CUOb,AVPc,IAAD,EScK,ATdE,GScC,ETdI,IAAZ,CAAP,GScyB,CAAC,GAAX,CAAe,IAAI,CAAC,IAApB,EAA2B,IAA9C;ACNF,ADOE,AZXA,AGHG,KALD,GUYE,EDOE,AZXA,CGHG,IAAI,GHGC,EGHI,CHGD,GYWG,AZXA,CGHP,EScU,CCPC,CVPG,CAAC,CUOD,IVPM,CScD,ECPE,CAAC,ADOA,AZXT,AGHjB,EAA8B,EUOA,CAAC,GbJN,CaIC,GbJnC,CaIgD,EDOP,ECPW,CAAC,KAAnB,CAApC,CDOE;ALMA,AMZF,ADOE,AZXA,AGHI,AiBrBN,EP4BA,IAAI,AO5BAf,CP4BC,ENYE,CKLC,AZXA,AGHE,AiBrBF,CAACgB,KjBqBH,CUON,AO5BI,CbwCF,AMZc,AbJA,AGHE,GImBE,APhBD,AoBxBAE,CRmCC,EQnCE,CRmCC,AQnCAG,CbwCJ,GaxCnB,CbwCyC,CaxCZ,CP4B7B,CAA+B,CAA/B,EAAkC,AbJT,CaIzB,CO5BoC,CPwBnB,CAMjB,EO9B6B,EpBwBV,GAAe,CAAhC;AOiBE,AKLA,AZVF,AGJM,AiBrBR,IpByBE,EYUE,CAAC,AZVA,CAAC,AGJE,CScD,AQnCA,GbwCG,EJnBI,AiBrBd,CjBqBe,EHIb,CYUc,EZVE,CYUC,QTdL,CAAN,CHIN,EGJ+B,KAAK,KAA9B,iCSeA,IAAI,GAAG,UADI,CADI;ALMZ,AMVX,ADQI,AZZF,AGJK,AiBrBR,IpByBG,EYYE,CAAC,AZZA,COcM,AMVL,AbJA,CYYC,GZZL,COcQ,EMVG,AbJA,GaIG,AbJA,IaII,CAAC,GbJG,IAAI,GaIZ,CAAgB,IAAhB,CAAqB,IAArB,CAAhB,CbJkC,QAAQ,EAAxC;AOcgB,AMTlB,ADGuB,AZPrB,EaIF,EbJE,CYOA,EZPG,COaa,APbZ,SAAJ,CaIc,CAAC,CbJC,EaIlB,CAAqB,KbJnB,EaIF,EAA8B,SAA9B;ANSU,AKCR,AZbA,AGLI,AiBrBR,IRuCI,AZbA,GAAG,CAAC,CoB1BCV,CbsCoB,GJjBd,CAAC,CIiBV,CPZF,CAAa,CYaC,ATlBH,EAAO,CSkBD,CZbjB,EAAoB,AoB1BxB,CpB0BI,AGLuB,AiBrBFX,EpB0BE,CAAC,CoB1B5B,CjBqBe,CHKgB,AGLvB,AiBrBuB,QpB0B3B,EYaqC,CACjC,IAAI,CAAC,IAD4B,EAEjC,eAFiC,EAGjC,YAHiC,EAIjC,aAJiC,CAApB,IAKZ,cALL;ALAE,AMTJ,ADeE,AZlBD,AGLI,AiBrBL,KjBHsC,CUgClC,AVNA,AiBvBAsB,GAAG,GbsCG,AatCA,CP6BC,GO7BGH,EP6BE,CO7BN,EAAV,WP6BI,IAA8B,WDeH,SCf/B,EAAwD,IDetD,EAA8C;ALNrC,AMRT,ADeE,AZjBJ,AGHI,AiBxBJ,MR4CI,AQ5CAI,EbqCO,GMRF,CNQM,AKOL,AQ5CA,EbqCO,AKOL,CCfC,AO7BA,CP6BC,CO7Bd,MR2CgD,GCdvC,CAAgB,IAAhB,EAAP;ANQQ,AMPT,ADeG,GCjBJ,GDiBI,GCfG,CNOmB,AKQlB,EAAE,GLRqB,SKQT,CAAC,GLRG,GAAqB,YAArB,CAClB,KAAK,GAAG,KAAK,GAAL,CAAS,UADC,EAElB,KAAK,GAAG,KAAK,GAAL,CAAS,SAFC,EAGlB,CAHkB,EAGf,CAHe,CAAtB,CAFqC,CAQrC;AMZF,ADY8C,AQ7CnB,KR6C3B,EAGG,ICfI,IAAI,CAAC,UAAL,CAAgB,aAAhB,EAAP,IO9BgBvB,IAHW;Ab8CzB,AMZH,ADeG,ATtBA,AiB3ByB,MRiDzB,ITtBM,CAAC,CImBD,AKGA,EAAE,GLHG,GAAG,EJnBR,CSsBW,GAAG,ATtBE,ISsBE,CAAC,ATtBE,KAAL,CAAY,ISsBd,CAAgB,CTtBd,CACpB,GIkByB,EJlBpB,ESqBa,CLHY,CAAC,AKEhC,CLF+B,AJlB9B,CIkBY,AJlBA,EIkBuB,KAAK,CAAC,CAAD,CAA5B,CJlBZ,CIkB6C,EJlBnB,GIkBwB,CAAC,CAAD,AJnB9B,CImBR,CAAd,AJlBmC,IADb,CAAtB,CA7BkC,CAiClC;AUIL,ADeK,ATlBA,MSkBA,IAAI,EAAE,cAAc,GAAG,IAAI,CAAC,IAAL,CAAU,UAAV,CAAqB,SAArB;ALHvB,AMVN,ADWO,AQhDwB,KR6C3B,KLEM,KAAK,oBAAL,KAA8B,KAAlC,EAAyC;AACvC,AKIL,ATnBG,AiB9BJ,GRQwB,CA2CxB,ATrBI,SIeO,EJfK,CAAC,IAAb,GAAoB,KAAK,IAAzB,CIeE,GAA4B,KAA5B,kBa7CkB;Ab8ClB,APfN,AGAI,AiB/BoB,EpB+BxB,EGAI,IIeE,EAAE,Aa9CGwB,Cb8CF,APfA,EoB/Be,CpB+Bf,CGAO,CIeR,AJfS,CIeX,IJfF,GAAqB,KAAK,KAA1B;AIgBC,APfH,AoB/BAD,MAAAA,IpB+BM,EoB/BA,CAACC,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAAN,GAAc,CAA5B,GAAgC,CAA9C;Ab+CC,AKIH,AZnBI,AGDA,AiB9BH,KbgCC,CAP0B,AKyBxB,AZnBA,COiBF,CJlBM,ESoBA,CAAC,GTpBL,ESoBJ,ATpBgB,ESoBA,EZnBE,EAAE;AYoBlB,AZpBmB,AGAf,AiBpCuB,MjBoCvB,EHAe,EYoBb,ETpBI,CAAC,QHAqB,CYoBd,CZpBgB,EYoBb,ETpBX,CAAN,GAAyB,ISoBE,CAAC,GAAX,CAAe,ETpBhC,ESoBoC,CAAC,KAApB,EAA4B,KAAjD;AACA,AZrBkB,AGCf,AiBrCwB,URyDrB,cAAc,GAAG,SAAS,GAAG,eAAM,UAAzC;ALHA,AKIA,AZvBM,AoBnCqB,QpBqCvB,COiBC,CKIC,ELJN,APnBA,COmBS,UKIU,GAAG,GLJtB,CAA0B,WAA1B,EAAuC,KAAK,SAA5C;AACD,AKIG,AZrBF,AGCE,AiBvCyB,MR2DzB,CAAC,EAAE,EZrBE,AGCE,CAAC,IAAD,CHDT,CYqBc,ATpBE,GSoBC,QTpBR,CAAP,8CSqBI,KAAK,GAAG,YADG,CADK;ALDxB,AKKI,AZvBH,AGCE,AiBxC0B,MR8DzB,CAAC,EAAE;AAJiB,AZjBxB,AGCE,KSgBA;AAOA,AQ3DF,IR2DE,GQ3DG,IAAM7B,GAAX,IR2DgB,AQ3DE4B,GR2DC,GQ3DnB,EAA0B,eR2Da,CACjC,IAAI,CAAC,KAD4B,EAEjC,eAFiC,EAGjC,aAHiC,EAIjC,aAJiC,CAApB,IAKZ,cALL;AClBJ,ADwBI,AQhEA,QAAIE,CPwCC,KOxCK,CAACC,MPwCf,CACI,IADJ,EAEI,CO1CI,CAAsBC,EPwC9B,EAGI,AO3CI,CAA2BJ,MAA3B,EPwCR,AOxC2C5B,EP4CvC,CO5CI,CRgEyB,AQhE7B,EAA6C,MPwCjD,EAKI,KDmBA,EAA8C,ECxBlD,EAKwB;AAEtB,ADkBI,AQhEA,MRgEA,EClBE,EO9CE4B,ERgEE,EAAE,EQhEE,CAAC5B,GAAD,CP8CK,AO9CX,ER+DwC,CCjB1B,AO9CA,CAAlB,EAAqB2B,GAAG,CAACF,GAAJ,CAAQzB,GAAR,2BP8C2B,UAA9B,CAAtB;AACA,ADkBI,AQhED,MRgEC,EClBE,EDkBE,EAAE,OClBO,GAAG,GDkBG,CAAC,qCClB0B,UAAU,GAAG,CAA3C,CAApB;AACA,ADegD,AQ7D/C,KR6DC,CCfE,CDkBC,aClBa,GAAG,KAArB,CAJsB,CAMtB;ANIA,AKaI,ELbJ,IKaI,GLbG,CAAC,EAAD,AKaG,ELbkB,AKahB,SAAS,GAAG,IAAI,CAAC,UAAL,CAAgB,SAAhB,EADnB;ALXH,AMJF,ADiBI,AZ9BJ,AoBnCA,EpBmCA,IaaI,ADiBA,AZ9BA,CAAC,EoBnCE2B,CPgDC,ADiBA,CCjBC,CDiBC,AQjEV,GPgDA,Cbbc,CaaC,EbbE,KAAK,EY8BE,GAAG,IAAI,CAAC,IZ9Bf,CY8BU,AZ9BU,CY8BC,QZ9BlC,EY8BuB,AZ9BmB,CY8BG,SAAtB;ALZzB,AMJA,ADcG,AZ3BH,AoBnCH,KR2DG,GLPI,EMJE,AbbA,GOiBG,SAAT,EAAoB,EMJE,GAAe,IAAI,CAAC,IAAL,CAAU,IAAV,IAAkB,IAAI,CAAC,IAAL,CAAU,KAA5B,GACnC,CAAC,GAAG,SAAJ,EAAe,MAAf,CADmC,GACV,CAAC,GAAG,SAAJ,CAD3B;ANKE,AMHF,ADgBD,AZ9BG,MAAA,IacI,CNGC,GAAL,CAAS,AMHA,GAAG,EbdE,EAAE,KacK,GAAI,INGzB,CAA6B,CMHE,MNG/B,EAAsC,KAAK,EMHN,ONGrC,MMHF;ANIC,AMFD,AbfI,AoBnCR,IPkDI,AOlDAM,CbgD0B,CAM1B,EPnBI,EoBnCE,CAACC,OPkDO,GAAG,AOlDjB,CAAkB,aPkDa,CAC3B,IAAI,CAAC,IADsB,EAE3B,IAF2B,EAG3B,AOrDJ,EAAmDC,OAAvD,EAAgE,KPkD7B,EAGT;AAChB,ADYR,AZhCoB,AoBjCpB,MPqDQ,CAAC,EAAE,ADYJ,KCbiB,SDaxB,eQjES;APsDD,ADYT,AZlCS,AoB/BNlD,IAAAA,EPqDM,CAAC,CblBH,CakBK,COrDH,EpB+BN,AoB/BQ,EADD;AbsDP,AMFsB,ADgB1B,AT9BI,AiBpCAM,EjBoCA,EiBpCAA,CP+C+B,CAAd,EVXX,CIgBD,AJfD,CUiBC,IVlBC,EAEF,CiBtCS,CboDb,CapDe,EboDG,CJhBZ,AiBtCC,EPiDP,AVToC,EIcnB,IAAsB;AACrC,AMEF,AbnBA,AGIE,AiBvCFC,IAAAA,IpBmCI,IOiBI,EapDE,EAAE,KpBmCK,GAAG,SAApB,EAA+B,YamBF,IAA7B,EAAmC;ANF1B,AMGP,AbnBA,AGIA,AiB3CK,GAAT,GP0DI,ENHO,AJZH,IUeE,AbnBA,COgBA,AJZG,CUeD,EVfI,KAAK,EUcgB,GVd7B,IAAsB,KHJG,AGIE,GHJC,CGIhC,EAAqC,UHJQ,GAAG,UAAhD;AOgBc,AMId,AbnBA,AGIE,AiBvCP,MPsDK,ENJc,EMIV,CbnBC,CamBC,AVfE,CAAC,WAAD,CHJR,CAAoB,EGII,KAAK,IAAL,CAAU,CHJlC,GAAoC,EGIZ,CAAiB,KAAjB,EAAwB,IAAxB,CAAtB,QHJyD,GAAG,SAA1B,GACpC,SADoC,GACxB,uBADZ;AOeM,AME2B,AbfjC,AGGE,KUYJ,EAGG,GNLsB,GPbhB,AGGE,CAAC,CIUV,EPbA,QGGS,EAAc,IAAd,CAAP;AIWF,AMKA,AblBD,AGGE,KANiC,CIgBlC,AMKA,AVbA,MUaM,CNLC,CAAC,AMKA,GNLR,CAAY,KAAZ,EAAmB,EMKE,GNLrB,AMKwB,IAAI,CAAC,UAAL,CAAgB,SAAhB,EADvB;ANHD,AMKA,MAAA,IAAI,ENLE,AMKA,WAAW,GAAG,IAAI,CAAC,IAAL,CAAU,UAAV,CAAqB,SAArB;ANLb,AMGN,AbfH,KaYA,GNAS,GPZF,COYM,EAAE,EPZf;AOYQ,AMOT,ADUH,AZ5BG,AGGG,GUZkB,CA6BtB,IVjBQ,CSyBD,CLjBmB,GJRb,EIQkB,CJRf,KAAK,KAAb,EIQkB,EJRI,CIQiB,IJRZ,ISyBrC,CACI,AT1BE,EAAsC,CIQhB,CAClB,AKgBV,EACyC,GLjB1B,GAAG,KAAK,GAAL,CAAS,UADC,EAElB,KAAK,GAAG,KAAK,GAAL,CAAS,SAFC,EAGlB,CAHkB,EAGf,CAHe,CAAtB;AAKA,AKeJ,AZ7BA,AGEM,MIYF,EAAE,AKeA,CLfC,GKeG,AT3BE,CAAC,ES2BA,IAAI,CAAC,IAAL,AT3BD,GS2Ba,CT3BG,KAAK,GIYb,EJZQ,CAAW,EIYd,CAAC,CAAD,CAAlB,CJZqB,CIYE,AJZgB,KIYX,AJZP,CIYQ,CAAD,AJZkB,CIY9C,EAAiC,CKee,AT3B3B,CS4BxB,AT5BE,GIYuC,CAAC,AKgBtC,CLhBqC,AKgBpC,CLhBF,CAAD,CAAF,CKemD,CAA9B,GAErB,GAFS,GAEJ,CAFT;ALdG,AKiBH,AT7BM,KIGJ,CAP0B,CAkB1B,CKeI,KAAK,AT7BE,CAAC,ES6BA,IAAI,CAAC,IT7BN,CS6BC,CT7Ba,ES6BA,ET7Bd,CAAP,2BS6BmD,CACrD,IAAI,CAAC,KADgD,CAA9B,GAEvB,GAFU,GAEL,CAFT;ACbA,ADgBA,AT/BK,ES+BL,GT3CsC,CU2BlC,AVbA,IUaI,CAAC,CDgBC,CAAC,GChBX,ADgBA,CAAe,CChBC,GDgBhB,EAAqB;ACfnB,ADgBA,IAAA,IADmB,ECfb,gBAAgB,GAAe,IAAI,CAAC,KAAL,CAAW,IAAX,IAAmB,IAAI,CAAC,KAAL,CAAW,KAA9B,GACnC,CAAC,GAAG,SAAJ,EAAe,OAAf,CADmC,GACT,CAAC,GAAG,SAAJ,CAD5B;ANFA,AMIA,ADeA,IAAA,KLnBK,CMIC,ENJN,CAAS,GMIG,GAAG,SAAS,CNJxB,CAA0B,CMIE,MNJ5B,AMIkC,ENJC,KAAK,QMIA,CNJxC,YMIA;ANHD,AMKC,ADWmB,AT5BjB,GS4BJ,CCXE,IVjBM,KAAK,KUiBG,AVjBR,GUiBW,EVjBI,KAAnB,EAA0B,KUiBG,CAC3B,IAAI,CAAC,KADsB,EAE3B,IAF2B,EAG3B,gBAH2B,EAGT;AAChB,ADYR,AThCM,MUoBE,CAAC,EAAE,ADYJ,GThCK,CSgCD,ECba,AVnBT,CSgCD,EThCI,GSgClB,EThCuB,cAAL,CAAoB,MAApB,CAAZ;AI1Ja,AM+KX,ADYT,AZpCC,AGIM,EHJN,IawBQ,CAAC,CbxBH,CawBK,AbxBJ,IGIM,KHJG,AGIE,GHJC,CGIb,IHJkB,cAAL,CAAoB,SAAjC,EAA0C;AasBxB,ADgB1B,AZrCI,AGII,KUc2B,CAAd,IAOZ,AbzBC,GGIK,KAAK,KAAZ,CUcJ;AAQA,AbzBE,AGIE,MHJF,OGIS,EIWA,CJXP,IHJY,EAAE,yBayBW,IAA7B,EAAmC;AACjC,AbzBE,AGID,MUqBD,EbzBE,IayBI,EAAE,SADyB;AAEjC,Ab3BgB,Ma2BhB,IAAI,EAAE;AAF2B,Ab1B7B,AGQJ,KUkBF,EAGG,CbzBC,GGIK,CHRT,EGQY,IAAH,CAAP;AUsBA,AVrBD,MUqBC,MAAM,EAAE,aAAa,GAAG,IAAI,CAAC,UAAL,CAAgB,SAAhB,EADvB;AAED,AbzBF,MayBE,EbzBE,EayBE,EAAE,SbzBS,EayBE,CbzBC,EayBE,IAAI,CAAC,EbzB3B,EAA+B,CayBT,CAAW,UAAX,CAAsB,SAAtB;AAFnB,AbtBD,AGhKqB,KUmLvB,ObnBQ,uBAAuB,GAAG,aAAa,GAAG,UAAhD;Aa0BH,AbzBG,WAAK,cAAL,CAAoB,aAApB,GAAoC,uBAAuB,GAAG,SAA1B,GACpC,SADoC,GACxB,uBADZ;AYoCN,AZlCM,SYkCG,IZlCI,EGEE,EHFT,YYkCN,CACI,IADJ,EAEI,eAFJ,EAGI,OAHJ,EAGmC;ACZjC,ADcA,AZtCG,EYsCH,OCdO,GDcG,GAAG,IAAI,GAAJ,CCdb,CDcA;ACbD,AD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","file":"app.581aa3f0.js","sourceRoot":"..\\public","sourcesContent":["import {Theme} from './types';\n\nconst theme: Theme = {\n  radius: 20,\n  growthAndShrinkTimes: 1.25,\n  leafNodeSpace: 75,\n  lineHeight: 90,\n  fontSize: 10,\n  textFont: 'Poppins',\n  strokeColor: '#f56042',\n  colorArray: [\n    {bgColor: '#fff2e0', borderColor: '#f56042'},\n  ],\n};\n\n/**\n * Set the user defined theme if required\n *\n * @param {Theme} userDefinedTheme\n */\nexport function setTheme(userDefinedTheme: Partial<Theme>) {\n  const {\n    radius = theme.radius,\n    growthAndShrinkTimes = theme.growthAndShrinkTimes,\n    leafNodeSpace = theme.leafNodeSpace,\n    lineHeight = theme.lineHeight,\n    colorArray = theme.colorArray,\n    textFont = theme.textFont,\n    strokeColor = theme.strokeColor,\n    fontSize = theme.fontSize,\n  } = userDefinedTheme;\n\n  theme.radius = radius;\n  theme.growthAndShrinkTimes = growthAndShrinkTimes;\n  theme.leafNodeSpace = leafNodeSpace;\n  theme.lineHeight = lineHeight;\n  theme.colorArray = colorArray;\n  theme.textFont = textFont;\n  theme.strokeColor = strokeColor;\n  theme.fontSize = fontSize;\n}\n\nexport default theme;\n\n","import {CanvasComponent} from '..';\nimport theme from '../config/theme';\nimport {CircleColorSettings} from '../config/types';\nimport {RadiusSettings} from './types';\n\n/**\n * Rate at which circle will grow or shrink\n */\nconst growthRate = 0.3;\n\n/**\n * Describes a circle in the canvas\n */\nclass Circle {\n  /**\n   * Radius of the circle\n   */\n  private radiusSettings: RadiusSettings\n\n  /**\n   * The colorId of the circle\n   */\n  private colorId: string = ''\n\n  /**\n   * Color of the circle\n   */\n  private colorSettings: CircleColorSettings\n\n  /**\n   * Value to be displayed inside the circle\n   */\n  private value: string\n\n  /**\n   * X Position of the circle\n   */\n  private x: number = -1\n\n  /**\n   * Y Position of the circle\n   */\n  private y: number = -1\n\n  /**\n   * For constructing a new circle\n   *\n   * @param {string} value\n   * @param {number} radius\n   * @param {CircleColorSettings} colorSettings\n   */\n  constructor(\n      value: string,\n      radius: number,\n      colorSettings: CircleColorSettings,\n  ) {\n    this.value = value;\n    this.colorSettings = colorSettings;\n    this.radiusSettings = {\n      currentRadius: radius,\n      originalRadius: radius,\n      maxRadius: radius * theme.growthAndShrinkTimes,\n      minRadius: radius / theme.growthAndShrinkTimes,\n    };\n  }\n\n  /**\n   * Draw the circle\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {number} radius\n   * @param {string} color\n   */\n  private drawCircle(\n      ctx: CanvasRenderingContext2D,\n      radius: number,\n      color: string,\n  ) {\n    const {x, y} = this;\n\n    ctx.beginPath();\n    ctx.fillStyle = color;\n    ctx.arc(x, y, radius, 0, Math.PI * 2, false);\n    ctx.fill();\n  }\n\n  /**\n   * Draw the border\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  private drawBorder(ctx: CanvasRenderingContext2D) {\n    const {x, y, colorSettings, radiusSettings: {currentRadius: radius}} = this;\n    const {borderColor} = colorSettings;\n\n    ctx.arc(x, y, radius, 0, Math.PI * 2, false);\n    ctx.strokeStyle = borderColor;\n    ctx.stroke();\n  }\n\n  /**\n   * Write the text\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  private writeText(ctx: CanvasRenderingContext2D) {\n    const {x, y, value, colorSettings} = this;\n    const {borderColor} = colorSettings;\n\n    // Decide font size\n    const fontSize = `${theme.fontSize}pt`;\n    const ySpacing = theme.fontSize/2;\n\n    ctx.fillStyle = borderColor;\n    ctx.font = `${fontSize} ${theme.textFont}`;\n    ctx.textAlign = 'center';\n    ctx.fillText(value, x, y + ySpacing);\n  }\n\n  /**\n   * Get the current radius\n   *\n   * @return {number}\n   */\n  getRadius() {\n    const {\n      radiusSettings: {currentRadius: radius},\n    } = this;\n    return radius;\n  }\n\n  /**\n   * Increase radius of the circle\n   * @param {number} maxRadius\n   * @return {boolean} - Weather size was changed\n   */\n  grow(maxRadius = this.radiusSettings.maxRadius) {\n    const {\n      radiusSettings: {\n        currentRadius,\n      },\n    } = this;\n\n    if (currentRadius < maxRadius) {\n      const originalIncreasedRadius = currentRadius + growthRate;\n      this.radiusSettings.currentRadius = originalIncreasedRadius > maxRadius ?\n      maxRadius : originalIncreasedRadius;\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Decrease the radius of the circle\n   * @param {number} minRadius\n   * @return {boolean} - Weather size was changed\n   */\n  shrink(minRadius = this.radiusSettings.minRadius) {\n    const {\n      radiusSettings: {\n        currentRadius,\n      },\n    } = this;\n\n    if (currentRadius > minRadius) {\n      const originalDecreasedRadius = currentRadius - growthRate;\n      this.radiusSettings.currentRadius = originalDecreasedRadius < minRadius ?\n      minRadius : originalDecreasedRadius;\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Bring the circle back to its original radius\n   * @return {boolean} - Weather size was changed\n   */\n  restoreCircle() {\n    const {\n      radiusSettings: {\n        currentRadius,\n        originalRadius,\n      },\n    } = this;\n\n    if (currentRadius > originalRadius) {\n      return this.shrink(originalRadius);\n    }\n\n    if (currentRadius < originalRadius) {\n      return this.grow(originalRadius);\n    }\n\n    return false;\n  }\n\n  /**\n   * Set the color id of the circle\n   *\n   * @param {string} colorId\n   */\n  setColorId(colorId: string) {\n    this.colorId = colorId;\n  }\n\n  /**\n   * Set the x and y coordinates of the circle\n   *\n   * @param {number} x\n   * @param {number} y\n   */\n  setCoordinates(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Draw the circle on the screen\n   * Draw the border\n   * Add the text\n   *\n   * @param {CanvasComponent} comp\n   * @return {string} - The color id represented by the unique color\n   */\n  draw(comp: CanvasComponent) {\n    const {\n      radiusSettings: {currentRadius: radius},\n      colorSettings: {bgColor},\n    } = this;\n\n    // Draw circle\n    this.colorId = this.colorId ? this.colorId : comp.getNextColor();\n    this.drawCircle(\n        comp.getContext(),\n        radius,\n        bgColor,\n    );\n    this.drawCircle(\n        comp.getHitContext(),\n        radius,\n        this.colorId,\n    );\n\n    // Draw border\n    this.drawBorder(comp.getContext());\n\n    // Write text\n    this.writeText(comp.getContext());\n\n    // Return the colorId\n    return this.colorId;\n  }\n}\n\nexport default Circle;\n","import {CircleColorSettings} from '../config/types';\nimport theme from '../config/theme';\n\n/**\n * Get a random color settings\n *\n * @return {CircleColorSettings}\n */\nfunction getRandomColor():CircleColorSettings {\n  const {colorArray} = theme;\n  return colorArray[Math.floor(Math.random() * colorArray.length)];\n}\n\nexport default getRandomColor;\n","import Circle from '../shapes/Circle';\nimport theme from '../config/theme';\nimport getRandomColor from '../utils/getRandomColor';\n\n/**\n * Describes a node of a binary tree\n */\nclass BinaryTreeNode<T extends string | number> {\n  /**\n   * The value of the node\n   */\n  value: T\n\n  /**\n   * The canvas circle\n   */\n  nodeCircle: Circle\n\n  /**\n   * The left child of the node\n   */\n  left?: BinaryTreeNode<T>\n\n  /**\n   * The right child of the node\n   */\n  right?: BinaryTreeNode<T>\n\n  /**\n   * For constructing a new binary tree node\n   *\n   * @param {T} value\n   */\n  constructor(value: T) {\n    this.value = value;\n    this.nodeCircle = new Circle(\n        `${value}`,\n        theme.radius,\n        getRandomColor(),\n    );\n  }\n\n  /**\n   * Set the left child\n   *\n   * @param {BinaryTreeNode} value\n   */\n  setLeft(value: BinaryTreeNode<T>) {\n    this.left = value;\n  }\n\n  /**\n   * Set the right child\n   *\n   * @param {BinaryTreeNode} value\n   */\n  setRight(value: BinaryTreeNode<T>) {\n    this.right = value;\n  }\n\n  /**\n   * Get the height of the binry tree from the node\n   * Height of root is 1\n   *\n   * @return {number}\n   */\n  getHeight():number {\n    const leftHeight = this.left?.getHeight() || 0;\n    const rightHeight = this.right?.getHeight() || 0;\n    return Math.max(leftHeight, rightHeight) + 1;\n  }\n}\n\nexport default BinaryTreeNode;\n","import BinaryTreeNode from './BinaryTreeNode';\n\n/**\n * A Binary search tree node\n */\nclass BinarySearchTreeNode<T extends string | number>\n  extends BinaryTreeNode<T> {\n    /**\n     * Left child of the node\n     */\n    left?: BinarySearchTreeNode<T>\n\n    /**\n     * Right child of the node\n     */\n    right?: BinarySearchTreeNode<T>\n\n    /**\n     * Set the left child of the node\n     *\n     * @param {BinarySearchTreeNode<T>} value\n     */\n    setLeft(value: BinarySearchTreeNode<T>) {\n      super.setLeft(value);\n    }\n\n    /**\n     * Set the right child of the node\n     *\n     * @param {BinarySearchTreeNode<T>} value\n     */\n    setRight(value: BinarySearchTreeNode<T>) {\n      super.setRight(value);\n    }\n\n    /**\n     * Insert a value into the node\n     * (Using Recursion)\n     *\n     * @param {T} value\n     */\n    insert(value: T) {\n      // Skip equal value\n      if (value === this.value) {\n        return;\n      }\n\n      // When value is lesser\n      if (value < this.value) {\n        if (this.left) {\n          this.left.insert(value);\n          return;\n        }\n        this.setLeft(new BinarySearchTreeNode(value));\n        return;\n      }\n\n      // When value is greater\n      if (this.right) {\n        this.right.insert(value);\n        return;\n      }\n      this.setRight(new BinarySearchTreeNode(value));\n    }\n\n    /**\n     * Find the minimum value from the given node\n     *\n     * @param {BinarySearchTreeNode<T>} node\n     * @return {BinarySearchTreeNode<T>}\n     */\n    findMinimum():BinarySearchTreeNode<T> {\n      if (this.left) {\n        return this.left.findMinimum();\n      }\n      return this;\n    }\n\n    /**\n     * Delete this node\n     *\n     * @param {BinarySearchTreeNode<T>} parent\n     * @return {[\n     *  BinarySearchTreeNode<T>,\n     *  BinarySearchTreeNode<T>\n     * ]} [deletedNode, currentRoot]\n     */\n    deleteThisNode(\n        parent?: BinarySearchTreeNode<T>,\n    ): [BinarySearchTreeNode<T>?, BinarySearchTreeNode<T>?] {\n      // Which direction is this node from the parent\n      const childDirection = parent?.left === this ? 'left' : 'right';\n\n      // Case 1: Delete leaf node\n      if (!this.left && !this.right) {\n        if (parent) {\n          delete parent[childDirection];\n        }\n        return [this];\n      }\n\n      // Case 2: Delete when there is only one child\n      if (this.left && !this.right) {\n        if (parent) {\n          parent[childDirection] = this.left;\n        }\n        return [this, this.left];\n      } else if (this.right && !this.left) {\n        if (parent) {\n          parent[childDirection] = this.right;\n        }\n        return [this, this.right];\n      }\n\n      // Case 3: There are 2 children\n\n      // Step 1: Delete the in order successor\n      const [deletedNode] = this.right!.delete(\n        this.right!.findMinimum().value, this,\n      );\n\n      // Step 2: Set the in order successor as the current node\n      // Deleted node will always be found\n      deletedNode!.left = this.left;\n      deletedNode!.right = this.right;\n      if (parent) {\n        parent[childDirection] = deletedNode;\n      }\n\n      return [this, deletedNode];\n    }\n\n    /**\n     * Delete a node\n     * (Using recursion)\n     *\n     * @param {T} value\n     * @param {BinarySearchTreeNode<T>} parent\n     * @return {[\n     *  BinarySearchTreeNode<T>,\n     *  BinarySearchTreeNode<T>\n     * ]} [deletedNode, currentRoot]\n     */\n    delete(\n        value: T,\n        parent?: BinarySearchTreeNode<T>,\n    ): [BinarySearchTreeNode<T>?, BinarySearchTreeNode<T>?] {\n      // Delete from left node\n      if (value < this.value && this.left) {\n        const [deletedNode] = this.left.delete(value, this);\n        return [deletedNode, this];\n      }\n\n      // Delete from right node\n      if (value > this.value && this.right) {\n        const [deletedNode] = this.right.delete(value, this);\n        return [deletedNode, this];\n      }\n\n      // Delete the current node\n      if (this.value === value) {\n        const res = this.deleteThisNode(parent);\n        delete this.left;\n        delete this.right;\n        return res;\n      }\n\n      return [, this];\n    }\n}\n\nexport default BinarySearchTreeNode;\n","import BinaryTreeNode from './BinaryTreeNode';\nimport BinarySearchTreeNode from './BinarySearchTreeNode';\n\nexport {\n  BinaryTreeNode,\n  BinarySearchTreeNode,\n};\n","/**\n * Get RGB string from red green and blue values\n *\n * @param {number} red\n * @param {number} green\n * @param {number} blue\n * @return {string}\n */\nfunction getRGBString(red: number, green: number, blue: number) {\n  return `rgb(${red}, ${green}, ${blue})`;\n}\n\nexport default getRGBString;\n","import getRGBString from '../utils/getRGBString';\n\n/**\n * The gap between 2 ids\n */\nconst gap = 10;\n\n/**\n * For generating color\n */\nclass ColorGenerator {\n  /**\n   * The red color value\n   */\n  private red = 0\n\n  /**\n   * The green color value\n   */\n  private green = 0\n\n  /**\n   * The blue color value\n   */\n  private blue = 1\n\n  /**\n   * Increment a color\n   *\n   * @param {'red' | 'green' | 'blue'} color\n   */\n  incrementColor(color: 'red' | 'green' | 'blue') {\n    this[color] = (this[color] + gap) % 256;\n  }\n\n  /**\n   * Get the next color\n   * Starts from rgb(0, 0, 0)\n   *\n   * @return {string}\n   */\n  getNextColor() {\n    // Generate the rgb value\n    const color = getRGBString(this.red, this.green, this.blue);\n\n    // Increment the color\n    this.incrementColor('blue');\n    if (this.blue < gap) {\n      this.incrementColor('green');\n      if (this.green < gap) {\n        this.incrementColor('red');\n      }\n    }\n\n    // Return the color\n    return color;\n  }\n}\n\nexport default ColorGenerator;\n","import ColorGenerator from '../helpers/ColorGenerator';\nimport getRGBString from '../utils/getRGBString';\nimport {GetColorCallBack} from './types';\n\n/**\n * Defines one canvas\n */\nclass CanvasComponent {\n  /**\n   * The canvas element\n   */\n  private $el: HTMLCanvasElement\n\n  /**\n   * This is a hidden canvas element\n   * which is used to redraw all the elements from the canvas\n   * in unique colors.\n   *\n   * This way an element can be easily identified from this hit canvas\n   * just by using the color in O(1)\n   *\n   * Otherwise to identify an element in the canvas it will take O(n)\n   *\n   */\n  private $hitEl: HTMLCanvasElement\n\n  /**\n   * The color generator for generating new color\n   */\n  private colorGenerator: ColorGenerator\n\n  /**\n   * The current hovering color\n   */\n  private currentHoveringColor: string = ''\n\n  /**\n   * For storing the on hover callback\n   */\n  private onHoverCB?: (event: MouseEvent) => void\n\n  /**\n   * For storing the on click callback\n   */\n  private onClickCB?: (event: MouseEvent) => void\n\n  /**\n   * For constructing a new canvas component\n   *\n   * @param {HTMLCanvasElement} $el\n   */\n  constructor($el: HTMLCanvasElement) {\n    const $hitEl = document.createElement('canvas');\n\n    this.$el = $el;\n    this.$hitEl = $hitEl;\n    this.colorGenerator = new ColorGenerator();\n  }\n\n  /**\n   * Clears the canvas\n   */\n  clearCanvas() {\n    const {height, width} = this.$el;\n    this.getContext().clearRect(0, 0, width, height);\n  }\n\n  /**\n   * Set the maximum width and height\n   *\n   * @param {number} height\n   * @param {number} width\n   */\n  setMaxWidthAndHeight(height: number, width: number) {\n    this.$hitEl.height = this.$el.height = height;\n    this.$hitEl.width = this.$el.width = width;\n  }\n\n  /**\n   * Get the hit 2d context\n   *\n   * @return {CanvasComponent}\n   */\n  getHitContext(): CanvasRenderingContext2D {\n    const ctx = this.$hitEl.getContext('2d');\n    if (!ctx) {\n      throw new Error('Cannot get 2d context');\n    }\n\n    return ctx;\n  }\n\n  /**\n   * Get the 2d context\n   *\n   * @return {CanvasRenderingContext2D}\n   */\n  getContext(): CanvasRenderingContext2D {\n    const ctx = this.$el.getContext('2d');\n    if (!ctx) {\n      throw new Error('Cannot get 2d context');\n    }\n\n    return ctx;\n  }\n\n  /**\n   * Get the next color from the color generator\n   *\n   * @return {string}\n   */\n  getNextColor() {\n    return this.colorGenerator.getNextColor();\n  }\n\n  /**\n   * On hover get the canvas hit color\n   *\n   * @param {GetColorCallBack} cb\n   */\n  onHover(cb: GetColorCallBack) {\n    // Clear previous listeners\n    if (this.onHoverCB) {\n      this.$el.removeEventListener('mousemove', this.onHoverCB);\n    }\n\n    // Set the callback\n    this.onHoverCB = (event: MouseEvent) => {\n      const {pageX, pageY} = event;\n      const {data: pixel} = this.getHitContext().getImageData(\n          pageX - this.$el.offsetLeft,\n          pageY - this.$el.offsetTop,\n          1, 1,\n      );\n\n      // Callback should only be called on color change\n      const color = getRGBString(pixel[0], pixel[1], pixel[2]);\n      if (this.currentHoveringColor !== color) {\n        this.currentHoveringColor = color;\n        cb(color);\n      }\n    };\n\n    // Add the event listener\n    this.$el.addEventListener('mousemove', this.onHoverCB);\n  }\n\n  /**\n   * On click of canvas get the hit color\n   *\n   * @param {GetColorCallBack} cb\n   */\n  onClick(cb: GetColorCallBack) {\n    // Clear previous listeners\n    if (this.onClickCB) {\n      this.$el.removeEventListener('click', this.onClickCB);\n    }\n\n    // Set the callback\n    this.onClickCB = (event: MouseEvent) => {\n      const {pageX, pageY} = event;\n      console.log(pageX, pageY);\n      const {data: pixel} = this.getHitContext().getImageData(\n          pageX - this.$el.offsetLeft,\n          pageY - this.$el.offsetTop,\n          1, 1,\n      );\n      cb(getRGBString(pixel[0], pixel[1], pixel[2]));\n    };\n\n    // Add the event listener\n    this.$el.addEventListener('click', this.onClickCB);\n  }\n}\n\nexport default CanvasComponent;\n\n\n","export enum VisualizationType {\n  SIMPLE,\n  PRETTY,\n  EXPANDABLE,\n  HIGHLIGHT\n}\n","import theme from '../config/theme';\n\n/**\n * Get the max number of leaf nodes from height of the binary tree\n *\n * @param {number} treeHeight - Height of the tree (number of nodes from)\n * @return {number} - Maximum number of leaf nodes\n */\nexport function getMaxLeafNodesFromHeight(treeHeight: number) {\n  return 2 ** (treeHeight-1);\n}\n\n/**\n * Maximum canvas width required from number of tree nodes\n *\n * @param {number} maxNodes - Maximum number of nodes\n * @return {number} - The max width required\n */\nexport function getCanvasWidthFromMaxNodeSpacing(maxNodes: number) {\n  return (maxNodes + 2) * theme.leafNodeSpace;\n}\n\n/**\n * Get the x position from given horizontal node position\n *\n * @param {number} nodes - The number of nodes from the left\n * @return {number} - The x position\n */\nexport function getXPositionFromGivenHorizontalNodePosition(nodes: number) {\n  return (nodes) * theme.leafNodeSpace;\n}\n\n/**\n * Get canvas height from the tree height\n *\n * @param {number} treeHeight - Height of the tree (number of nodes from)\n * @return {number} - The canvas height in px\n */\nexport function getCanvasHeightFromTreeHeight(treeHeight: number) {\n  return (treeHeight) * theme.lineHeight;\n}\n\n/**\n * Get required and actual height and width\n *\n * @param {number} maxNodeSpacing\n * @param {number} heightOfTree\n * @param {number} maxWidth\n * @param {number} maxHeight\n * @return {{\n *  maxCanvasHeightRequired: number,\n *  maxCanvasWidthRequired:number,\n *  actualMaxHeight: number,\n *  actualMaxWidth: number\n * }}\n */\nexport function getRequiredAndActualHeightAndWidth(\n    maxNodeSpacing: number,\n    heightOfTree: number,\n    maxWidth: number,\n    maxHeight: number,\n) {\n  const maxCanvasWidthRequired = getCanvasWidthFromMaxNodeSpacing(\n      maxNodeSpacing,\n  );\n  const maxCanvasHeightRequired = getCanvasHeightFromTreeHeight(heightOfTree+1);\n  const actualMaxWidth = maxCanvasWidthRequired > maxWidth ?\n    maxCanvasWidthRequired : maxWidth;\n  const actualMaxHeight = maxCanvasHeightRequired > maxHeight ?\n    maxCanvasHeightRequired : maxHeight;\n\n  return {\n    maxCanvasHeightRequired,\n    maxCanvasWidthRequired,\n    actualMaxHeight,\n    actualMaxWidth,\n  };\n}\n","import {Point} from '../types/Point';\n\n/**\n * Describes a bezier curve\n */\nclass BezierCurve {\n  /**\n   * X Configurations\n   */\n  xStart: number\n  cp1x: number\n  cp2x: number\n  xEnd: number\n\n  /**\n   * Y Configurations\n   */\n  yStart: number\n  cp1y: number\n  cp2y: number\n  yEnd: number\n\n  /**\n   * Color of the curve\n   */\n  color: string\n\n  /**\n   * Construct a new bezier curve\n   *\n   * @param {string} color\n   * @param {Point} start\n   * @param {Point} cp1\n   * @param {Point} cp2\n   * @param {Point} end\n   */\n  constructor(\n      color: string,\n      start: Point,\n      cp1: Point,\n      cp2: Point,\n      end: Point,\n  ) {\n    const {x: xStart, y: yStart} = start;\n    const {x: cp1x, y: cp1y} = cp1;\n    const {x: cp2x, y: cp2y} = cp2;\n    const {x: xEnd, y: yEnd} = end;\n\n    this.color = color;\n    this.xStart = xStart;\n    this.yStart = yStart;\n    this.cp1x = cp1x;\n    this.cp1y = cp1y;\n    this.cp2x = cp2x;\n    this.cp2y = cp2y;\n    this.xEnd = xEnd;\n    this.yEnd = yEnd;\n  }\n\n  /**\n   * Draw the bezier curve\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  draw(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    ctx.moveTo(this.xStart, this.yStart);\n    ctx.strokeStyle = this.color;\n    ctx.bezierCurveTo(\n        this.cp1x,\n        this.cp1y,\n        this.cp2x,\n        this.cp2y,\n        this.xEnd,\n        this.yEnd,\n    );\n    ctx.stroke();\n  }\n}\n\n\nexport default BezierCurve;\n","import CanvasComponent from '../canvas/Canvas';\nimport theme from '../config/theme';\nimport BezierCurve from '../strokes/BezierCurve';\nimport {\n  HorizontalStartAndEndInput,\n  VerticalStartAndEndInput,\n} from '../canvas/types';\n\n/**\n * Connect two points with a bezier curve\n *\n * @param {CanvasComponent} canvasComponent\n * @param {HorizontalStartAndEndInput} horizontalConfig\n * @param {VerticalStartAndEndInput} verticalConfig\n */\nfunction connectPointsWithBezierCurve(\n    canvasComponent: CanvasComponent,\n    horizontalConfig: HorizontalStartAndEndInput,\n    verticalConfig: VerticalStartAndEndInput,\n) {\n// X, Y Calculation\n  const {xStart, xEnd} = horizontalConfig;\n  const {yStart, yEnd} = verticalConfig;\n  const halfY = (yStart + yEnd) / 2;\n  const halfX = (xStart + xEnd) / 2;\n\n  // Draw the bezier curve\n  const berzierCurve = new BezierCurve(\n      theme.strokeColor,\n      {x: xStart, y: yStart},\n      {x: halfX, y: halfY},\n      {x: xEnd, y: halfY},\n      {x: xEnd, y: yEnd},\n  );\n  berzierCurve.draw(canvasComponent.getContext());\n}\n\nexport default connectPointsWithBezierCurve;\n","import CanvasComponent from './Canvas';\nimport theme from '../config/theme';\nimport BinaryTreeNode from '../tree/BinaryTreeNode';\nimport {Point} from '../types/Point';\nimport {\n  getCanvasHeightFromTreeHeight,\n  getRequiredAndActualHeightAndWidth,\n  getXPositionFromGivenHorizontalNodePosition,\n} from '../utils/tree';\nimport connectPointsWithBezierCurve\n  from '../utils/connectPointsWithBezierCurve';\nimport {\n  IndividualInputOptions,\n  LeftAndRightSpacing,\n} from './types';\n\n/**\n * The current animation frame that is going on\n */\nlet animationFrameId: number;\n\n/**\n * Current color that is being hovered on\n */\nlet hoveredColorId: string;\n\n/**\n * Spacing map for storing space requirements\n */\nlet spacingMap: Map<BinaryTreeNode<string | number>, LeftAndRightSpacing>;\n\n/**\n * Clear the existing animation frame if any and request an animation frame\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} canvasComponent\n * @param {Point} position\n * @param {boolean} highlightMode\n */\nfunction requestAnimationFrame(\n    root: BinaryTreeNode<string | number>,\n    canvasComponent: CanvasComponent,\n    position: Point,\n    highlightMode: boolean,\n) {\n  // Clear existing animation frame\n  if (animationFrameId) {\n    cancelAnimationFrame(animationFrameId);\n  }\n\n  // Request a new one\n  animationFrameId = window.requestAnimationFrame(() => {\n    canvasComponent.clearCanvas();\n    const requiredRedraw = recursivelyDrawNodes(\n        root, canvasComponent, position, highlightMode);\n    if (requiredRedraw) {\n      requestAnimationFrame(root, canvasComponent, position, highlightMode);\n    }\n  });\n}\n\n/**\n * Draw single node\n *\n * @param {BinaryTreeNode} node\n * @param {CanvasComponent} comp\n * @param {Point} position\n * @param {boolean} highlightMode\n * @return {boolean} Weather redraw is required\n */\nfunction drawSingleNode(\n    node: BinaryTreeNode<string | number>,\n    comp: CanvasComponent,\n    position: Point,\n    highlightMode: boolean,\n) {\n  const {x, y} = position;\n  node.nodeCircle.setCoordinates(x, y);\n\n  // Grow or shrink while hover\n  const colorId = node.nodeCircle.draw(comp);\n  if (colorId === hoveredColorId && highlightMode) {\n    return node.nodeCircle.grow();\n  } else {\n    return node.nodeCircle.restoreCircle();\n  }\n}\n\n/**\n * Recursively draw all the nodes for a pretty tree\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} canvasComponent\n * @param {Point} position\n * @param {boolean} highlightMode\n * @return {boolean}\n */\nfunction recursivelyDrawNodes(\n    root: BinaryTreeNode<string | number>,\n    canvasComponent: CanvasComponent,\n    position: Point,\n    highlightMode: boolean,\n): boolean {\n  const {x: xPosition, y: yPosition} = position;\n\n  // Draw the node\n  let requiredRedraw = drawSingleNode(\n      root,\n      canvasComponent,\n      {x: xPosition, y: yPosition},\n      highlightMode,\n  );\n  root.nodeCircle.setCoordinates(xPosition, yPosition);\n  root.nodeCircle.draw(canvasComponent);\n\n  // Root spacings\n  const {left, right} = spacingMap.get(root)!;\n\n  // Draw the left child\n  if (root.left) {\n    const leftOfLeft = spacingMap.get(root.left)!.left;\n    const childYPosition = yPosition + theme.lineHeight;\n    const leftPosition = {\n      x: xPosition - getXPositionFromGivenHorizontalNodePosition(\n          left - leftOfLeft,\n      ),\n      y: childYPosition,\n    };\n\n    requiredRedraw = recursivelyDrawNodes(\n        root.left,\n        canvasComponent,\n        leftPosition,\n        highlightMode,\n    ) || requiredRedraw;\n    connectPointsWithBezierCurve(canvasComponent, {\n      xStart: xPosition,\n      xEnd: leftPosition.x,\n    }, {\n      yStart: yPosition + root.nodeCircle.getRadius(),\n      yEnd: childYPosition - root.left.nodeCircle.getRadius(),\n    });\n  }\n\n  // Draw the right child\n  if (root.right) {\n    const rightOfRight = spacingMap.get(root.right)!.right;\n    const childYPosition = yPosition + theme.lineHeight;\n    const rightPosition = {\n      x: xPosition + getXPositionFromGivenHorizontalNodePosition(\n          right - rightOfRight,\n      ),\n      y: childYPosition,\n    };\n\n    requiredRedraw = recursivelyDrawNodes(\n        root.right,\n        canvasComponent,\n        rightPosition,\n        highlightMode,\n    ) || requiredRedraw;\n    connectPointsWithBezierCurve(canvasComponent, {\n      xStart: xPosition,\n      xEnd: rightPosition.x,\n    }, {\n      yStart: yPosition + root.nodeCircle.getRadius(),\n      yEnd: childYPosition - root.right.nodeCircle.getRadius(),\n    });\n  }\n\n  return requiredRedraw;\n}\n\n/**\n * Calculates the spacing required recursively\n *\n * @param {BinaryTreeNode<string | number>} root\n * @return {number} - The spacing requirement of that node\n */\nfunction calculateSpacingMapRecursively(\n    root: BinaryTreeNode<string | number>,\n): number {\n  const left = root.left ? calculateSpacingMapRecursively(\n      root.left,\n  ) + 0.5: 0;\n  const right = root.right ? calculateSpacingMapRecursively(\n      root.right,\n  ) + 0.5: 0;\n  spacingMap.set(root, {\n    left,\n    right,\n  });\n\n  return left + right;\n}\n\n/**\n * Draw a pretty binary tree\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} canvasComponent\n * @param {IndividualInputOptions} options\n */\nfunction drawPrettyBinaryTree(\n    root: BinaryTreeNode<string | number>,\n    canvasComponent: CanvasComponent,\n    options: IndividualInputOptions,\n) {\n  spacingMap = new Map();\n  const maxNodeSpacing = calculateSpacingMapRecursively(root);\n  const heightOfTree = root.getHeight();\n  const {maxHeight, maxWidth, highlightMode} = options;\n\n  // Calculate canvas spacing requirements\n  const {\n    maxCanvasWidthRequired,\n    actualMaxHeight,\n    actualMaxWidth,\n  } = getRequiredAndActualHeightAndWidth(\n      maxNodeSpacing,\n      heightOfTree,\n      maxWidth,\n      maxHeight,\n  );\n\n  // Init calculation\n  const left = spacingMap.get(root)!.left;\n  const midPointInCanvas = actualMaxWidth / 2;\n  const xStart = (midPointInCanvas - maxCanvasWidthRequired / 2);\n\n  // Initialize the canvas\n  canvasComponent.setMaxWidthAndHeight(actualMaxHeight, actualMaxWidth);\n\n  /**\n   * Hover event handler\n   */\n  canvasComponent.onHover((color) => {\n    hoveredColorId = color;\n    requestAnimationFrame(root, canvasComponent, {\n      x: xStart + getXPositionFromGivenHorizontalNodePosition(left+1),\n      y: getCanvasHeightFromTreeHeight(0.5),\n    }, Boolean(highlightMode));\n  });\n\n  // Recursively draw all nodes\n  requestAnimationFrame(root, canvasComponent, {\n    x: xStart + getXPositionFromGivenHorizontalNodePosition(left+1),\n    y: getCanvasHeightFromTreeHeight(0.5),\n  }, Boolean(highlightMode));\n}\n\nexport default drawPrettyBinaryTree;\n","import CanvasComponent from './Canvas';\nimport theme from '../config/theme';\nimport BinaryTreeNode from '../tree/BinaryTreeNode';\nimport {Point} from '../types/Point';\nimport {\n  getCanvasHeightFromTreeHeight,\n  getCanvasWidthFromMaxNodeSpacing,\n  getXPositionFromGivenHorizontalNodePosition,\n} from '../utils/tree';\nimport {IndividualInputOptions, PathArray} from './types';\nimport connectPointsWithBezierCurve\n  from '../utils/connectPointsWithBezierCurve';\n\n/**\n * The current animation frame that is going on\n */\nlet animationFrameId: number;\n\n/**\n * Array of all children that needs printing\n */\nlet globalPathArray: PathArray;\n\n/**\n * Current color that is being hovered on\n */\nlet hoveredColorId: string;\n\n/**\n * Map storing the colorId to the path array\n */\nlet colorIdToPathMap: Map<string, PathArray> = new Map();\n\n/**\n * Clear the existing animation frame if any and request an animation frame\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} comp\n * @param {IndividualInputOptions} options\n */\nfunction requestAnimationFrame(\n    root: BinaryTreeNode<string | number>,\n    comp: CanvasComponent,\n    options: IndividualInputOptions,\n) {\n  // Clear existing animation frame\n  if (animationFrameId) {\n    cancelAnimationFrame(animationFrameId);\n  }\n\n  // Request a new one\n  animationFrameId = window.requestAnimationFrame(\n      () => animationFrameCB(root, comp, options),\n  );\n}\n\n\n/**\n * Get the node height from print array\n *\n * @return {number}\n */\nfunction getNodeHeightFromGlobalPathArray() {\n  return globalPathArray.length + 1;\n}\n\n\n/**\n * Get the node width from the print array\n *\n * @return {{\n *  left: number,\n *  right: number\n * }}\n */\nfunction getNodeWidthFromGlobalPathArray() {\n  let left = 0;\n  let right = 0;\n  let current = 0;\n\n  for (const childDirection of globalPathArray) {\n    if (childDirection === 'left') {\n      current -= 1;\n    } else {\n      current += 1;\n    }\n    if (current < 0) {\n      left = Math.max(Math.abs(current), left);\n    } else {\n      right = Math.max(current, right);\n    }\n  }\n\n  return {\n    left, right,\n  };\n}\n\n/**\n * Draw single node\n *\n * @param {BinaryTreeNode} node\n * @param {CanvasComponent} comp\n * @param {PathArray} pathArray\n * @param {Point} position\n * @return {boolean} Weather redraw is required\n */\nfunction drawSingleNode(\n    node: BinaryTreeNode<string | number>,\n    comp: CanvasComponent,\n    pathArray: PathArray,\n    position: Point,\n) {\n  const {x, y} = position;\n  const doesNodeHaveChildren = Boolean(node.left || node.right);\n  node.nodeCircle.setCoordinates(x, y);\n\n  // Grow or shrink while hover\n  const colorId = node.nodeCircle.draw(comp);\n  colorIdToPathMap.set(colorId, pathArray);\n  if (colorId === hoveredColorId && doesNodeHaveChildren) {\n    return node.nodeCircle.grow();\n  } else {\n    return node.nodeCircle.restoreCircle();\n  }\n}\n\n/**\n * Draw both the children if required\n *\n * @param {BinaryTreeNode} node\n * @param {CanvasComponent} comp\n * @param {number} xPosition\n * @param {number} nodeHeight\n * @param {PathArray} pathArray\n * @return {boolean}\n */\nfunction drawChildren(\n    node: BinaryTreeNode<string | number>,\n    comp: CanvasComponent,\n    xPosition: number,\n    nodeHeight: number,\n    pathArray: PathArray,\n) {\n  const currentHeight = getCanvasHeightFromTreeHeight(nodeHeight);\n  const childHeight = getCanvasHeightFromTreeHeight(nodeHeight + 1);\n  let requiredRedraw = false;\n\n  // Draw the left child\n  if (node.left) {\n    const currentPathArray : PathArray = node.left.left || node.left.right ?\n      [...pathArray, 'left'] : [...pathArray];\n    const xLeft = xPosition - (0.5 * theme.leafNodeSpace);\n\n    requiredRedraw = drawSingleNode(\n        node.left,\n        comp,\n        currentPathArray, {\n          x: xLeft,\n          y: childHeight,\n        },\n    ) || requiredRedraw;\n    connectPointsWithBezierCurve(comp, {\n      xStart: xPosition,\n      xEnd: xLeft,\n    }, {\n      yStart: currentHeight + node.nodeCircle.getRadius(),\n      yEnd: childHeight - node.left.nodeCircle.getRadius(),\n    });\n  }\n\n  // Draw the right child\n  if (node.right) {\n    const currentPathArray : PathArray = node.right.left || node.right.right ?\n      [...pathArray, 'right'] : [...pathArray];\n    const xRight = xPosition + (0.5 * theme.leafNodeSpace);\n\n    requiredRedraw = drawSingleNode(\n        node.right,\n        comp,\n        currentPathArray, {\n          x: xRight,\n          y: childHeight,\n        },\n    ) || requiredRedraw;\n    connectPointsWithBezierCurve(comp, {\n      xStart: xPosition,\n      xEnd: xRight,\n    }, {\n      yStart: currentHeight + node.nodeCircle.getRadius(),\n      yEnd: childHeight - node.right.nodeCircle.getRadius(),\n    });\n  }\n\n  return requiredRedraw;\n}\n\n\n/**\n * Draw all the nodes by following print array\n *\n * @param {BinaryTreeNode} root\n * @param {CanvasComponent} comp\n * @param {number} xRootPosition\n * @return {boolean} - Weather animated redraw is required\n */\nfunction drawAllNodes(\n    root:BinaryTreeNode<string | number>,\n    comp: CanvasComponent,\n    xRootPosition: number): boolean {\n  // Draw root\n  let currentNode = root;\n  let xPosition = xRootPosition;\n  let currentNodeHeight = 0.5;\n  const currentPathArray: Array<'left' | 'right'> = [];\n  let requiredRedraw = drawSingleNode(root, comp, [...currentPathArray], {\n    x: xPosition,\n    y: getCanvasHeightFromTreeHeight(currentNodeHeight),\n  });\n\n  // Draw all the children according to the path\n  for (const currentPath of globalPathArray) {\n    requiredRedraw = drawChildren(\n        currentNode,\n        comp,\n        xPosition,\n        currentNodeHeight,\n        currentPathArray,\n    ) || requiredRedraw;\n\n    if (currentPath === 'left') {\n      currentNode = currentNode.left!;\n      xPosition = xPosition - (0.5 * theme.leafNodeSpace);\n      currentPathArray.push('left');\n    } else {\n      currentNode = currentNode.right!;\n      xPosition = xPosition + (0.5 * theme.leafNodeSpace);\n      currentPathArray.push('right');\n    }\n    currentNodeHeight += 1;\n  }\n\n  // Draw the children of the last element in the path\n  requiredRedraw = drawChildren(\n      currentNode,\n      comp,\n      xPosition,\n      currentNodeHeight,\n      currentPathArray,\n  ) || requiredRedraw;\n\n  // Return if redraw is required\n  return requiredRedraw;\n}\n\n/**\n * Animation frame call back function that will recursively be called.\n * In case animation is required\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} comp\n * @param {IndividualInputOptions} options\n */\nfunction animationFrameCB(\n    root: BinaryTreeNode<string | number>,\n    comp: CanvasComponent,\n    options: IndividualInputOptions,\n) {\n  // Height and width calculations\n  const nodeHeight = getNodeHeightFromGlobalPathArray();\n  const {\n    left: leftNodeWidth,\n    right: rightNodeWidth,\n  } = getNodeWidthFromGlobalPathArray();\n  const requiredHeight = getCanvasHeightFromTreeHeight(nodeHeight + 1);\n  const requiredWidth = getCanvasWidthFromMaxNodeSpacing(\n      leftNodeWidth+rightNodeWidth,\n  );\n  const actualHeight = Math.max(requiredHeight, options.maxHeight);\n  const actualWidth = Math.max(requiredWidth, options.maxWidth);\n  const xStart = (actualWidth/2) - (requiredWidth/2);\n\n  // Set the height and width\n  // This also clears the canvas. So no need to clear it manually.\n  comp.setMaxWidthAndHeight(actualHeight, actualWidth);\n\n  // Initialize color id to path map\n  colorIdToPathMap = new Map();\n\n  // Draw and check if redraw is required\n  const requiredRedraw = drawAllNodes(\n      root,\n      comp,\n      xStart + getXPositionFromGivenHorizontalNodePosition(leftNodeWidth + 1),\n  );\n  if (requiredRedraw) {\n    requestAnimationFrame(root, comp, options);\n  }\n}\n\n/**\n * Draw an expandable binary tree\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} canvasComponent\n * @param {IndividualInputOptions} options\n */\nfunction drawExpandableBinaryTree(\n    root: BinaryTreeNode<string | number>,\n    canvasComponent: CanvasComponent,\n    options: IndividualInputOptions,\n) {\n  // Initialization\n  globalPathArray = [];\n\n  /**\n   * Click event handler\n   */\n  canvasComponent.onClick((color) => {\n    globalPathArray = colorIdToPathMap.get(color) || globalPathArray;\n    requestAnimationFrame(root, canvasComponent, options);\n  });\n\n  /**\n   * Hover event handler\n   */\n  canvasComponent.onHover((color) => {\n    hoveredColorId = color;\n    requestAnimationFrame(root, canvasComponent, options);\n  });\n\n  // Draw frame\n  requestAnimationFrame(root, canvasComponent, options);\n}\n\nexport default drawExpandableBinaryTree;\n","import CanvasComponent from './Canvas';\nimport BinaryTreeNode from '../tree/BinaryTreeNode';\nimport theme from '../config/theme';\nimport {\n  getCanvasHeightFromTreeHeight,\n  getMaxLeafNodesFromHeight,\n  getRequiredAndActualHeightAndWidth,\n} from '../utils/tree';\nimport {\n  HorizontalStartAndEndInput,\n  IndividualInputOptions,\n} from './types';\nimport connectPointsWithBezierCurve\n  from '../utils/connectPointsWithBezierCurve';\n\n/**\n * Recursively draw all the nodes\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} canvasComponent\n * @param {number} currentLine\n * @param {HorizontalStartAndEndInput} horizontalConfig\n */\nfunction recursivelyDrawNodes(\n    root: BinaryTreeNode<string | number>,\n    canvasComponent: CanvasComponent,\n    currentLine: number,\n    horizontalConfig: HorizontalStartAndEndInput,\n) {\n  // X Calculation\n  const {xStart, xEnd} = horizontalConfig;\n  const xPosition = (xStart + xEnd) / 2;\n\n  // Y Calculation\n  const yPosition = currentLine * theme.lineHeight;\n\n  // Draw the node\n  root.nodeCircle.setCoordinates(xPosition, yPosition);\n  root.nodeCircle.draw(canvasComponent);\n\n\n  // Draw the left child nodes\n  // Radius is added and subtracted from y to move the line outside the circle\n  if (root.left) {\n    recursivelyDrawNodes(root.left, canvasComponent, currentLine+1, {\n      xStart,\n      xEnd: xPosition,\n    });\n    connectPointsWithBezierCurve(canvasComponent, {\n      xStart: xPosition,\n      xEnd: (xStart + xPosition) / 2,\n    }, {\n      yStart: yPosition + theme.radius,\n      yEnd: getCanvasHeightFromTreeHeight(currentLine + 1) - theme.radius,\n    });\n  }\n\n  if (root.right) {\n    recursivelyDrawNodes(root.right, canvasComponent, currentLine+1, {\n      xStart: xPosition,\n      xEnd,\n    });\n    connectPointsWithBezierCurve(canvasComponent, {\n      xStart: xPosition,\n      xEnd: (xPosition + xEnd) / 2,\n    }, {\n      yStart: yPosition + theme.radius,\n      yEnd: getCanvasHeightFromTreeHeight(currentLine + 1) - theme.radius,\n    });\n  }\n}\n\n/**\n * Draw an expandable binary tree\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} canvasComponent\n * @param {IndividualInputOptions} options\n */\nfunction drawSimpleBinaryTree(\n    root: BinaryTreeNode<string | number>,\n    canvasComponent: CanvasComponent,\n    options: IndividualInputOptions,\n) {\n  const heightOfTree = root.getHeight();\n  const maxNumberOfLeafNodes = getMaxLeafNodesFromHeight(heightOfTree);\n  const {maxHeight, maxWidth} = options;\n\n  // Max height and width requirements\n  const {\n    maxCanvasWidthRequired,\n    actualMaxHeight,\n    actualMaxWidth,\n  } = getRequiredAndActualHeightAndWidth(\n      maxNumberOfLeafNodes,\n      heightOfTree,\n      maxWidth,\n      maxHeight,\n  );\n\n  // Init calculation\n  const midPointInCanvas = actualMaxWidth / 2;\n  const xStart = (midPointInCanvas - maxCanvasWidthRequired / 2) +\n  theme.leafNodeSpace;\n  const xEnd = (midPointInCanvas + maxCanvasWidthRequired / 2) -\n  theme.leafNodeSpace;\n\n  // Initialize the canvas\n  canvasComponent.setMaxWidthAndHeight(actualMaxHeight, actualMaxWidth);\n\n  // Recursively draw the tree\n  recursivelyDrawNodes(root, canvasComponent, 0.5, {xStart, xEnd});\n}\n\nexport default drawSimpleBinaryTree;\n","import BinaryTreeNode from '../tree/BinaryTreeNode';\nimport {VisualizationType} from '../enumns/VisualizationType';\nimport drawPrettyBinaryTree from './drawPrettyBinaryTree';\nimport drawExpandableBinaryTree from './drawExpandableBinaryTree';\nimport drawSimpleBinaryTree from './drawSimpleBinaryTree';\nimport {MainInputOptions} from './types';\nimport CanvasComponent from './Canvas';\n\n// For keeping track of canvas components for canvas elements\nconst canvasMap: Map<HTMLCanvasElement, CanvasComponent> = new Map();\n\n/**\n * Draw a binary tree in one of the given types\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {HTMLCanvasElement} canvasElement\n * @param {Partial<MainInputOptions>} options\n */\nfunction drawBinaryTree(\n    root: BinaryTreeNode<string | number>,\n    canvasElement: HTMLCanvasElement,\n    options: Partial<MainInputOptions> = {},\n) {\n  const {\n    type = VisualizationType.SIMPLE,\n    maxHeight = window.innerHeight,\n    maxWidth = window.innerWidth,\n  } = options;\n\n  const canvasComponent = canvasMap.get(canvasElement) ||\n  new CanvasComponent(canvasElement);\n  canvasMap.set(canvasElement, canvasComponent);\n\n  switch (type) {\n    case VisualizationType.PRETTY:\n      drawPrettyBinaryTree(root, canvasComponent, {\n        maxHeight,\n        maxWidth,\n      });\n      break;\n\n    case VisualizationType.EXPANDABLE:\n      drawExpandableBinaryTree(root, canvasComponent, {\n        maxHeight,\n        maxWidth,\n      });\n      break;\n\n    case VisualizationType.HIGHLIGHT:\n      drawPrettyBinaryTree(root, canvasComponent, {\n        maxHeight,\n        maxWidth,\n        highlightMode: true,\n      });\n      break;\n\n    default:\n      drawSimpleBinaryTree(root, canvasComponent, {\n        maxHeight,\n        maxWidth,\n      });\n      break;\n  }\n}\n\nexport default drawBinaryTree;\n","import CanvasComponent from './Canvas';\nimport drawBinaryTree from './drawBinaryTree';\n\nexport {\n  CanvasComponent,\n  drawBinaryTree,\n};\n","export * from './VisualizationType';\n","export * from './theme';\n","export * from './tree';\nexport * from './canvas';\nexport * from './enumns';\nexport * from './config';\n","import { BinarySearchTreeNode, drawBinaryTree, VisualizationType, setTheme } from 'binary-tree-visualizer';\nconst resultBtn = document.getElementById(\"btn\");\nconst nodesValues = document.getElementById(\"nodeData\");\nconst result = document.querySelector(\".result\");\nconst message = document.getElementById(\"suggest\");\nconst error = document.querySelector(\".error\");\nconst resetBtn = document.querySelector(\".reset\");\nsetTheme({\n  textFont: \"Poppins\",\n  radius: 31,\n  fontSize: 18,\n  \n  strokeColor: \"#2a832f\",\n  colorArray: [\n    {\n      borderColor: \"#ffff\",\n      bgColor: \"#2a833f\",\n    },\n  ],\n  leafNodeSpace: 80,\n  lineHeight: 80,\n});\n\nresultBtn.addEventListener(\"click\", inputToList);\nresetBtn.addEventListener(\"click\", () => {\n  nodesValues.value = \"\";\n  message.innerText = \"\";\n  result.style.display = \"none\";\n  resetBtn.style.display = \"none\";\n});\nnodesValues.addEventListener(\"keyup\", (e) => {\n  if (e.key === \"Enter\") {\n    inputToList(e);\n  }\n});\nfunction inputToList(e) {\n  e.preventDefault();\n  if (nodesValues.value == \"\") {\n    error.style.display = \"block\";\n    result.style.display = \"none\";\n    message.innerText = \"\";\n    error.innerText = ` * Error: Please Enter Some Values , Tree Cannot Be Empty.`;\n    setTimeout(()=>{\n    error.innerText=``;\n    },4000);\n    return;\n  } else {\n    result.style.display = \"flex\";\n    error.style.display = \"none\";\n    resetBtn.style.display = \"flex\";\n    const data = nodesValues.value.split(\" \");\n    const list = [];\n    data.forEach((values) => {\n      list.push(parseInt(values));\n    });\n    if (list.some(isNaN)) {\n      result.style.display = \"none\";\n      error.style.display = \"block\";\n      error.innerHTML =\n        \"Please Check All The Rules First , Only Numbers Are Allowed !!\";\n      setTimeout(()=>{\n      error.innerHTML=``;\n      },4000);\n      return;\n    }\n\n    buildATree(list);\n    if (hasDuplicates(list)) {\n      const dupli = tellsDuplicates(list);\n      message.innerText =\n        \"YOUR FINAL BINARY SEARCH TREE : \\nYou Have Entered Some Duplicates Also : \";\n      dupli.forEach((elem) => {\n        message.innerText += \" \" + elem + \" ,\";\n      });\n    } else message.innerText = \"YOUR FINAL BINARY SEARCH TREE :\";\n  }\n}\nfunction buildATree(list) {\n  const root = new BinarySearchTreeNode(list[0]);\n  for (let i = 1; i < list.length; i++) {\n    root.insert(list[i]);\n  }\n  drawBinaryTree(root, document.querySelector(\"canvas\"));\n}\nfunction hasDuplicates(list) {\n  let set = new Set();\n  for (const i of list) set.add(i);\n  if (list.length != set.size) return true;\n  return false;\n}\nfunction tellsDuplicates(list) {\n  let res = new Set();\n  let counts = {};\n  for (const num of list) {\n    counts[num] = counts[num] ? counts[num] + 1 : 1;\n  }\n  for (const key in counts) {\n    if (Object.hasOwnProperty.call(counts, key)) {\n      if (counts[key] > 1) res.add(key);\n    }\n  }\n  return res;\n}\n\nif (window.matchMedia(\"screen and (max-width: 546px)\").matches) {\n  setTheme({\n    radius: 40,\n    leafNodeSpace: 110,\n    lineHeight: 110,\n  });\n}\n"]}